# 【配列・連想配列】
# Pythonに限らずプログラミングを行う上で配列は非常に重要です。ここでは主要な配列の概要を示すとともに、同じような機能の配列であっても言語ごとに呼び方が異なる場合があるため、ここでまとめておきます。
# 
# 1 配列の種類
# 2 他の言語では
# 
# 【配列の種類】
# 主な配列には以下の４つがあります。
# 
# 
# 
# ①
# 《タプル（tuple）》
# 任意の数の要素を持つことができる配列です。作成したあとは要素の追加や削除を行うことができません。
# 
# タプルはプログラミングにおける機能としては一般的ですが、他の言語ではあまり聞かないネーミングです。簡単に言うと、複数の要素から構成されそれを一つのモノとして扱える機能です。後の項で解説するリストとの違いは、作成した後に要素の追加や削除が出来るか出来ないかです。タプルの場合は作成した後の変更は不可、リストの場合は可と覚えておきましょう。
# 
# ・タプルとは？
# 先に述べたとおり、タプルの特徴は作成した後の変更が不可能という点です。複数の値を返す関数の戻り値などをタプルにすると良いでしょう。使い方は下記の通りです。
# 
# import datetime
# 
# 
# def get_today():
# 
#     today = datetime.datetime.today()
#     value = (today.year, today.month, today.day)
# 
#     return value
# 
# 
# test_tuple = get_today()
# 
# print(test_tuple)
# print(test_tuple[0])
# print(test_tuple[1])
# print(test_tuple[2])
# 
# 
# 《実行結果》
# (2010, 5, 8)
# 2010
# 5
# 8
# 
# ※プログラムの実行時間によって結果は異なります。
# 
# 7行目で要素を3つ「 () 」（カッコ）を使用して囲んでいます。これでその3要素を保持しているタプルとして作成することができます。
# 
# import datetime
# 
# 
# def get_today():
# 
#     today = datetime.datetime.today()
#     value = (today.year, today.month, today.day)
# 
#     return value
# 
# 
# test_tuple = get_today()
# 
# print(test_tuple)
# print(test_tuple[0])
# print(test_tuple[1])
# print(test_tuple[2])
# 
# またタプルやリストなどは（文字列もそうです）、シーケンス型と呼ばれ「 [] 」を用いたインデックス値で各要素にアクセスできるようになっています（インデックス値は0から始まります）。
# 
# 
# 
# ②
# 《リスト（list）》
# 任意の数の要素を持つことができる配列です。作成したあとでも要素の追加や削除を行うことができます。
# 
# タプルに続いてリストの解説です。前項でも少し触れましたが、タプルとの違いは作成した後に要素の追加や削除が出来るか出来ないかです。
# 
# 1 リストの基本
# 2 要素の追加
# 3 インデックスを指定して追加
# 4 要素の削除１
# 5 要素の削除２
# 6 要素のインデックスを取得
# 7 リスト内での要素数を取得
# 
# １ リストの基本
# 要素の変更がいつでも可能なので非常に汎用性が高いです。以下使い方の例となりますが、この段階ではタプルとさほど変わりません。
# ※for文は後の項で説明しますが、繰り返し処理を行う機能です。
# 
# test_list_1 = ['python', '-', 'izm', '.', 'com']
# print(test_list_1)
# 
# print('--------------------------------')
# 
# for i in test_list_1:
#     print(i)
# 
# 
# 《実行結果》
# ['python', '-', 'izm', '.', 'com']
# --------------------------------
# python
# -
# izm
# .
# com
# 
# タプルは「 () 」（カッコ）を使用して作成しましたが、リストでは「 [] 」（大カッコ）で作成します。上記の例は作成と同時に要素を埋め込み、リストをそのまま出力した場合と、ループ（繰り返し処理）を利用して出力した場合の例です。
# 
# ２ 要素の追加
# ここからがタプルとの違いです。要素の追加を行ってみましょう。appendはリストの末尾に要素の追加を行います。
# 
# test_list_1 = []
# print(test_list_1)
# 
# print('--------------------------------')
# 
# test_list_1.append('python')
# test_list_1.append('-')
# test_list_1.append('izm')
# test_list_1.append('.')
# test_list_1.append('com')
# 
# print(test_list_1)
# 
# 
# 《実行結果》
# []
# --------------------------------
# ['python', '-', 'izm', '.', 'com']
# 
# まずは空のリストを作成し、その後appendを利用して要素の追加を行っています。
# 
# 
# ３ インデックスを指定して追加
# appendは常に末尾へ追加されますが、insertを利用するとインデックス値を指定して要素を追加することができます。
# 
# test_list_1 = ['python', 'izm', 'com']
# print(test_list_1)
# 
# print('--------------------------------')
# 
# test_list_1.insert(1, '-')
# test_list_1.insert(3, '.')
# 
# print(test_list_1)
# 
# test_list_1.insert(0, 'http://www.')
# 
# print(test_list_1)
# 
# 
# 《実行結果》
# ['python', 'izm', 'com']
# --------------------------------
# ['python', '-', 'izm', '.', 'com']
# ['http://www.', 'python', '-', 'izm', '.', 'com']
# 
# 最初の引数は追加箇所を示すインデックス値、次の引数は追加を行う要素となります。インデックス値にゼロを指定すると、リストの先頭へ追加が行われます。
# 
# 
# ４ 要素の削除１
# removeは指定の引数に該当する要素を削除します。最初に見つかった要素のみ削除が行われるので、指定の要素がリスト内に複数存在する場合は注意が必要です。
# 
# test_list_1 = ['1', '2', '3', '2', '1']
# print(test_list_1)
# 
# print('--------------------------------')
# 
# test_list_1.remove('2')
# 
# print(test_list_1)
# 
# 
# 《実行結果》
# ['1', '2', '3', '2', '1']
# --------------------------------
# ['1', '3', '2', '1']
# 
# リスト内の最初の’2’のみ削除が行われます。
# 
# 
# ５ 要素の削除２
# popは指定のインデックス値に存在する要素の削除を行い、削除された要素を戻り値として返します。引数なしで使用すると末尾の要素が削除されます。
# 
# test_list_1 = ['1', '2', '3', '2', '1']
# print(test_list_1)
# 
# print('--------------------------------')
# 
# print(test_list_1.pop(1))
# print(test_list_1)
# 
# print(test_list_1.pop())
# print(test_list_1)
# 
# 
# 《実行結果》
# ['1', '2', '3', '2', '1']
# --------------------------------
# 2
# ['1', '3', '2', '1']
# 1
# ['1', '3', '2']
# 
# 最初のpopの結果として’2’が削除され、次のpopで末尾の’1’が削除されます。
# 
# ６ 要素のインデックスを取得
# indexを利用すると、指定の引数に該当するインデックス値を取得することができます。removeと同様、最初に見つかった要素のインデックス値のみ取得出来ます。
# 
# test_list_1 = ['100', '200', '300', '200', '100']
# 
# print(test_list_1.index('200'))
# 
# 
# 《実行結果》
#  1
# 
# 最初に見つかった’200’のインデックス値が返されます。
# 
# 
# ７ リスト内での要素数を取得
# countは指定の引数がリスト内でいくつあるかを返します。
# 
# test_list_1 = ['100', '200', '300', '200', '100']
# 
# print(test_list_1.count('200'))
# 
# 
# 《実行結果》
# ２
# 
# 
# 
# ③
# 《ディクショナリ・辞書（dict）》
# 任意の数の要素を持つことができる配列で、keyとvalueのペアを一要素とします。作成した後でも要素の追加や削除を行うことができますが、1つのディクショナリの中で同じkeyを持つことができません。
# 
# リストの次はディクショナリです（辞書とも呼ばれます）。基本的にはリストと同じような構造ではありますが、キーとなる値（key）とバリューとなる値（value）をセットで１つの要素として持つことができるのが特徴です。
# 
# 1 ディクショナリの基本
# 2 valueの取得
# 3 要素の追加
# 4 要素の削除
# 5 keyやvalueだけを取得する
# 6 keyとvalueを同時に取得する
# 7 keyを保持しているの確認
# 
# 
# １ ディクショナリの基本
# keyとvalueのセットは他のプログラミング言語でもよくある機能です。リストと同様、使用頻度はかなりあると思います。
# 
# test_dict_1 = {'YEAR':'2010', 'MONTH':'1', 'DAY':'20'}
# 
# print(test_dict_1)
# 
# print('=================================')
# 
# for i in test_dict_1:
#     print(i)
#     print(test_dict_1[i])
#     print('--------------------------------')
# 
# 
# 《実行結果》
# {'MONTH': '1', 'DAY': '20', 'YEAR': '2010'}
# =================================
# MONTH
# 1
# --------------------------------
# DAY
# 20
# --------------------------------
# YEAR
# 2010
# --------------------------------
# 
# タプルは「 () 」（カッコ）、リストは「 [] 」（大カッコ）で作成しますが、ディクショナリは「 {} 」（中カッコ）を使用します。一つの要素をkey:valueのようにし、次の要素との間に「 , 」（カンマ）で区切りを入れます。ディクショナリに対して繰り返し処理を行うとkeyが取得できるので、それを利用してvalueを取り出しています。
# 
# 
# ２ valueの取得
# 先程のサンプルコードではdict_obj[key]というような形式で値を取得しましたが、getを利用する事もできます。
# 
# test_dict_1 = {'YEAR':'2010', 'MONTH':'1', 'DAY':'20'}
# 
# print(test_dict_1)
# 
# print('=================================')
# 
# print(test_dict_1['YEAR'])
# #print(test_dict_1['YEARS'])
# 
# print('---------------------------------')
# 
# print(test_dict_1.get('YEAR'))
# print(test_dict_1.get('YEARS'))
# 
# print('---------------------------------')
# 
# print(test_dict_1.get('YEAR','NOT FOUND'))
# print(test_dict_1.get('YEARS','NOT FOUND'))
# 
# 
# 《実行結果》
# {'MONTH': '1', 'DAY': '20', 'YEAR': '2010'}
# =================================
# 2010
# ---------------------------------
# 2010
# None
# ---------------------------------
# 2010
# NOT FOUND
# 
# getを使用する利点は、ディクショナリ内に対応するkeyが存在しなくてもエラーにはならないことです。dict_obj[key]というような形で取得した場合、keyが存在しないとKeyErrorとなりエラー終了してしまいます。またgetはkeyが存在しなかった場合のデフォルト値を設定することができ、例では’NOT FOUND’という文字列を返すようにしています。
# 
# 
# ３ 要素の追加
# ディクショナリへkeyとvalueの要素を追加する場合は下記の通り記述します。
# 
# test_dict_1 = {}
# 
# print(test_dict_1)
# 
# print('=================================')
# 
# test_dict_1['YEAR']  = '2010'
# test_dict_1['MONTH'] = '1'
# test_dict_1['DAY']   = '20'
# 
# print(test_dict_1)
# 
# 
# 《実行結果》
# {}
# =================================
# {'MONTH': '1', 'DAY': '20', 'YEAR': '2010'}
# 
# 空のディクショナリを作成し、その後それぞれのkeyとvalueを追加しています。
# 
# 
# ４ 要素の削除
# ディクショナリから要素を削除する場合はdelを使用します。
# 
# test_dict_1 = {'YEAR':'2010', 'MONTH':'1', 'DAY':'20'}
# 
# print(test_dict_1)
# 
# print('=================================')
# 
# del test_dict_1['DAY']
# 
# print(test_dict_1)
# 
# 
# 《実行結果》
# {'MONTH': '1', 'DAY': '20', 'YEAR': '2010'}
# =================================
# {'MONTH': '1', 'YEAR': '2010'}
# 
# delの後に削除を行うkeyを指定します。
# 
# 
# ５ keyやvalueだけを取得する
# keysを使用するとディクショナリからkeyのみを取得し、リスト化して返されます。またvaluesはvalueのみを取得します
# 
# test_dict_1 = {'YEAR':'2010', 'MONTH':'1', 'DAY':'20'}
# 
# print(test_dict_1)
# 
# print('=================================')
# 
# print(test_dict_1.keys())
# print(test_dict_1.values())
# 
# 
# 《実行結果》
# {'MONTH': '1', 'DAY': '20', 'YEAR': '2010'}
# =================================
# ['MONTH', 'DAY', 'YEAR']
# ['1', '20', '2010']
# 
# 
# ６ keyとvalueを同時に取得する
# itemsを使用するとkeyとvalueを同時に取得することができます。
# 
# test_dict_1 = {'YEAR':'2010', 'MONTH':'1', 'DAY':'20'}
# 
# print(test_dict_1)
# 
# print('=================================')
# 
# for key, value in test_dict_1.items():
#     print(key, value)
# 
# 
# 《実行結果》
# {'MONTH': '1', 'DAY': '20', 'YEAR': '2010'}
# =================================
# MONTH 1
# DAY 20
# YEAR 2010
# 
# 
# ７ keyを保持しているの確認
# ディクショナリが指定のキーを保持しているかを確認するにはinを利用します。
# 
# test_dict_1 = {'YEAR':'2010', 'MONTH':'1', 'DAY':'20'}
# 
# print(test_dict_1)
# 
# print('=================================')
# print('YEAR' in test_dict_1)
# print('YEARS' in test_dict_1)
# 
# 
# 《実行結果》
# {'MONTH': '1', 'DAY': '20', 'YEAR': '2010'}
# =================================
# True
# False
# 
# 
# 
# ④
# セット・集合（set）
# 任意の数の要素を持つことができる配列です。作成した後でも要素の追加や削除を行うことができますが、1つのセットの中で重複した要素を持つことができません。
# 
# ディクショナリの次はセットです。集合とも呼ばれます。リストと同じように要素を追加、削除することができますが、重複した要素を持つことができないのが特徴です。また本項では更新することができないsetであるfrozensetも取り扱います。
# ※セットのもう少し踏み込んだ使い方はセットの比較・作成・更新で触れています。
# 
# 1 セットの基本
# 2 要素の追加
# 3 要素の削除
# 4 frozenset
# 
# 
# １ セットの基本
# test_set_1 = {'python', '-', 'izm', '.', 'com'}
# print(test_set_1)
#  
# for i in test_set_1:
#     print(i)
# 
# 
# 《実行結果》
# {'izm', '.', '-', 'python', 'com'}
# --------------------------------
# python
# -
# com
# izm
# .
# 
# 要素がない空のセットを作成する時はsetを用います。
# 
# # これはディクショナリ
# test_dict = {}
# 
# # これはセット
# test_set = {'python'}
# 
# # 空のセットは「set」を使う
# empty_set = set()
# 
# 前述の通り、重複した値を持つことはできません。たとえば次の例では‘python’と‘izm’が重複していますが、そのセットの出力結果には1つだけしか存在していません。
# 
# test_set_1 = {'python', '-', 'izm', '.', 'com', 'python', 'izm'}
# print(test_set_1)
# 
# print('--------------------------------')
# 
# for i in test_set_1:
#     print(i)
# 
# 
# 《実行結果》
# {'izm', '.', '-', 'python', 'com'}
# --------------------------------
# python
# -
# com
# izm
# .
# 
# 
# ２ 要素の追加
# 単一の要素を追加する場合はadd、他のセットやリスト、タプルなどから要素を追加する場合はupdateを使用します。
# 
# test_set_1 = set()
# 
# test_set_1.add('python')
# test_set_1.update({'-', 'izm', '.', 'com'})
# 
# print(test_set_1)
# 
# 
# 《実行結果》
# {'izm', '.', '-', 'python', 'com'}
# 
# 
# ３ 要素の削除
# セットから要素を削除する場合はremove、discardを使用します。removeは指定した要素が存在していない場合はエラーとなります。
# 
# test_set_1 = {'python', '-', 'izm', '.', 'com'}
# 
# test_set_1.remove('-')
# test_set_1.discard('.')
# 
# print(test_set_1)
# 
# 
# 《実行結果》
# {'izm', 'python', 'com'}
# 
# 
# ４ frozenset
# frozensetはfrozenset関数を使用して通常のsetのように作成できます。ただし次の例にあるようなremoveやdiscard、さらにaddやupdateなどを行おうとするとAttributeErrorが発生します。
# 
# test_set_1 = frozenset({'python', '-', 'izm', '.', 'com'})
# 
# # test_set_1.remove('-')
# # test_set_1.discard('.')
# 
# print(test_set_1)
# 
# 
# 《実行結果》
# frozenset({'izm', '.', '-', 'python', 'com'})
# 
# 
# 
# 【セットのもう少し踏み込んだ使い方・セットの比較・作成・更新】
# Pythonのセットは、セット同士の比較や反復可能オブジェクトとの比較をさまざまな条件で行うことができます。またその結果をもって新たなセットを作成したり、既存のセットを更新することも可能で、一部の関数は演算子を用いても同じ結果を得ることができます。
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
