# 【クリックした場所に円を動かしてみよう】
# キャンパスをクリックした時に、その場所に円が動くと言う仕組みを作る

# 【クリックされたところに描画する】
# 今回もChapter6-4と同じ「イベント(event)」を使い、処理を記述する
# しかし、今回の方法は前回のボタンの場合と少し違う

#《bindメソッドを使って実行したい関数を結びつける》
# ボタンの場合、「command=」に関数名を記述しボタンがクリックされたときは、ButtonClick関数を実行するために次のようにした
# button1 = tk.Button(root, text = "チェック", font=("Helvetica", 14), command = ButtonClick)
# 「command = ButtonClick)」　← クリックされた時に実行された関数
# それに対してキャンパスの場合は、bindメソッドを使って、「イベント名」と「実行したい関数」とを結びつける

#「bindメソッド」
# canvas.bind(イベント名, 関数名)
# このようにbindメソッドを使うのは、キャンパスではクリック以外にもダブルクリックなど、その他のイベントもあるため
# イベント名は「キーの装飾」「イベント」「種類」をマイナス記号でつなげ、全体を「<」「>」で囲んだ書式で指定する

# イベントの種類の書式
# <キーの装飾 - イベント - 種類>
# 　　　　　　　　　↑　　　  ↑
#           < Button  -  1  >
#       マウスボタン押下    左ボタン

# 「キーの装飾」とは「Shift」「Ctrl」「Ait」など、一緒に押されたキーの状態を示す
# 必要ないときは(これらのキーが押された事を判定する必要がないときは)、省略できる
# 「イベント」とはイベント種別のこと、「種類」とはボタンやキーの種類
# 「クリックされた」というイベントは"<Button-1>"という文字列
# 上記の例は「１番のマウスボタン(=左ボタン)」が押下(=クリック)されたとき」という意味

#【イベントの種別】
# Button または ButtonPress   押下(クリック)された。種類のところで「１」は左ボタン、「２」は右ボタン、「３」は中央ボタンを、それぞれ示す
# ButtonRelease           ボタンが放された。種類のところの指定は上記と同じ   
# Key または KeyPress      キーボードのキーが押下された。種類のところでキーの番号を指定する
# KeyRelease              キーボードのキーが放された。種類のところの指定は上記と同じ
# Enter                   領域内にマウスパットが入ってきた
# Leave                   領域内からマウスポインタが出て行った
# Motion                  領域内でマウスパットが動いた

# 【イベントの関数には座標などの情報が引数をして渡される】
# 例えば、マウスの左ボタンでクリックされたときに「click (今回の記述はclickとした) 」と名前の関数を実行したいなら下記のように記述する

# canvas.bind("<Button-1>", click)
# これでクリックされた時に、click関数が実行される
# 《MEMO》 「click」というのは今回任意でつけた名前である。もちろん関数名は好きなものでOK

# 次回は、P191から