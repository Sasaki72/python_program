# 【クリックした場所に円を動かしてみよう】
# キャンパスをクリックした時に、その場所に円が動くと言う仕組みを作る

# 【クリックされたところに描画する】
# 今回もChapter6-4と同じ「イベント(event)」を使い、処理を記述する
# しかし、今回の方法は前回のボタンの場合と少し違う

#《bindメソッドを使って実行したい関数を結びつける》
# ボタンの場合、「command=」に関数名を記述しボタンがクリックされたときは、ButtonClick関数を実行するために次のようにした
# button1 = tk.Button(root, text = "チェック", font=("Helvetica", 14), command = ButtonClick)
# 「command = ButtonClick)」　← クリックされた時に実行された関数
# それに対してキャンパスの場合は、bindメソッドを使って、「イベント名」と「実行したい関数」とを結びつける

#「bindメソッド」
# canvas.bind(イベント名, 関数名)
# このようにbindメソッドを使うのは、キャンパスではクリック以外にもダブルクリックなど、その他のイベントもあるため
# イベント名は「キーの装飾」「イベント」「種類」をマイナス記号でつなげ、全体を「<」「>」で囲んだ書式で指定する

# イベントの種類の書式
# <キーの装飾 - イベント - 種類>
# 　　　　　　　　　↑　　　  ↑
#           < Button  -  1  >
#       マウスボタン押下    左ボタン

# 「キーの装飾」とは「Shift」「Ctrl」「Ait」など、一緒に押されたキーの状態を示す
# 必要ないときは(これらのキーが押された事を判定する必要がないときは)、省略できる
# 「イベント」とはイベント種別のこと、「種類」とはボタンやキーの種類
# 「クリックされた」というイベントは"<Button-1>"という文字列
# 上記の例は「１番のマウスボタン(=左ボタン)」が押下(=クリック)されたとき」という意味

#【イベントの種別】
# Button または ButtonPress   押下(クリック)された。種類のところで「１」は左ボタン、「２」は右ボタン、「３」は中央ボタンを、それぞれ示す
# ButtonRelease           ボタンが放された。種類のところの指定は上記と同じ   
# Key または KeyPress      キーボードのキーが押下された。種類のところでキーの番号を指定する
# KeyRelease              キーボードのキーが放された。種類のところの指定は上記と同じ
# Enter                   領域内にマウスパットが入ってきた
# Leave                   領域内からマウスポインタが出て行った
# Motion                  領域内でマウスパットが動いた

# 【イベントの関数には座標などの情報が引数をして渡される】
# 例えば、マウスの左ボタンでクリックされたときに「click (今回の記述はclickとした) 」と名前の関数を実行したいなら下記のように記述する

# canvas.bind("<Button-1>", click)
# これでクリックされた時に、click関数が実行される
# 《MEMO》 「click」というのは今回任意でつけた名前である。もちろん関数名は好きなものでOK
# この時、click関数は、引数としてそのイベント発生時の情報が渡される

# def click(event):
# ・・・クリックされた時の処理をここに書く・・・
# 例えば上記のように、「event」という引数として受け取る書式にしておく
# 《MEMO》今回は「event」としてるが、任意なので他の「e」や「evt」や「a」や「abc」など何でもOK
# 例えば「def click(e):」、として定義した場合は、X座標は「e.x」、Y座標は「e.y」として取得できる

# eventには、クリックされた時の情報が渡される。具体的には、
# ・「event」がクリックされた場所のX座標
# ・「event」がクリックされた場所のY座標
# これらの座標のそれぞれを示す。そこでcreate_ovalメソッドを使って、この座標に円を描画すれば、クリックされた場所に円が描画される

# canvas.create_oval(event.x - 20, event.y - 20, event.x + 20, event.y + 20, fill = "red",width = 0)
# これを使って実行するとクリックした場所に次々と円が出てくる

# coding:utf-8
import tkinter as tk

def click(event):
    # クリックされた時そのに描画する
    canvas.create_oval(event.x - 20, event.y - 20, event.x + 20, event.y + 20, fill = "red", width = 0)
# 「event.x」＝クリックされた「x座標」、「event.y」＝クリックされた「y座標」

# ウィンドウを描く
root = tk.Tk()
root.geometry("600x400")

# キャンバスを置く
canvas =tk.Canvas(root, width =600, height =400, bg="white")
canvas.place(x = 0, y = 0)

# イベントを設定する
canvas.bind("<Button-1>", click)
# 「, click」＝ クリックされた時にclick関数が実行されるようにする

root.mainloop()


#【クリックされたところに移動する】
# 次は、クリックされたところに円が増えるのではなく、「クリックしたところに円が移動する」ように動作を変えてみる
# そのためには、円を描くときに「元々描かれていた円を消す」ようにする
# 「消す」というのは分かりにくいので、「消えたように見せる」ようにプログラミングを作る
# いくつか考えがあるが、「元々描かれていた場所で、fill = "white", width = 0 を指定して、線のない白い円を描画する」という方法が簡単
# キャンパスの背景が白なので、そうすれば、消えたように見える

# 【描画する円の位置を保存しておく】
# 円を消すためには、「前回、どの位置に円を描画したのか」を保存しておく必要がある
# そので、変数xと変数yに「前回、描画した位置」を保存しておく
# 最初の値はどのような値でもいいが、ここでは仮に、キャンパスの中心となる（300,200）とする

# 円の座標
# x = 300
# y = 200

# click関数ではこの変数xと変数yを使いたいので、グローバル(global)宣言をしている
# global x, y

# click関数では、まずこの座標に「白色」で描画して元の円を消す
# canvas.create_oval(x - 20, y - 20, x + 20, y + 20, fill = "white", width = 0)

#《MEMO》初回にclick関数が実行されたときは、赤い円はまだ描かれてませんが、xに「300」、yに「200」が代入されているため、この位置に白い円が描画される
# 白いキャンパスに白い円を描いても影響はないので、このままにしている、もしきになるなら「初回は白い円を描画しないようにする」とか「xやyの範囲をキャンパスからはみ出る場所(マイナスの値やキャンパスサイズよりも大きな座標)に指定する」などのやり方でもOK

# そしてクリックされた座標(event.x、event.y)を、変数xと変数yにそれぞれ代入してから、その座標に、赤く塗られた円を描画する
# x = event.x
# y = event.y
# canvas.create_oval(x - 20, y - 20, x + 20, y + 20, fill = "red", white = 0)

# 変数xと変数yは「いま赤い円を描画した座標」に変わるので、次にclick関数が実行されるときは、この座標に白い円が描画される
# つまり、「前に描いた円が消える」動作になる


# coding:utf-8
import tkinter as tk

# 円の座標
x = 300
y = 200

def click(event):
    global x, y
    # 今の円を消す
    canvas.create_oval(x - 20, y - 20, x + 20, y + 20, fill = "white", width = 0)   # xとyは、前回クリックした座標　# 白で塗りつぶされた円を描く
    x = event.x     # クリックされた座標を保存
    y = event.y     # クリックされた座標を保存
    canvas.create_oval(x - 20, y - 20, x + 20, y + 20, fill = "red", width = 0)     # 赤で塗りつぶした円を描く

# ウィンドウを描く
root = tk.Tk()
root.geometry("600x400")

# キャンバスを置く
canvas =tk.Canvas(root, width =600, height =400, bg="white")
canvas.place(x = 0, y = 0)

# イベントを設定する
canvas.bind("<Button-1>", click)                          # クリックされたときにclick関数を実行する
# 「, click」＝ クリックされた時にclick関数が実行されるようにする

root.mainloop()
