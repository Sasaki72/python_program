# Pythonプログラミングで、画面に結果を表示したいのであれば、『表示するための命令』を書く
# その命令が『print』です
# 例えば下記のように記述します
# print(1 + 2)
# 《実行結果》
# 3


# 【入力の注意】
# Pythonプログラムを入力する際は次に注意する事
# ①プログラム中の英数字は、半角英数字で入力する
# 日本語をオフにすると間違いない
# 大文字と小文字は区別する事
# ②余計な空白を入れない
# Pythonではプログラム上、空白には意味が生じる事がある
# 入れても入れなくても影響しない場合もあるが、エラーを出さないためにも余計な空白は入れない


# 【「¥」と「\」に注意】
# Windowsは「¥」
# Macは「\」


#  しかし、「10,000」を表示させたい時「\10,000」と入力すると「@00」とでる
# 「\10,000」　間違いの表記
#     ↓
# 「\\10,000」　正しい表記
# 「\\」と２本入れる
#  《COLUMN》
# raw Stringを利用する
# 「¥」や「\」文字を正しく示す方法は、別にもある。それは、
# print(r"\10,000")
# のように、文字列の「r」を付ける方法
# 「rを付けた文字列」は「raw String」と呼ばれ「¥」や「\」を特殊文字として扱わない。
# 列中に「¥」や「\」をたくさん含んでいるときはこの方法を取ると楽です


# 文字列と数値は連結できない
# 「文字列」と「数値」は「+」で連結できない
# print("abc" + 123)
# 《実行結果》
# Error
# これは「+」の記号がそれぞれ違う意味で作用するから
# ・文字列の場合は「連結」
# ・数値の場合は「足し算」
# そのためErrorが出てしまう
# 『解決方法は「数値」を「文字列」に変換すればいいだけ』
# print("abc" + "123")
# 《実行結果》
# abc123


# 【計算と連結させたいとき】
# 「abc」と「123*234」の計算式を連結するときの方法
# print("abc" + "123*234")
# 《実行結果》
# abc123*234　(計算されない状態で出てくる)


# 【重要】
# 今回の「文字列」と「計算式」を連結するためにはPythonの「str関数」を使う
# 「関数」とは、何か「値」を渡すと、内部で計算や加工など何らかの処理を行い、その結果を戻してくれる機能の事
# このように、関数を使って処理をする事を「関数を呼び出す(coll)」と言う
# str関数は、カッコの中に「数値」を渡すと、それを「文字列」に変換した値として戻してくれる
# このstr関数を使って、プログラムを次のように記述する
# print("abc" + str(123*234))
# 《実行結果》
# abc28782

# ここでは「文字列」と「数値」を連結するときはstr関数の変換が必要になる事を説明した
# 今回以外の、数値を何らかの理由で文字列として扱いたいとき(例えば、
# 末尾から３桁目の数を取り出したいとき、「特定の桁の文字」を取り出したい時など)はstr関数を使う


# 【1行目か2行目で文字コードを明示する】
# どのような環境でも、文字コードのエラーが出ないようにするには、1行目か2行目に
# 「coding=utf-8」もしくは「coding:utf-8」と記述する必要がある


# 長い文字列中に改行が入っている場合には、特殊な書き方をしないと上手く反映されない。
# 「"」「'」の中に改行を入れるとエラーになる
# print("こんにちは。今日の晩ご飯は何でしたか？　ーーー|
# 美味しかったですか？                           改行すると
# 何カロリーでしたか？                           エラーになる
# ")                                      ーーー|
# 《実行結果》
# Error
# Windowsなら「¥n」
# Macなら「\n」
# で改行ができる
# 正式に改行をするには
# print("こんにちは。今日のご飯は何でしたか？\nおいしかったですか？\n何カロリーでしたか？")
# 《実行結果》
# こんにちは。今日のご飯は何でしたか？
# おいしかったですか？
# 何カロリーでしたか？


# 【改行を含めて記述できる便利な三重クォート】
# 実は上記以外でもっと簡単に記述できる方法がある
# それは「三重クォート」(三重クォーテーション)で囲む方法
# # coding:utf-8
# print("""こんにちは。今日のご飯は何でしたか？
# おいしかったですか？
# 何カロリーでしたか？""")
# 《実行結果》
# こんにちは。今日のご飯は何でしたか？
# おいしかったですか？
# 何カロリーでしたか？


# 更に簡単なのが、文末に「\」を入れる方法(Windowsなら「¥」)です
# そうする事で「好きな場所で改行できる」
# # coding:utf-8
# print("こんにちは。今日の晩ご飯は何でしたか？\
# おいしかったですか？\
# 何カロリーでしたか？")
#  《実行結果》
# こんにちは。今日のご飯は何でしたか？おいしかったですか？何カロリーでしたか？    
# ※実行結果は改行されない


# 【printで改行したくないときは】
# 「print」という命令は最後に改行する
# しかし、最後に「,end=""」と付け加えると、最後の改行をしなくできる
# # coding:utf-8
# print("こんにちは。今日の晩ご飯は何でしたか？" ,end="")
# print("おいしかったですか？" ,end="")
# print("何カロリーでしたか？")
# 《実行結果》
# こんにちは。今日のご飯は何でしたか？おいしかったですか？何カロリーでしたか？    
# ※改行されない



# 【エスケープシーケンス】
# \newline            バックスラッシュ(円記号)と改行文字が無視されます
# \\                  バックスラッシュ(円記号)(\)
# \'                  一重引用符(')
# \"                  二重引用符(")
# \a                  ASCⅡ 端末ベル(BEL)
# \b                  ASCⅡ バックスペース(BS)
# \f                  ASCⅡ フォームフィード(FF)
# \n                  ASCⅡ 行送り (LF)。改行のこと
# \r                  ASCⅡ 復帰 (CR)
# \t                  ASCⅡ 水平タブ (TAB)
# \v                  ASCⅡ 垂直タブ (VT)
# \ooo                8進数値 oooを持つ文字
# \xhh                16進数値 hh を持つ文字
# \N(name)            Unicode データベース中で name という名前の文字
# \uxxx               16-bit の16進値 xxxx を持つ文字
# \Uxxxxxxxx          32-bit の16進値 xxxxxxxx を持つ文字


# 【行頭の空白だけは例外】
# 行頭の空白は「インデント(字下げ)」と呼ばれ、段落を揃える役割を示す。
# Pythonの場合、段落の揃えは、プログラムを見やすくする目的ではなく、「制御構造」を示している
# そのため、行頭に余計な空白があるとエラーが表示される
# 基本的にプログラムは、一番左側に行の頭を揃えて記述する
# 制御構造を書くときは、左側に空白を入れる時がある
# 結論、余計な空白はエラーが表示されるので注意する事
# 《MEMO》
# 空白は基本、４文字か８文字の空白で構成する
# 《COLUMN》
# インデントを直す
# 全体のインデントをまとめて直したいときは、全体をマウスで選択し、
# Windowsなら、 「Ctrl」キー + 「[」キー
# Macなら、 「command」キー + 「[」キー 
# を押す事で行頭からの字下げを戻す事ができる


# 【COLUMN】《重要》
# エラーが出てうまく行かないときは次をチェックする
# 
# ・大文字と小文字の区別は正しいか
# ・全角文字で入力してないか
# ・行頭の空白の数は正しいか (指定されていない限り、行頭には空白を入れない)
# ・カッコの対応が間違っていないか
# ・シングルクォーテーション(')やダブルクォーテーション(")が間違っていないか
# ・文字コードは正しいか
# ・日本語を使っているとき、1行目や2行目に「coding=utf-8」か「coding:utf-8」を記述したか
# ・ファイル名に日本語を使っていないか
# 
# ※１つでも間違えるとエラーになる