# https://www.javadrive.jp/python/
# 【集合】

# 集合を作成する
# 文字列、タプル、rangeなどから集合を作成する
# 集合の長さ(要素数)を取得する
# 集合への要素の追加と集合からの要素の削除
# 集合と他の集合との関係を調べる(等しいかどうか、部分集合かどうかなど)
# 集合の演算を行う(和集合、積集合、差集合、対称差集合)
# 集合に指定した値と同じ要素が含まれているか確認する



# 【集合を作成する】
# 集合を作成する

# コンストラクタとは、クラスのインスタンス生成時に実行されるメソッドで、主にそのクラスのメンバ変数を初期化するときに使用します。 コンストラクタはインスタンス生成時に呼び出される特別なメソッドで、通常のメソッド同様に引数を指定することも可能です。 コンストラクタの呼び出しは、以下のように記述します。

# 集合を新しく作成する方法について解説します。集合には複数の要素が含まれます。コンストラクタを使用せずにオブジェクトを作成できるのは set 型のみです。 frozenset 型はコンストラクタを使用して作成します。

# 目次

# 値を指定して集合( set 型)を作成する
# 集合型のオブジェクトの注意点
# 変数に代入された値を要素として指定する

# 値を指定して集合( set 型)を作成する
# 集合型( set 型)は { から } までの間に複数の要素をカンマ(,)で区切って定義します。書式は次のとおりです。

# {要素1, 要素2, ...}

# { } を使用するのは辞書型と同じなので注意してください。(辞書型の場合は要素が キー:値 の形式になっている点が異なります)。

# 集合では値として指定できるものはハッシュ可能なオブジェクト(数値や文字列やタプルなどのイミュータブルなオブジェクトが該当します)のみ指定可能です。

# {10, 30, 50}
# {"Orange", "Lemon", "Peach"}

# 同じ集合で要素毎に異なるデータ型のオブジェクトを指定することができます。

# {1, "Hello", (3, "CD")}

# 要素が空の集合は作成することができますが、次のように記述すると要素が空の辞書となります。

# {} <-- 要素が空の辞書

# 要素が空の集合を作る場合は set 型のコンストラクタを使って次のように作成します。

# set()

# 作成した辞書は数値や文字列のように変数に代入して利用することができます。

# myset = {"Orange", "Lemon", "Peach"}

# 集合型のオブジェクトの注意点
# 集合型のオブジェクトには複数の要素が含まれますが、集合型には要素の順番というものがありません。その為、複数の要素が含まれている場合にどのような順序で並んでいるのかは分かりません。

# また集合型のオブジェクトには同じ値の要素は 1 つか格納できません。同じ値を持つ要素を追加してもエラーとはなりませんが、同じ値を持つ要素は 1 つにまとめられます。

# 次の例では、集合の要素として "H" "a" "p" "p" "y" という 5 つの文字列を要素として集合を作成しています。

# >>> myset = {"H", "a", "p", "p", "y"}
# >>> print(myset)
# {'a', 'p', 'y', 'H'}
# >>>
# 作成した集合を print 関数で出力してみると、集合を作成した時に指定した文字列の順序とは異なる形で要素が出力されていることが分かります。また "p" は 2 つ指定していましたが、 1 つにまとめられて要素の数は 4 になっています。

# 変数に代入された値を要素として指定する
# 値を指定して集合を作成するときに、値を直接入力するかわりに値が代入された変数を指定して集合を作成することができます。

# >>> x = 10
# >>> y = 20
# >>> myset = {x, y}
# >>> print(myset)
# {10, 20}
# >>>
# 要素に変数名を指定した場合、要素には変数の参照が設定されるのではなく集合の作成時に変数に代入されていた値が直接記述されたのと同じ扱いとなります。その為、先ほどの集合は次のように作成したものとまったく同じです。

# >>> myset = {10, 20}
# >>> print(myset)
# {10, 20}
# >>>
# 辞書を作成したあとに変数に別の値を代入しても、辞書の要素は変更されません。

# >>> x = 10
# >>> y = 20
# >>> myset = {x, y}
# >>> print(myset)
# {10, 20}
# >>> y = 40
# >>> print(myset)
# {10, 20}
# >>>
# -- --

# 集合( set 型)を作成する方法について解説しました。



# 【文字列、タプル、rangeなどから集合を作成する】
# 文字列、タプル、rangeなどから集合を作成する

# 集合型の set 型および frozenset 型はコンストラクタの引数に文字列、タプル、 range を指定してオブジェクトを作成することができます。ここでは文字列、タプル、 range などから集合を作成する方法について解説します。

# 目次

# イテラブルなオブジェクトから集合を作成する

# イテラブルなオブジェクトから集合を作成する
# 集合型のコンストラクタには引数にイテラブルなオブジェクトを指定して集合のオブジェクトを作成するものがあります。

# class set([iterable])
# class frozenset([iterable])

# イテラブルなオブジェクトとはリストやタプル、文字列、辞書などです。

# 文字列から集合を作成する
# 最初に文字列を引数に指定して set 型のオブジェクトを作成してみます。

# >>> myset = set("Hello Python")
# >>> print(myset)
# {'P', 'h', 'l', 'y', 'n', 'o', 'H', ' ', 't', 'e'}
# >>>
# 引数に指定した文字列の 1 文字毎に 1 つの要素とした新しい集合が作成されました。注意点として集合は要素に順序というものがありませんので、要素がどのような順番で並んでいるのかは分かりません。また集合では同じ値の要素は 1 つしいか持てないため、同じ値の要素は 1 つにまとめられます。

# 同じように文字列を引数に指定して frozenset 型のオブジェクトを作成してみます。

# >>> myfrozenset = frozenset("Hello Python")
# >>> print(myfrozenset)
# frozenset({'P', 'h', 'l', 'y', 'n', 'o', 'H', ' ', 't', 'e'})
# >>>
# set 型と同じようにオブジェクトが作成されました。

# リストから集合を作成する
# 次にリストを引数に指定して set 型および frozenset 型のオブジェクトを作成してみます。

# >>> mylist = ["A", "B", "C"]
# >>> myset = set(mylist)
# >>> print(myset)
# {'B', 'C', 'A'}
# >>>
# >>> myfrozenset = frozenset(mylist)
# >>> print(myfrozenset)
# frozenset({'B', 'C', 'A'})
# >>>
# 引数に指定したリストと同じ要素を持つ集合が作成されました。

# タプルから集合を作成する
# 次にタプルを引数に指定して set 型および frozenset 型のオブジェクトを作成してみます。

# >>> mytuple = ("A", "B", "C")
# >>> myset = set(mytuple)
# >>> print(myset)
# {'B', 'C', 'A'}
# >>>
# >>> myfrozenset = frozenset(mytuple)
# >>> print(myfrozenset)
# frozenset({'B', 'C', 'A'})
# >>>
# 引数に指定したタプルと同じ要素を持つ集合が作成されました。

# rangeから集合を作成する
# range 型はコンストラクタで引数に指定した開始数から終了数までの連続した数値を持つオブジェクトです。

# class range(stop)
# class range(start, stop[, step])

# start から stop までの連続した数値を要素として持ちます。 start を省略した場合は 0 が開始数です。

# ※ range 型について詳しくは「range関数の使い方(開始から終了までの連続した数値を要素として持つrange型オブジェクトを作成する)」を参照されてください。

# range 型のオブジェクトを引数に指定して set 型および frozenset 型のオブジェクトを作成してみます。

# >>> myset = set(range(10))
# >>> print(myset)
# {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
# >>>
# >>> myfrozenset = frozenset(range(10))
# >>> print(myfrozenset)
# frozenset({0, 1, 2, 3, 4, 5, 6, 7, 8, 9})
# >>>
# 0 から 9 までの連続した数値を要素として持つ辞書を作成することができました。

# -- --

# 文字列やタプル、 range など他のオブジェクトから集合を作成する方法を解説しました。



# 【集合の長さ(要素数)を取得する】
# 集合の長さ(要素数)を取得する

# 組み込み関数の len 関数を使って集合の長さ(要素数)を取得する方法について解説します。

# 目次

# 集合の長さを取得する

# 集合の長さを取得する
# 組み込み関数の len 関数は引数に指定したオブジェクトの長さや要素の数を取得することができます。引数に集合を指定した場合には、集合に含まれる要素数を取得することができます。書式は次の通りです。

# len(集合)

# 引数に指定した集合の要素数を取得します。集合は set 型でも frozenset 型でも同じです。

# len({"Red", "Green", "Blue"})
# --> 3

# len(frozenset([1, 2, 3, 4, 5]))
# --> 5
# len 関数について詳しくは「len関数の使い方(オブジェクトの長さや要素数を取得する)」を参照されてください。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample3-1.py という名前で保存します。

# colorset = {"Blue", "Red", "Green", "White", "Black"}

# print(colorset)
# print("要素数は " + str(len(colorset)) + " です。")

# 集合の長さを取得する(1)

# その後で、次のように実行してください。

# python sample3-1.py

# 集合の長さを取得する(2)

# len 関数を使って集合の要素数を取得することができました。

# -- --

# 組み込み関数の len 関数を使って集合の要素数を取得する方法について解説しました。



# 【集合への要素の追加と集合からの要素の削除】
# 集合への要素の追加と集合からの要素の削除

# 作成済みの集合へ要素を追加したり要素を削除する方法について解説します。なお要素を追加したり削除したりできるのはミュータブルな set 型だけです。イミュータブルな frozenset 型ではできません。

# 目次

# 集合に要素を追加する
# 集合から要素を削除する
# 集合からすべての要素を削除する

# 集合に要素を追加する
# 集合に新しい要素を追加する方法です。 set 型で利用可能な add メソッドを使用します。

# 集合.add(値)

# 引数に指定した値を持つ要素を集合に追加します。集合では要素に順番はないので、どこに追加されるかは分かりません。

# >>> colorset = {"Red", "Green", "Blue"}
# >>> colorset.add("White")
# >>>
# >>> print(colorset)
# {'White', 'Blue', 'Red', 'Green'}
# >>>
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample4-1.py という名前で保存します。

# colorset = {"Blue", "Red", "Green"}
# print(colorset)

# # "White" を追加
# colorset.add("White")
# print(colorset)

# # "Black" を追加
# colorset.add("Black")
# print(colorset)

# その後で、次のように実行してください。

# python sample4-1.py

# 集合に要素を追加する(1)

# add メソッドを使って集合に新しい要素を追加することができました。

# 集合から要素を削除する
# 集合から要素を削除する方法です。 set 型で利用可能な remove メソッド、 discard メソッド、 pop メソッドを使うことで要素を削除することができます。

# 最初に set 型で利用可能な remove メソッドを使用する方法です。

# 集合.remove(値)

# 引数に指定した値を持つ要素を集合から削除します。引数に指定した値が集合に存在しない場合には KeyError エラーが発生します。

# >>> colorset = {"Red", "Green", "Blue"}
# >>>
# >>> colorset.remove("Green")
# >>> print(colorset)
# {'Blue', 'Red'}
# >>>
# >>> colorset.remove("White")
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# KeyError: 'White'
# >>>
# 次に set 型で利用可能な discard メソッドを使用する方法です。先ほどの remove メソッドを使い方はほぼ同じです。

# 集合.discard(値)

# 引数に指定した値を持つ要素を集合から削除します。 remove メソッドと異なり、引数に指定した値が集合に存在しない場合にもエラーとはなりません。

# >>> colorset = {"Red", "Green", "Blue"}
# >>>
# >>> colorset.discard("Green")
# >>> print(colorset)
# {'Blue', 'Red'}
# >>>
# >>> colorset.discard("White")
# >>>
# 最後に set 型で利用可能な pop メソッドを使用する方法です。

# val = 集合.pop()

# pop メソッドの場合は集合の中のいずれか一つの要素を削除し、その要素を返します。どの要素を削除するかは指定することができません、

# >>> colorset = {"Red", "Green", "Blue"}
# >>>
# >>> colorset.pop()
# 'Blue'
# >>> print(colorset)
# {'Red', 'Green'}
# >>>
# >>> colorset.pop()
# 'Red'
# >>> print(colorset)
# {'Green'}
# >>>
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample4-2.py という名前で保存します。

# colorset = {"Blue", "Red", "Green"}
# print(colorset)

# # "Red" 削除
# colorset.remove("Red")
# print(colorset)

# # "Green" を追加
# colorset.remove("Green")
# print(colorset)

# その後で、次のように実行してください。

# python sample4-2.py

# 集合から要素を削除する(1)

# remove メソッドを使って集合から要素を削除してみました。

# 集合からすべての要素を削除する
# 集合からすべての要素を削除する方法です。 set 型で利用可能な clear メソッドを使用します。

# 集合.clear()

# 集合からすべての要素を削除します。

# >>> colorset = {"Red", "Green", "Blue"}
# >>>
# >>> colorset.clear()
# >>> print(colorset)
# set()
# >>>
# 全ての要素を削除しても空の集合となるだけで集合そのものは削除されません。

# -- --

# 集合に新しい要素を追加する方法および集合から要素を削除する方法について解説しました。



# 【集合と他の集合との関係を調べる(等しいかどうか、部分集合かどうかなど)】
# 集合と他の集合との関係を調べる(等しいかどうか、部分集合かどうかなど)

# 集合と集合が等しいかどうか、また集合が他の集合の部分集合かどうかなど集合と他の集合との関係を調べる方法について解説します。

# 目次

# 集合が他の集合と等しいかどうか
# 集合が他の集合の部分集合かどうか
# 集合が他の集合の真部分集合かどうか
# 集合が他の集合の超集合かどうか
# 集合が他の集合の真超集合かどうか
# 集合が他の集合と互いに素かどうか

# 集合が他の集合と等しいかどうか
# 集合が他の集合と等しいかどうかについては比較演算子の == で調べることができます。また等しくないかどうかについては比較演算子の != で調べることができます。

# 集合1 == 集合2
# 集合1 != 集合2

# 集合1の要素が集合2にすべて含まれており、集合2の要素が集合1にすべて含まれている場合に True となります。

# >>> set1 = {"A", "B", "C"}
# >>> set2 = {"B", "C", "A"}
# >>> set1 == set2
# True
# >>>
# 等しいかどうかの比較は set 型のオブジェクトと frozenset 型のオブジェクトでも可能です。

# >>> set1 = {"A", "B", "C"}
# >>> set2 = frozenset(["B", "A", "C"])
# >>> set1 == set2
# True
# >>>
# 集合が他の集合と互いに素かどうか
# 集合が他の集合の部分集合であるかどうかは比較演算子の <= で調べることができます。

# 集合1 <= 集合2

# 集合 1 の要素がすべて集合 2 に含まれている場合、集合 1 は集合 2 の部分集合であるといいます。

# 次の例では set1 は set2 の部分集合です。逆に set2 は set1 の部分集合ではありません。 set1 と set3 が等しい場合も set1 は set3 の部分集合となります。

# >>> set1 = {"A", "B"}
# >>> set2 = {"B", "D", "C", "A"}
# >>> set3 = {"B", "A"}
# >>> set1 <= set2
# True
# >>> set2 <= set1
# False
# >>> set1 <= set3
# True
# >>>
# 部分集合かどうかは set 型や frozenset 型で用意されている issubset メソッドを使っても調べることができます。

# 集合1.issubset(集合2)

# 集合 1 が集合 2 の部分集合の時に True となります。

# >>> set1 = {"A", "B"}
# >>> set2 = {"B", "D", "C", "A"}
# >>> set3 = {"A", "B"}
# >>> set1.issubset(set2)
# True
# >>> set2.issubset(set1)
# False
# >>> set1.issubset(set3)
# True
# >>>
# 集合が他の集合の真部分集合かどうか
# 集合が他の集合の真部分集合であるかどうかは比較演算子の < で調べることができます。

# 集合1 < 集合2

# 集合 1 の要素がすべて集合 2 に含まれており、且つ集合 1 と集合 2 が等しくない場合、集合 1 は集合 2 の真部分集合であるといいます。

# 次の例では set1 は set2 の真部分集合です。逆に set2 は set1 の真部分集合ではありません。 set1 と set3 が等しい場合も真部分集合ではありません。

# >>> set1 = {"A", "B"}
# >>> set2 = {"B", "D", "C", "A"}
# >>> set3 = {"A", "B"}
# >>> set1 < set2
# True
# >>> set2 < set1
# False
# >>> set1 < set3
# False
# >>>
# 集合が他の集合の超集合かどうか
# 集合が他の集合の超集合であるかどうかは比較演算子の >= で調べることができます。

# 集合1 >= 集合2

# 集合 2 の要素がすべて集合 1 に含まれている場合、集合 1 は集合 2 の超集合であるといいます。

# 次の例では set1 は set2 の超集合ではありませんが、 set2 は set1 の超集合です。 set1 と set3 が等しい場合も set1 は set3 の超集合となります。

# >>> set1 = {"A", "B"}
# >>> set2 = {"B", "D", "C", "A"}
# >>> set3 = {"B", "A"}
# >>> set1 >= set2
# True
# >>> set2 >= set1
# False
# >>> set1 >= set3
# True
# >>>
# 超集合かどうかは set 型や frozenset 型で用意されている issuperset メソッドを使っても調べることができます。

# 集合1.issuperset(集合2)

# 集合 1 が集合 2 の超集合の時に True となります。

# >>> set1 = {"A", "B"}
# >>> set2 = {"B", "D", "C", "A"}
# >>> set3 = {"A", "B"}
# >>> set1.issuperset(set2)
# True
# >>> set2.issuperset(set1)
# False
# >>> set1.issuperset(set3)
# True
# >>>
# 集合が他の集合の真超集合かどうか
# 集合が他の集合の真超集合であるかどうかは比較演算子の > で調べることができます。

# 集合1 > 集合2

# 集合 2 の要素がすべて集合 1 に含まれており、且つ集合 1 と集合 2 が等しくない場合、集合 1 は集合 2 の真超集合であるといいます。

# 次の例では set1 は set2 の真超集合ではありませんが、 set2 は set1 の真超集合です。 set1 と set3 が等しい場合も真超集合ではありません。

# >>> set1 = {"A", "B"}
# >>> set2 = {"B", "D", "C", "A"}
# >>> set3 = {"A", "B"}
# >>> set1 > set2
# True
# >>> set2 > set1
# False
# >>> set1 > set3
# False
# >>>
# 集合が他の集合と互いに素かどうか
# 集合が他の集合と互いに素かどうかをは set 型や frozenset 型で用意されている isdisjoint メソッドで調べることができます。

# 集合1.isdisjoint(集合2)

# 集合１ と集合 2 が同じ要素を一つも持たないとき、集合 1 は集合 2 と互いに素であるといいます。

# 次の例では set1 は set2 は共通の要素がないので互いに素ですが、 set1 と set3 および set2 と set3 は共通する要素があるので素ではありません。

# >>> set1 = {"A", "B"}
# >>> set2 = {"C", "D", "E"}
# >>> set3 = {"A", "C"}
# >>> set1.isdisjoint(set2)
# True
# >>> set1.isdisjoint(set3)
# False
# >>> set2.isdisjoint(set3)
# False
# >>>
# -- --

# 集合と集合が等しいかどうか、また集合が他の集合の部分集合かどうかなど集合と他の集合との関係を調べる方法について解説しました。



# 【集合の演算を行う(和集合、積集合、差集合、対称差集合)】
# 集合の演算を行う(和集合、積集合、差集合、対称差集合)

# 集合と集合の演算を行い、和集合、積集合、差集合、対称差集合をそれぞれ求める方法について解説します。

# 目次

# 和集合を求める
# 積集合を求める
# 差集合を求める
# 対称差集合を求める

# 和集合を求める
# 和集合とは 2 つの集合の少なくともどちらか 1 つに含まれる要素の集合のことです。

# 和集合を求める(1)

# 和集合を求めるには、演算子の | を使用するか、 set 型および frozenset 型で用意されている union メソッドを使用します。

# 集合 = 集合1 | 集合2
# 集合 = 集合1.union(集合2)

# どちらも 集合1 と 集合2 の和集合として新しい集合を返します。

# 具体的には次のように記述します。

# >>> set1 = {"A", "B", "C", "D"}
# >>> set2 = {"C", "D", "E", "F"}
# >>> set1 | set2
# {'C', 'D', 'F', 'E', 'B', 'A'}
# >>> set1.union(set2)
# {'C', 'D', 'F', 'E', 'B', 'A'}
# >>>
# 3 つ以上の集合について和集合を求めることもできます。(この後で解説する積集合や差集合でも同様です)。

# 集合 = 集合1 | 集合2 | 集合3 | ...
# 集合 = 集合1.union(集合2, 集合3, ...)

# 具体的には次のように記述します。

# >>> set1 = {"A", "B", "C", "D"}
# >>> set2 = {"C", "D", "E", "F"}
# >>> set3 = {"A", "C", "E", "G"}
# >>> set1 | set2 | set3
# {'C', 'G', 'D', 'F', 'E', 'B', 'A'}
# >>>
# 和集合を新しい集合として取得するのではなく、最初の集合にそのまま保存するには。演算子の |= を使用するか set 型で用意されている update メソッドを使用します。

# 集合1 |= 集合2
# 集合1.update(集合2)

# 具体的には次のように記述します。

# >>> set1 = {"A", "B", "C", "D"}
# >>> set2 = {"C", "D", "E", "F"}
# >>> set1.update(set2)
# >>> print(set1)
# {'C', 'D', 'F', 'E', 'B', 'A'}
# >>>
# 積集合を求める
# 積集合とは 2 つの集合の両方に含まれる要素の集合のことです。

# 積集合を求める(1)

# 積集合を求めるには、演算子の & を使用するか、 set 型および frozenset 型で用意されている intersection メソッドを使用します。

# 集合 = 集合1 & 集合2
# 集合 = 集合1.intersection(集合2)

# どちらも 集合1 と 集合2 の積集合として新しい集合を返します。

# 具体的には次のように記述します。

# >>> set1 = {"A", "B", "C", "D"}
# >>> set2 = {"C", "D", "E", "F"}
# >>> set1 & set2
# {'C', 'D'}
# >>> set1.intersection(set2)
# {'C', 'D'}
# >>>
# 積集合を新しい集合として取得するのではなく、最初の集合にそのまま保存するには。演算子の &= を使用するか set 型で用意されている intersection_update メソッドを使用します。

# 集合1 &= 集合2
# 集合1.intersection_update(集合2)

# 具体的には次のように記述します。

# >>> set1 = {"A", "B", "C", "D"}
# >>> set2 = {"C", "D", "E", "F"}
# >>> set1.intersection_update(set2)
# >>> print(set1)
# {'C', 'D'}
# >>>
# 差集合を求める
# 差集合とは集合 1 に含まれているけれど集合 2 には含まれていない要素の集合のことです。

# 差集合を求める(1)

# 差集合を求めるには、演算子の - を使用するか、 set 型および frozenset 型で用意されている difference メソッドを使用します。

# 集合 = 集合1 - 集合2
# 集合 = 集合1.difference(集合2)

# どちらも 集合1 と 集合2 の差集合として新しい集合を返します。

# 具体的には次のように記述します。

# >>> set1 = {"A", "B", "C", "D"}
# >>> set2 = {"C", "D", "E", "F"}
# >>> set1 - set2
# {'A', 'B'}
# >>> set1.difference(set2)
# {'A', 'B'}
# >>>
# 差集合を新しい集合として取得するのではなく、最初の集合にそのまま保存するには。演算子の -= を使用するか set 型で用意されている difference_update メソッドを使用します。

# 集合1 -= 集合2
# 集合1.difference_update(集合2)

# 具体的には次のように記述します。

# >>> set1 = {"A", "B", "C", "D"}
# >>> set2 = {"C", "D", "E", "F"}
# >>> set1 -= set2
# >>> print(set1)
# {'B', 'A'}
# >>>
# 対称差集合を求める
# 対称差集合とは 2 つの集合のどちらか片方だけに含まれる要素の集合のことです。

# 対称差集合を求める(1)

# 対称差集合を求めるには、演算子の ^ を使用するか、 set 型および frozenset 型で用意されている symmetric_difference メソッドを使用します。

# 集合 = 集合1 ^ 集合2
# 集合 = 集合1.symmetric_difference(集合2)

# どちらも 集合1 と 集合2 の対称差集合として新しい集合を返します。

# 具体的には次のように記述します。

# >>> set1 = {"A", "B", "C", "D"}
# >>> set2 = {"C", "D", "E", "F"}
# >>> set1 ^ set2
# {'F', 'E', 'B', 'A'}
# >>> set1.symmetric_difference(set2)
# {'F', 'E', 'B', 'A'}
# >>>
# 積集合を新しい集合として取得するのではなく、最初の集合にそのまま保存するには。演算子の ^= を使用するか set 型で用意されている symmetric_difference_update メソッドを使用します。

# 集合1 ^= 集合2
# 集合1.symmetric_difference_update(集合2)

# 具体的には次のように記述します。

# >>> set1 = {"A", "B", "C", "D"}
# >>> set2 = {"C", "D", "E", "F"}
# >>> set1 ^= set2
# >>> print(set1)
# {'F', 'E', 'B', 'A'}
# >>>
# -- --

# 集合と集合の演算を行い、和集合、積集合、差集合、対称差集合をそれぞれ求める方法について解説しました。



# 【集合に指定した値と同じ要素が含まれているか確認する】
# 集合に指定した値と同じ要素が含まれているか確認する

# 作成済みの集合に指定した値と同じ要素が含まれているかどうか確認する方法について解説します。要素が含まれているかどうかの確認には in 演算子を使用します。

# 目次

# 指定の値と同じ値を持つ要素が含まれているか確認する

# 指定の値と同じ値を持つ要素が含まれているか確認する
# 指定の値を持つ要素が集合の中に含まれているかどうかを確認するには in 演算子または not in 演算子を使用します。

# 値 in 集合
# 値 not in 集合

# in 演算子は集合の要素の中で指定した値と同じ値を持つ要素があった場合に True となります。なかった場合には False となります。 not in 演算子は逆に集合の要素の中で指定した値と同じ値を持つ要素があった場合に False となります。あった場合は True となります。

# 最初に set 型について試してみます。具体的には次のように記述します。

# >>> myset = {"A", "B", "C"}
# >>> "A" in myset
# True
# >>> "D" in myset
# False
# >>>
# in 演算子を使用しているので、指定した値が集合の中にあった場合には True 、なかった場合には False となります。

# 次に frozenset 型について試してみます。

# >>> myfrozenset = frozenset(["A", "B", "C"])
# >>> "A" in myfrozenset
# True
# >>> "D" in myfrozenset
# False
# >>>
# frozenset 型でも set 型と同じです。

# -- --

# 作成済みの集合に指定した値と同じ要素が含まれているかどうか確認する方法について解説しました。

