# https://www.javadrive.jp/python/
# 【文字列で提供されているメソッドの使い方】

# リストなどに要素として格納されている文字列を指定した区切り文字で連結する(join)
# 指定した文字列が対象の文字列に何個含まれるのかを取得する(count)
# 文字列を指定した区切り文字で分割してリストとして取得する(split, splitlines)
# 文字列の中の指定した文字列を別の文字列に置換する(replace)



# 【リストなどに要素として格納されている文字列を指定した区切り文字で連結する(join)】
# リストなどに要素として格納されている文字列を指定した区切り文字で連結する(join)

# リストやタプルなどのイテラブルオブジェクトに要素として格納されている複数の文字列を指定した区切り文字で連結し新しい文字列として取得するメソッドの使い方について解説します。

# 『リストなどに格納されている文字列を連結する(joinメソッド)』
# join メソッドはリストやタプルなどイテラブルオブジェクトに要素として格納されている複数の文字列を、指定した区切り文字で連結した新しい文字列を返します。使い方は次の通りです。

# str.join(iterable)

# 引数に指定したイテラブルオブジェクトに含まれる複数の文字列を連結します。区切り文字は join メソッドを呼び出した str で指定します。

# 簡単な例で試してみます。

# >>> "".join(["Apple", "Orange", "Lemon"])
# 'AppleOrangeLemon'
# >>> ",".join(("Blue", "Red", "Green"))
# 'Blue,Red,Green'
# >>>


# 最初の例ではリストに含まれる複数の文字列を連結しています。区切り文字として空文字を指定しているので、文字列が区切り文字無しで連結された新しい文字列を取得しています。

# 2 番目の例ではタプルに含まれる複数の文字列を連結しています。区切り文字としてカンマ(,)を指定しているので、文字列がカンマで区切られて連結された新しい文字列を取得しています。

# リストなどの要素に数値など文字列ではないものが含まれていると TypeError エラーが発生します。


# >>> "".join(["Apple", 12, "Lemon"])
# Traceback (most recent call last):
#   File "&llt;stdin>", line 1, in <module>
# TypeError: sequence item 1: expected str instance, int found
# >>>


# join メソッドではなく、"+"演算子などを使った文字列の連結方法については「文字列の連結と繰り返し(乗算)」を参照されてください。

# -- --

# リストやタプルなどのイテラブルオブジェクトに要素として格納されている複数の文字列を指定した区切り文字で連結し新しい文字列として取得するメソッドの使い方について解説しました。



# 【指定した文字列が対象の文字列に何個含まれるのかを取得する(count)】
# 指定した文字列が対象の文字列に何個含まれるのかを取得する(count)

# 文字列で用意されているメソッドの中で、文字列の中に指定した文字列が重複せずに何個含まれるのかを取得するのに使用できるメソッドの使い方について解説します。


# 指定した文字列が何回含まれるのかを取得する(countメソッド)
# count メソッドは文字列の中で指定した文字列が重複せずに何回現れるのかを取得します。使い方は次の通りです。

# str.count(sub[, start[, end]])

# 引数に指定した文字列( sub )が文字列 str の中で重複せずに現れる回数を返します。範囲を指定する start と end は省略可能です。こちらは後で試します。

# 簡単なサンプルで試してみます。

# >>> "dictionary".count("io")
# 1
# >>> "Good School".count("oo")
# 2
# >>> "Goooood".count("oo")
# 2
# >>> "Orange".count("aa")
# 0
# >>>

# 最初の例では "dictionary" の中で "io" という文字列が現れる回数は 1 回のために count メソッドは 0 を返します。

# 2番目の例では "Good School" の中で "oo" という文字列が現れる回数は 2 回のために count メソッドは 2 を返します。

# 3番目の例では "Goooood" の中で "oo" という文字列は 4 回現れますが、重複せずに現れる回数は 2 回のため count メソッドは 2 を返します。

# G o o o o o d
#   -- --
#   1   2
# 4 番目の例のように指定した文字列が見つからなかった場合には 0 が返されます。

# -- --

# count メソッドでは 2 番目と 3 番目の引数を指定することで、指定した文字列を探す範囲を指定することができます。

# str.count(sub[, start[, end]])

# 対象の文字列( str )のインデックスが start から end の範囲内で引数に指定した文字列( sub )が重複せずに現れる回数を返します。

# 簡単なサンプルで試してみます。

# >>> "Good School".count("oo")
# 2
# >>> "Good School".count("oo", 3, 10)
# 1
# >>> "Good School".count("oo", 3)
# 1
# >>>

# 2番目の例では "Good School" の中でインデックス 3 から 10 の間の範囲で "oo" という文字列が重複せずに現れる回数は 1 のために count メソッドは 1 を返します。

# d   S c h o o l
# 3 4 5 6 7 8 9 10
# なお 3 番目の例のように end を省略した場合は文字列の最後までが指定されたものとして扱われます。

# -- --

# 文字列で用意されているメソッドの中で、文字列の中に指定した文字列が重複せずに何個含まれるのかを取得するのに使用できるメソッドの使い方について解説しました。



# 【文字列を指定した区切り文字で分割してリストとして取得する(split, splitlines)】
# 文字列を指定した区切り文字で分割してリストとして取得する(split, splitlines)

# 文字列で用意されているメソッドの中で、文字列を指定した区切り文字で分割しリストとして取得するのに使用できるメソッドの使い方について解説します。


# 指定した区切り文字で分割しリストとして取得する(splitメソッド)
# split メソッドは文字列を指定した区切り文字で分割し、分轄された文字列をそれぞれ要素とするリストとして取得します。使い方は次の通りです。

# str.split(sep=None, maxsplit=-1)

# 1 番目の引数に指定した区切り文字( sep )で文字列( str ) を分割し、それぞれの文字列を要素としたリストとして取得します。区切り文字を省略した場合は空白文字で分割します。また 2 番目の引数には最大の分割回数を指定します。省略した場合は最大分割回数は無制限となります。

# 最初に区切り文字を省略した場合で試してみます。省略した場合は空白とタブが区切り文字として使用されます。

# >>> "My First Album".split()
# ['My', 'First', 'Album']
# >>> "  Next  Page  ".split()
# ['Next', 'Page']
# >>> "Apple\tOrange\tLemon".split()
# ['Apple', 'Orange', 'Lemon']
# >>>
# 最初の例では "My First Album" を空白文字を区切り文字として分割し、 "My" "First" "Album" の 3 つの文字列を要素とするリストを取得しました。

# 2 番目の例では " Next Page " を空白文字を区切り文字として分割するのですが、 split メソッドで区切り文字を指定しない場合には、連続する空白は 1 つの空白としてまとめられます。また文字列の先頭や最後に空白がある場合は除外されて分割されます。よって " Next Page " は "Next Page" として扱われますので "Next" と "Page" の 2 つの文字列を要素とするリストを取得しました。

# 3 番目の例では空白の代わりにタブ(\t)を区切り文字として "Apple\tOrange\tLemon" を分割し、 "Apple" "Orange" "Lemon" の 3 つの文字列を要素とするリストを取得しました。

# -- --

# 続いて区切り文字を指定した場合です。区切り文字は 1 文字でも文字列でも可能です。

# >>> "Orange,Lemon,Apple".split(",")
# ['Orange', 'Lemon', 'Apple']
# >>> "Red*-*Blue*-*Green".split("*-*")
# ['Red', 'Blue', 'Green']
# >>> "  Next  Page  ".split(" ")
# ['', '', 'Next', '', 'Page', '', '']
# >>>
# 最初の例では区切り文字としてカンマ(,)を使用しています。また 2 番目の例では区切り文字として "*-*" という 3 文字の文字列を指定しています。

# 3 番目の例では " Next Page " に対して区切り文字として明示的に空白文字を指定しています。このように区切り文字を省略した場合と明示的に " " を指定した場合は結果が異なります。明示的に指定した場合は連続した空白が 1 つにまとめられません。空白と空白の間には空の文字があるものとして分割されます。また文字列の先頭や最後にある空白も削除されず、先頭や最後に空の文字があるもとして分割されます。

# 空白を明示的に指定した場合で色々なパターンを試してみました。

# >>> "Next Page".split(" ")
# ['Next', 'Page']
# >>> "Next  Page".split(" ")
# ['Next', '', 'Page']
# >>> "Next   Page".split(" ")
# ['Next', '', '', 'Page']
# >>> " Next Page ".split(" ")
# ['', 'Next', 'Page', '']
# >>>
# -- --

# 続いて最大分割回数を指定した場合です。 2 番目の引数に最大分割回数を指定します。例えば 2 を指定した場合は、最大 2 回分割されるため結果的に文字列は 3 つの文字列に分割されます。

# >>> "A B C D E".split(" ")
# ['A', 'B', 'C', 'D', 'E']
# >>> "A B C D E".split(" ", 1)
# ['A', 'B C D E']
# >>> "A B C D E".split(" ", 2)
# ['A', 'B', 'C D E']
# >>> "A B C D E".split(" ", 3)
# ['A', 'B', 'C', 'D E']
# >>> "A B C D E".split(" ", 4)
# ['A', 'B', 'C', 'D', 'E']
# >>> "A B C D E".split(" ", 8)
# ['A', 'B', 'C', 'D', 'E']
# >>>
# 最大分割回数を省略した場合は制限なしとなります。また区切り文字をよりも多い数を指定しても余分に分割されるようなことはありません。

# 改行文字を区切り文字で分割しリストとして取得する(splitlinesメソッド)
# splitlines メソッドは文字列を改行文字で分割し、分轄された文字列をそれぞれ要素とするリストとして取得します。使い方は次の通りです。

# str.splitlines([keepends])

# 区切り文字として認識される改行文字は次のようなものがあります。

# ¥n          改行
# ¥r          復帰
# ¥r¥n        改行 + 復帰
# ¥v or ¥x0b  垂直タブ
# ¥f or ¥x0c  改ページ
# ¥x1c        ファイル区切り
# ¥x1d        グループ区切り
# ¥x1e        レコード区切り
# ¥x85        改行 (C1 制御コード)
# ¥u2028      行区切り
# ¥u2029      段落区切り
# 引数を省略した場合は分割に使用された改行文字は分割後の文字列に含まれません。分割文字を含める場合は 1 番目の引数 keepends に True を指定してください。

# それでは簡単な例で試してみます。

# >>> str1 = "Orange\nLemon\nApple"
# >>> print(str1)
# Orange
# Lemon
# Apple
# >>> str1.splitlines()
# ['Orange', 'Lemon', 'Apple']
# >>>
# >>> str2 = """¥
# ... Hello
# ... My name is Yamada
# ... Thank you"""
# >>> print(str2)
# Hello
# My name is Yamada
# Thank you
# >>> str2.splitlines()
# ['Hello', 'My name is Yamada', 'Thank you']
# >>>
# 改行文字として文字列の中に ¥n を入れる場合と三連引用符を使った場合でそれぞれ試してみました。結果は同じです。(三連引用符を使った複数行の文字列を入力する方法は「三連引用符を使った複数行の文字列の記述」を参照されてください)。

# 次に splitlines メソッドの引数に True を指定して分割された文字列に改行文字を含めてみます。

# >>> str1 = "Orange\nLemon\nApple"
# >>> print(str1)
# Orange
# Lemon
# Apple
# >>> str1.splitlines(True)
# ['Orange¥n', 'Lemon¥n', 'Apple']
# >>>
# 分割された文字列に改行文字が含まれるようになりました。

# -- --

# 文字列で用意されているメソッドの中で、文字列を指定した区切り文字で分割しリストとして取得するするのに使用できるメソッドの使い方について解説しました。



#【文字列の中の指定した文字列を別の文字列に置換する(replace)】
# 文字列の中の指定した文字列を別の文字列に置換する(replace)

# 文字列で用意されているメソッドの中で、文字列の中に含まれる指定した文字列を別の文字列に置換するメソッドの使い方について解説します。

# 指定した文字列を別の文字列に置換する(replaceメソッド)
# replace メソッドは文字列の中に含まれる指定した文字列を別の文字列に置換した新しい文字列を返します。使い方は次の通りです。

# str.replace(old, new[, count])

# 1 番目の引数に指定した文字列( old )を、新しい文字列( new )に置換します。文字列中に複数の文字列が該当する場合はすべて置換します。省略可能な 3 番目の引数には置換を行う最大回数を指定することができます。こちらはあとで試します。

# 簡単な例で試してみます。

# >>> "Copyright 2018".replace("2018", "2019")
# 'Copyright 2019'
# >>> "box width 100, box height 50".replace("box", "div")
# 'div width 100, div height 50'
# >>> "Apple".replace("PP", "oo")
# 'Apple'
# >>>
# 2 番目の例のように文字列の中に置換の対象となる文字列が複数見つかった場合にはすべて置換されます。また 3 番目の例のように置換の対象となる文字列が見つからなかった場合は、元の文字列をそのまま返します。

# 次に 3 番目の引数に置換を行う最大回数を指定してみます。

# >>> "AA BB AA CC AA DD AA EE".replace("AA", "aa")
# 'aa BB aa CC aa DD aa EE'
# >>> "AA BB AA CC AA DD AA EE".replace("AA", "aa", 2)
# 'aa BB aa CC AA DD AA EE'
# >>>
# 今回最大回数として 2 を指定しているので、文字列の先頭から 2 つまで置換を行い、それ以外については置換を行っていません。

# -- --

# 文字列で用意されているメソッドの中で、文字列の中に含まれる指定した文字列を別の文字列に置換するメソッドの使い方について解説しました。


