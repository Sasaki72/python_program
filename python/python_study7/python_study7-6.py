# 【斜めに動かそう】
# 今度はX座標とY座標の方向にも動くように設定して、円が斜めに動いて見えるプログラムを作る
# 
#【斜めに動かすには】
# X座標方向とY座標方向に同時に動かしていくようにプログラムを作る
# 前回はdxという変数でXの移動量を保持して左右に移動させた
# 同様に、Y座標方向、つまり上下に動かすにはYの移動量としてdyという変数を導入し、この変数dyを円のY座標に加えていく処理をする
# このY座標の処理を前Lessonで作成したプログラムに加えると、X座標方向(左右)とY座標(上下)が同時に動くので、結果として斜め(45度)に動く
# この時も、円がキャンパスの高さを超えた時の処理も記述する
# つまり、上辺(=Y座標が０)と下辺(=Y座標がキャンパスの高さ)の２点判定し、移動を反転させる

#【X座標とY座標を同時に動かす】 
# まずY座標の移動量として、dy変数を導入
# 移動量
# dx = 1
# dy = 1      # yの移動量の最初は１、つまり下方向とする

#そしてmove関数では、Y座標をdyの数だけ増加するようにした
# Y座標も動かす
# y = y +dy

# Y座標はキャンパスの上辺(=Y座標が０)と下辺(=Y座標がキャンパスの高さ)で判定処理する
# その座標で変数dyのプラスとマイナスが逆になるように設定すると、円の動きが反転するようになる
# キャンパスの高さは「winfo_heightメソッド」で取得できる。考え方はLesson7-5でX座標に対して行ったのと同じで、それをY座標に対しても適応するだけ
# Y座標についても同様
# if y >= canvas.winfo_height():      # 下辺を超えた時
#    dy = -1                          # 上方向にする
# if y <= 0:                          # 上辺を超えた時
#    dy = +1                          # 下方向にする

# こうしたY座標の処理を加えることで、X座標方向とY座標方向へ同時に動くようになる
# これで円が斜めに動き、ウィンドウの上下左右の端で反転するので、結果として円が跳ね回るような動きになる
# 
# coding:utf-8
import tkinter as tk

# 円の座標と半径
x = 400
y = 300
# 移動量
dx = 1              
dy = 1

def move():
    global x, y, dx, dy
    # 今の円を消す
    canvas.create_oval(x - 20, y - 20, x + 20, y + 20, fill = "white", width = 0)
    # X座標を動かす
    x = x + dx
    # Y座標も動かす
    y = y + dy
    # 次の位置に円を描く
    canvas.create_oval(x - 20, y - 20, x + 20, y + 20, fill = "red", width = 0)
    # 端を超えていたら反対向きにする
    if x >= canvas.winfo_width():           # 右辺を越えた時
      dx = -1                               # 左方向へ
    if x <= 0:                              # 左辺を越えた時
      dx = +1                               # 右方向へ
    # Y座標についても同様
    if y >= canvas.winfo_width():           # 下辺を越えた時
      dy = -1                               # 上方向へ
    if y <= 0:                              # 上辺を越えた時
      dy = +1                               # 下方向へ
    #　再びタイマー
    root.after(10, move)


# ウィンドウを描く
root = tk.Tk()
root.geometry("600x400")

# キャンバスを置く
canvas =tk.Canvas(root, width = 600, height = 400, bg = "white")
canvas.place(x = 0, y = 0)

# タイマーを設定する
root.after(10, move) 

root.mainloop()

