# 【② 繰り返し実行してみよう while構文】
# for構文は、指定した回数だけを繰り返し行う
# それに対し、while構文は特定の条件が成り立っている間は、ずっと繰り返す
# 
# 
# 【while構文で繰り返す】
# 『while構文は、指定した条件が成り立っている間、繰り返し実行する』
# 例えば、「１+２+３+・・・」と計算をしていって、
# 「５０を超えたら、その時の答えを表示する」としたら
# 
# #coding:utf-8
# 
# total= 0                  totalを０にする。ここに足し算していく
# a = 1                     aは1,2,3+•••と増やしていく変数として使う
# while total <= 50:        totalが50以下(<=)である間、繰り返す
#     total = total + a     繰り返すブロックはインデントして記述する
#     a = a + 1             繰り返すブロックはインデントして記述する
# print(total)
# 
# このように記述することで、条件が成り立っている間はずっと処理が実行される
# 条件が成り立っている事を『真(しん)』や『True』、
# 成り立っていない事を『偽(ぎ)』や『Flase』と言う
# 
# while total <= 50:
# ここでは「<=」と言った『比較演算子』を使った
# 
# 【注意】
# 「＝＝」が「等しい」である
#  「＝」は変数に代入する(a = 1)ときの「=」と区別するため
# 
# 【MEMO】
# 条件式は「or (または)」「and (かつ)」「not (否定)」を使って、結びつけることができる
# 
# 
# 【比較演算子表】
# 
# <           a < b         aはbより小さい
# <=          a <= b        aはb以下(未満)
# ==          a == B        aとbは等しい
# >           a > b         aはbより大きい
# >=          a >= b        aはb以上(超過)
# !=          a != b        aとbは等しくない
# 
# 
# 《COLUMN》
# for構文と同じ処理をwhileで記述するには
# 
# for構文
# for a in range(1, 5 + 1):
#     print(a)
# 
# while構文
# a = 1               aを1でスタートする
# while a <= 5:       5以下のときは繰り返す
#     print(a)
#     a = a + 1       aに1を加える
# 
# つまり、最初のaを１でスタートし、「aに1を足していって、それが5以下のときに繰り返す」とすればいい
# 
# 
# 【永遠に繰り返す特殊な書き方】
# 永遠に繰り返すときは『True』を条件式として指定して記述する
# 
# while True:
#     実行したい文
# 
# 「True」は「成り立っている」と言う事を示す特別な値で、「真(しん)」とも言える
# 《注意》「True」の「T」は大文字
# 
# 
# 『whileの条件式にTrueを指定しておくと、いかなる時でも条件が成り立つ』事になるそのため永遠に繰り返す
# 止めたい時は、
# Windows　「Ctrl」 + 「C」キー
# Mac　    「control」 + 「C」キー
# 
# 「ずっとキー入力を待っていて、キー入力された時は待つのをやめ、入力されたキーを処理する」
# とか
# 「ずっとネットワーク通信を待っていて、データが届いたときには、そのデータを処理する」
# といったように、「何か事が起きるまで待つ」という場面で使われる
# 
# 《COLUMN》
# 繰り返しが終わったときに実行するelse
# forやwhileには、繰り返し処理が終わったときに必ず実行されるelseと言う箇所を記述できる
# 
# while 条件式:
#   繰り返す文
# else:
#   繰り返し終わったときに実行する文
# 
# for 変数名 in シーケンス:
#   繰り返す文
# else:
#   繰り返しが終わったときに実行する文
# 
# elseは、「最後に1回だけ実行したい処理」を書くときに使う
# 
# 
