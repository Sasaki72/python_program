# 【機能を拡張するモジュール】
# Pythonの機能を拡張するのが、「モジュール」です
# モジュールを読み込むことで、Pythonに新しい機能を追加できる
# (モジュールはウィンドウを表示したり、PDFを作成したり様々な機能を簡単に利用できる)
# 
# 
# 【モジュールとは】
# Pythonは「基本機能はシンプルに、応用的な機能は『モジュール』に持たせる」という設計思想を取ってる
# モジュールとは、『機能がたくさん詰まった、「関数集」みたいなもの』です
# 
# モジュールは、Pythonに付属してたり、ネットからダウンロードしたり、
# 別途インストールしないと使えないものがある
# どちらの場合も、利用するには「モジュールを読み込む」という操作が必要
# モジュールを読み込む操作は、『インポート(import)する』という
# 
# モジュール
#    ⬇️ (インポート)
# Python本体
# 
# 
# 【モジュールをインポートする】
# モジュールをインポートするには、『import』という構文を使う
# 
# 《書式》
# import モジュール名
# 
# 例) カレンダー
# import calendar
# print(calendar.month(2020,7))
# 
# 《実行結果》
# 2020/7のカレンダーが表示される
# 
# 
# このようにモジュールは、importで読み込むことができる
# また、一度読み込んだら「calendar.〜」とモジュール名にドットを付けた形で記述し、
# 「〜」以下に関数などをつなげて書くことで実行できる
# その他、モジュールの読み込み方法には、２つのやり方がある
# 
# ① asで別名を指定する
# asを指定すると、プログラムで好きな別名で記述できる
# 上記の例であるように、「import calendar」として読み込んだ時は、
# 「calendar.関数名」のように、モジュール名と命令ドットでつなげて記述して実行してるが、
# 同じ命令をasを使って書くこともできる
# 
# 《書式》
# import calendar as c　　　# 「c」のところは任意で好きな名前でOK
# 「as c」と記述すると、これを「c」という名前で参照できる
# なので、以下のように書くことができる
# 
# print(c.month(2020, 7))
# モジュールが長い時は便利なテクニックです
# 
# 
# ②fromでモジュール名を書かずに済むようになる
# もう１つは、fromを使って記述する方法
# 
# 《書式》
# from モジュール名 import 利用したい関数名
# 
# 例えば、以下のコードなら１行目で「month」という関数を取り込むため、２行目で「モジュール名.〜」
# という表記そのものを省略して利用できる
# 
# from calendar import month
# print(month(2020, 7))
# 
# 
#         ① import calendar のとき
#       ーーーーーーーーーーーーーーーーーーーー calendar.month
#       ｜② import calendar as c のとき
#    month関数ーーーーーーーーーーーーーーーーー c.month
# calendarモジュール  
#       ｜③ from calendar import month のとき                       　　　 　
#       ーーーーーーーーーーーーーーーーーーーー month  
# インポートのやり方によって関数を実行するときの書き方が違う
# 
# 
# 【モジュールを使っていろんなことをしよう】
# Pythonで提供されているモジュールには、多種多様なものがあります。
# 「目的の操作をしてくれるモジュール」さえ見つかれば、
# とても短いプログラムを書くだけで、その目的を達成できる
# 世の中には、「Excelのワークシートを操作するモジュール」や
# 「画像のサムネイルなどを作るモジュール」など、便利なモジュールがたくさんある。
# ネットで「Python　モジュール　便利」などをキーワードに検索すると、いくつか見つかる
# Pythonプログラミングに慣れたら、好きなモジュールを使ってプログラミングをしてみる
# 
# 
