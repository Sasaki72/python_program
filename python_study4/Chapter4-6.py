# 【関数を使う】
# 関数は、いくつかの処理をひとまとめにして、ワンタッチで実行できるようにするためのもの
# 一連の処理を何度も実行する時には、処理を関数にまとめておく事で、作業が楽になる
# 
# 【関数は自分でも作れる】
# 実は、前のLesson3-5で数値を「str関数」を使ってきた
# 関数は、Pythonで用意されているもの以外に、自分で作れる
# 関数とは『何か値を受け取って、その値を加工して、内部で処理をして、結果を出すもの』
# 
# 《イメージ》
#         1と5を渡す
# 1,5 ーーーーーーーー➡️
#          引数      ⬇️
#                   関数 (1+2+3+4+5を計算)
#       　　   　　　 ⬇️      　 ｜
# 15 ⬅️ーーーーーーーーー         ｜
#         戻り値  ーーーーーーー 結果    
# 
# 
# 
# 【関数を定義するには】
# 関数を自分で作り、記述することを『関数を「定義する」と表現する』
# Pythonでは『def』と言う構文を使って定義する(define = 定義の略語)
# 関数を定義する時は、何でもいい『関数名』が必要
# 今回は「tashizan」とする
# 
# def tashizan (a, b):
#     この関数の中で実行したい処理
# 
# 書式にまとめると
# def 関数名(渡したい値をカンマで区切ったもの):
#     実行したい文が続く
# 
# 「実行したい文」はインデントして書く
# 「渡したい値をカンマで区切ったもの」は、関数で処理したい値のことで、『引数(ひきすう)』という
# 
# 《MEMO》
# 引数は、必要なだけカンマで区切って列挙する。
# 引数が必要ないなら「def 関数名():」のように、カッコの中に何も書かずに定義する
# 
# 
# では、「実行したい文」には何を書けばいいのか？
# ここでは「受け取ったaからbまでの合計を求める関数」を作る
# そのためには、for構文を使う
# 
# def tashizan(a, b):
#     total = 0
#     for i in range(a, b + 1):     # aからb
#         total = total + i         # まで繰り返す
#     return total               #結果を出す
# 
# ここでは、変数totalに計算結果を求めてる。
# 関数の結果となる値を設定するには、
# return total
# のように『return構文』を使う
# 
# return を使って結果となる値を設定することを『値を返す(返す = returnの和訳)』や
# 『値を戻す(戻す = returnの和訳)』と表現し、この値のことを『戻り値』と言う
# 
# 《COLUMN》
# 引数の実態は「変数」であり、
# 実行される時に実行した側からあらかじめ何らかの値が設定されてくる点だけ違う
# 
# 
# 【関数を利用する】
# 定義した関数は次のように使う
# 
# c = tashizan(1, 5)
# このように記述して、『関数を実行することを「関数を呼び出す(コールする)」』と言う
# 関数を呼び出す事で、変数cには「1+2+3+4+5の足し算の結果」が格納される
# 
# 結局、「tashizan(1, 5)」と書いてるので、tashizan関数が実行される
# この時の、関数定義では 「def tashizan(a, b):」と書いてるので、
# 「aには1」「bには5」が設定されている
# その状態で以下の部分が実行される
# 
# total = 0
# for i in range(a, b + 1):
#     total = total + i
# 
# この時のaは１、bは５なので
#                a  b
# for i in range(1, 5 + 1):　となる
# 
# つまり、１から５まで繰り返し実行されるのでtotal関数は、「1+2+3+4+5」の結果である「15」になる
# 最後に、
# 
# return total
# として、これを戻り値と設定してるので、その結果が、変数cに設定される
# この流れを図示すると下記の通りになる
# 
# #coding:utf-8
# def tashizan(a, b):
#     total = 0
#     for i in range(a, b + 1):
#         total = total + i
#     return total
# 
# c = tashizan(1, 5)
# print(c)
# 
# 《実行結果》
# 15
# 
# 上記の解説
# ① aに１、bに５が設定された状態で実行される
# ② 関数が実行されたtotalが1+2+3+4+5=15になる
# ③ returnしているので戻り値は15
# ④ その15が変数cに設定される
# 
# 
# 
# 【スコープを理解する】
# 関数を使う時には、大きな注意点が１つある
# それは、『関数内の変数と関数外の変数とで、保存場所が違う』と言う事
# 
# サンプルで説明
# 
# #coding:utf-8
# 
# a = "abc"                ① 変数aにabcを代入
# 
# def test():
#     print(a)  ➡️ "abc"    ③ aの参照
#     return
# 
# test()                   ② 関数実行
# print(a)      ➡️ "abc"    ④ aの参照
# 
# 
# ここでは「test」の名前で関数を作った
# 話を簡単にするため引数は無し、つまり「def test():」に記述
# また戻り値も「return」とだけ書いて「無し」にしてる
# (戻り値がない関数を実行する時は、結果を変数に代入する必要がないので、これまでのように、
# 「変数名 = 関数()」のように、「=」や「左辺に変数」を置かず、「test()」のように記述)
# 
# ①のように「a = "abc"」と記述して、変数aに「"abc"」を代入
# ②の「test()」によって、関数を実行する
# test関数の中で、③にあるように「print(a)」によって、aの値を表示
# この時の変数aの値は「"abc"」なので、画面には「abc」と表示される
# そして関数の処理が終われば④に戻ってくる。
# ここでも、「print(a)」を実行してるので「abc」と表示される
# つまり、このプログラムは変数aの値の「"abc"」を２回表示する
# ここまでは問題はない
# 
# 
# 【グローバルスコープとローカルスコープ】
# 問題はこの先
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
