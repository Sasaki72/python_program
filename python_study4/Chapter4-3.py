# 【繰り返し実行してみよう①for構文】
# プログラムでは、同じ処理を好きなだけ何度でも繰り返し実行でき、
# その性質を使う事で、プログラムを短く書くことができる
# 
# 例えば、
# print(1)
# print(2)
# print(3)
# print(4)
# print(5)
#    ・
#    ・
#    ・
# print(100)
# と100まで表示したいときはどうすればいいのか？
# そこで『繰り返し実行する構文』を使う
# 
# Pythonでは「どのような方法で繰り返すのか」によって、次の２つの構文がある
# ①for構文
# 指定した値の列から１つずつ取り出し、それが尽きるまで繰り返す
# 
# ②while構文
# 指定した条件を満たしている間、実行する
# 繰り返し処理することは『ループ処理する』とも言われる
# 
# 
# 【for構文で繰り返す】
# 指定した回数分だけ繰り返すときに、よく使うのがfor構文。
# 「指定する値の列」を１つずつ取り出して、それが尽きるまで繰り返す操作をする
# 
# 《シーケンスを使って繰り返す》
# for構文に「指定する値の列」は、「１つずつ取り出せるもの」であれば何でもよく、
# これを『シーケンス(Sequence。順序立てているもの、といった意味)』と言う
# シーケンスにはいくつかの種類があるが、代表的なのは『リスト(List)』と呼ばれる値
# リストは、「値をカンマで区切って列挙し、全体を[]で囲ったもの」です。
# 実際に、リストとfor構文を使って、「５回繰り返す」
# 
# # coding:utf-8
# for a in [1,2,3,4,5]:
#     print(a)
# 
# 
# 《実行結果》
# 1
# 2
# 3
# 4
# 5
# 
# 
# 【変数名は任意のものでかまわない】
# 一般的には、『慣例的に「i」や「j」という変数名が使われる』
# 「i」が使われるのは歴史的な理由で、「Integer (整数)」の頭文字であるため
# 「j」は単純に、「i」の次の頭文字であるため
# 他には、「n」(Number 数字)の頭文字なども使う
# 
# 
# 【繰り返す場所はインデントで指定する】
# coding:utf-8
# for a in [1,2,3,4,5]:
#     print(a)
# 
# このように、「print」が少し右にずれているのに注目
# この事を『インデント(字下げ)』と言う
# Pythonでは『「どの部分を繰り返すのか」を、「右にずれたブロック(インデントされたブロック)」で判断』する
# 
# 《MEMO》
# 1行目の行末に「:」を必ずつける。ないとエラーになる
# 
# 
# 【複数の文を入力する場合のインデントの違いを理解する】
# 
# 例①
# for a in [1,2,3,4,5]:
#     print(a)              ← インデントされている
#     print(こんにちは)     　← インデントされている
#
# 《実行結果》 
# １
# こんにちは
# ２
# こんにちは
# ３
# こんにちは
# ４
# こんにちは
# ５
# こんにちは
# 
# 
# 例②
# for a in [1,2,3,4,5]:
#     print(a)            ← インデントされている
# print(こんにちは) 　　　　 ← インデントされていない
# 
# 《実行結果》
# 1
# 2
# 3
# 4
# 5
# こんにちは
# 
# 
# 【もっとたくさん繰り返す】
# 例えば100回繰り返すには
# Pythonにはこうした目的を専用に行える『range関数』がある
# 
# range(開始する値 , 終了する値未満 +1)
# こうすれば終了する値まで連続でしてくれるが、最後が未満なので「+1」をする必要がある
# 
# ５回繰り返したいときは
# range(1, 5 + 1)
# 
# もちろん +1 をした、 range(1, 6)と書いてもいい
# 
# １００回繰り返すには、
# for a in range(1, 101):
#     print(a)
#     print("こんにちは")
# 
# とすればいいが、
# 【スッキリ書くには「0」から数える】
# 本来、range関数は『0から数える』事を目的に考案された
# 0から書くなら下記の通り
# 
# for a in (100):
#     print(a + 1)
#     print("ありがとう")
# 
# とスッキリかける
# 
# 
# 【文字列を１文字ずつ取り出す】
# 『文字列に対して繰り返すこと』ができる
# その場合、構成している文字を先頭から一文字ずつ取り出して繰り返す
# 
# # coding:utf-8
# for a in "Hello"
#     print(a)
# 
# 《実行結果》
# H
# e
# l
# l
# o
# 
# 【for構文は値を１つずつ取り出して繰り返し実行できる便利な命令】
# 
# 
