# 【プログラムを構成する基本的な機能】
# プログラミング言語には、値を一時的に保存したり、計算したり、処理を繰り返したり、
# 条件によっては処理を分岐したりする基本的な機能があり、それらを組み合わせる事で、プログラムを作っている


# 【プログラミングを制御するためにの６つの基本機能】
# ①計算機能
# 「+」「-」「*」「/」を使った四則演算や、「+」を使った文字列の連結
# ②変数(へんすう)
# 計算結果をはじめ、ユーザーが入力した値やファイルからの読み取り、ネットワーク通信で取得したデータなど、
# ありとあらゆるデータを一時的に保存する仕組み。
# ③繰り返し
# 命令を何回か(もしくは何十回か何百回、何千回、もしくは終了するまで永遠に)繰り返し実行する機能
# 命令を１つしか書かなくても、指定した回数だけ繰り返す事ができる
# ④条件分岐
# 計算結果や変数に格納された値が、どのようなものかであるかによって、処理を分岐する仕組み
# 条件分岐は、とても多岐に渡って使われる。
# 例えば、「入力した文字や数字が範囲内にあるかどうかを調べてエラーメッセージを表示する」とか
# 「今日が日曜日のときは、別の処理をする」など
# ⑤関数
# 処理を１つにまとめる事ができる方法
# Lesson3-5　では、「str関数」を使って数値を文字列に変換したが、それ以外にもたくさんの関数がある
# そして関数は、自分で作ることもできる
# ⑥モジュール(外部機能)
# Python本体には基本的な機能しかない。
# 「ウィンドウを表示したい」とか「音を出したい」「ネットワークを通信したい」などの機能は、
# Pythonとは別に追加できる形式で提供されている。この追加機能の事を「モジュール」と呼ぶ
# モジュールを使うには、最初にモジュールを「読み込む」ための操作が必要


# 【変数を使ってみよう】
# 変数は、値を保存するための場所
# 計算結果など、様々なデータを一時的に保存するときに使う
# 【変数とは】
# 「変数は、プログラムを書く人が好きな名前を付けた「器」です」
# その器には、好きな値を格納する事ができ、あとで参照して利用できる
# >>> a = 1
# これは「変数aに、値1を格納する」という意味の文
# このように変数に値を格納する操作を「代入(だいにゅう)する」と表現し、「=」の記号を使う
# 上記の命令を実行すると「aという名前の箱」ができて、その中に「値1」が格納される
# 変数はいくつでも作れる。例えば以下のように、
# >>> b = 2
# と入力すれば、変数bに「値2」が格納される
# 変数は、最初に値を代入したときに作られる
# 最初に「変数名 = 値」と記述して変数を作る操作を「変数を定義して初期化する」と言う


# 《文字列を格納する》
# >>> c = "abc"
# とすれば、変数cに「値"abc"」が格納される
# 《変数名は長くても構わない》
# 実際には、値の意味を分かりやすくするために、「name」(氏名などを格納)、「total」(統計などを格納)、
# 「tel」や「telephone」(電話番号などを格納)といった変数名がよく使われる
# >>> username = "山田太郎"
# 上のように記述すれば、username と言う名前の変数ができ、そこに"山田太郎"と言う値が格納される
# このように「何か好きな名前を付けた入れ物に、値を格納しておく」のが変数です


# 【変数の参照】
# 変数に保存した値は、その「変数名」を指定すると値を取り出せる
# >>> a = 1 としてたら
# >>> a と打つと
# １が表示される
# このように変数の値を取り出す行為を『参照』と言う
# 変数での計算も可能
# >>> a = 1
# >>> b = 2
# >>> a + b
# ３　と表示される
# 【値を格納していないと参照できない】
# まだ値を設定していない変数を参照してしまうと「Error」になる


# 【Pythonのプログラムファイルから操作する】
# これまでインタラクティブモードで操作してきたが、Pythonのプログラムファイルでも同じ操作になる
# # coding:utf-8
# a = 1
# b = 2
# print(a + b)
# ３と表示される


# 【繰り返し実行してみよう①for構文】
# プログラムでは、同じ処理を好きなだけ何度でも繰り返し実行でき、
# その性質を使う事で、プログラムを短く書くことができる
# print(1)
#    ・
#    ・
# print(100)
# と1から100まで表示したいときはどうすればいいのか？
# そこで『繰り返し実行する構文』を使う


# Pythonでは「どのような方法で繰り返すのか」によって、次の２つの構文がある
# ①for構文
# 指定した値の列から１つずつ取り出し、それが尽きるまで繰り返す
# ②while構文 (次で説明)
# 指定した条件を満たしている間、実行する
# 繰り返し処理することは『ループ処理する』とも言われる


# 【① for構文で繰り返す】
# 指定した回数分だけ繰り返すときに、よく使うのがfor構文。
# 「指定する値の列」を１つずつ取り出して、それが尽きるまで繰り返す操作をする
# 《シーケンスを使って繰り返す》
# for構文に「指定する値の列」は、「１つずつ取り出せるもの」であれば何でもよく、
# これを『シーケンス(Sequence。順序立てているもの、といった意味)』と言う
# シーケンスにはいくつかの種類があるが、代表的なのは『リスト(List)』と呼ばれる値
# リストは、「値をカンマで区切って列挙し、全体を[]で囲ったもの」です。
# 実際に、リストとfor構文を使って、「５回繰り返す」
# # coding:utf-8
# for a in [1,2,3,4,5]:
#     print(a)
# 《実行結果》
# 1
# 2
# 3
# 4
# 5


# 【変数名は任意のものでかまわない】
# 一般的には、『慣例的に「i」や「j」という変数名が使われる』
# 「i」が使われるのは歴史的な理由で、「Integer (整数)」の頭文字であるため
# 「j」は単純に、「i」の次の頭文字であるため
# 他には、「n」(Number 数字)の頭文字なども使う


# 【繰り返す場所はインデントで指定する】
# coding:utf-8
# for a in [1,2,3,4,5]:
#     print(a)
# このように、「print」が少し右にずれているのに注目
# この事を『インデント(字下げ)』と言う
# Pythonでは『「どの部分を繰り返すのか」を、「右にずれたブロック(インデントされたブロック)」で判断』する
# 《MEMO》
# 1行目の行末に「:」を必ずつける。ないとエラーになる


# 【複数の文を入力する場合のインデントの違いを理解する】
# 例①
# for a in [1,2,3,4,5]:
#     print(a)              ← インデントされている
#     print(こんにちは)     　← インデントされている
# 《実行結果》 
# １
# こんにちは
# ２
# こんにちは
# ３
# こんにちは
# ４
# こんにちは
# ５
# こんにちは


# 例②
# for a in [1,2,3,4,5]:
#     print(a)            ← インデントされている
# print(こんにちは) 　　　　 ← インデントされていない
# 《実行結果》
# 1
# 2
# 3
# 4
# 5
# こんにちは


# 【もっとたくさん繰り返す】
# 例えば100回繰り返すには
# Pythonにはこうした目的を専用に行える『range関数』がある
# range(開始する値 , 終了する値未満 +1)
# こうすれば終了する値まで連続でしてくれるが、最後が未満なので「+1」をする必要がある
# ５回繰り返したいときは
# range(1, 5 + 1)
# もちろん +1 をした、 range(1, 6)と書いてもいい
# １００回繰り返すには、
# for a in range(1, 101):
#     print(a)
#     print("こんにちは")
# とすればいいが、
# 【スッキリ書くには「0」から数える】
# 本来、range関数は『0から数える』事を目的に考案された
# 0から書くなら下記の通り
# for a in (100):
#     print(a + 1)
#     print("ありがとう")
# とスッキリかける


# 【文字列を１文字ずつ取り出す】
# 『文字列に対して繰り返すこと』ができる
# その場合、構成している文字を先頭から一文字ずつ取り出して繰り返す
# # coding:utf-8
# for a in "Hello"
#     print(a)
# 《実行結果》
# H
# e
# l
# l
# o
# 【for構文は値を１つずつ取り出して繰り返し実行できる便利な命令】


# 【② 繰り返し実行してみよう while構文】
# for構文は、指定した回数だけを繰り返し行う
# それに対し、while構文は特定の条件が成り立っている間は、ずっと繰り返す
# 【while構文で繰り返す】
# 『while構文は、指定した条件が成り立っている間、繰り返し実行する』
# 例えば、「１+２+３+・・・」と計算をしていって、
# 「５０を超えたら、その時の答えを表示する」としたら
# #coding:utf-8
# total= 0                  totalを０にする。ここに足し算していく
# a = 1                     aは1,2,3+•••と増やしていく変数として使う
# while total <= 50:        totalが50以下(<=)である間、繰り返す
#     total = total + a     繰り返すブロックはインデントして記述する
#     a = a + 1             繰り返すブロックはインデントして記述する
# print(total)
# このように記述することで、条件が成り立っている間はずっと処理が実行される
# 条件が成り立っている事を『真(しん)』や『True』、
# 成り立っていない事を『偽(ぎ)』や『Flase』と言う
# while total <= 50:
# ここでは「<=」と言った『比較演算子』を使った
# 【注意】
# 「＝＝」が「等しい」である
#  「＝」は変数に代入する(a = 1)ときの「=」と区別するため
# 【MEMO】
# 条件式は「or (または)」「and (かつ)」「not (否定)」を使って、結びつけることができる


# 【比較演算子表】
# <           a < b         aはbより小さい
# <=          a <= b        aはb以下(未満)
# ==          a == B        aとbは等しい
# >           a > b         aはbより大きい
# >=          a >= b        aはb以上(超過)
# !=          a != b        aとbは等しくない


# 《COLUMN》
# for構文と同じ処理をwhileで記述するには
# for構文
# for a in range(1, 5 + 1):
#     print(a)
# while構文
# a = 1               aを1でスタートする
# while a <= 5:       5以下のときは繰り返す
#     print(a)
#     a = a + 1       aに1を加える
# つまり、最初のaを１でスタートし、「aに1を足していって、それが5以下のときに繰り返す」とすればいい


# 【永遠に繰り返す特殊な書き方】
# 永遠に繰り返すときは『True』を条件式として指定して記述する
# while True:
#     実行したい文
# 「True」は「成り立っている」と言う事を示す特別な値で、「真(しん)」とも言える
# 《注意》「True」の「T」は大文字
# 『whileの条件式にTrueを指定しておくと、いかなる時でも条件が成り立つ』事になるそのため永遠に繰り返す
# 止めたい時は、
# Windows　「Ctrl」 + 「C」キー
# Mac　    「control」 + 「C」キー
# 「ずっとキー入力を待っていて、キー入力された時は待つのをやめ、入力されたキーを処理する」
# とか
# 「ずっとネットワーク通信を待っていて、データが届いたときには、そのデータを処理する」
# といったように、「何か事が起きるまで待つ」という場面で使われる


# 《COLUMN》
# 繰り返しが終わったときに実行するelse
# forやwhileには、繰り返し処理が終わったときに必ず実行されるelseと言う箇所を記述できる
# while 条件式:
#   繰り返す文
# else:
#   繰り返し終わったときに実行する文
# for 変数名 in シーケンス:
#   繰り返す文
# else:
#   繰り返しが終わったときに実行する文
# elseは、「最後に1回だけ実行したい処理」を書くときに使う


# 【条件分岐する/if構文】
# プログラミングで複雑な動作をさせるには、
# 「もし、このようなときには、こうする、そうでなければ、こうする」と言うような条件分岐が不可欠
# (繰り返し実行できると、長いプログラムも短く書く事ができる)
# (条件分岐を理解すれば、もっと複雑なプログラムも書けるようになる)


# 【条件分岐】
# Pythonでは、次の書式のif構文を記述すると、条件分岐できる
# 「書式」 if構文の条件分岐
# if 条件文：
#     条件が成り立っているときに実行する文
# else:
#     条件が成り立っていないときに実行する文
# ※ else: が不要であれば、if条件文だけで記述できる
# 条件分岐も『インデントして記述』する。そうしないとErrorになる
# 例) 全体で10回繰り返し、「aが5以下」の時は「小さいです」、それ以外は「大きいです」と表示させる
# # coding:utf-8
# for a in range(1, 11):
#     if a <= 5:
#       print("小さいです")
#     else:
#       print("大きいです")
# 《実行結果》
# 小さいです
# 小さいです
# 小さいです
# 小さいです
# 小さいです
# 大きいです
# 大きいです
# 大きいです
# 大きいです
# 大きいです


# 『別回答』
# # coding:utf-8
# for a in range(10):
#     if a + 1 <= 5:
#       print("小さいです")
#     else:
#       print("大きいです")
# 「range(10)」にまとめて「a + 1」にして簡単にした（P92参照）


# 【条件を組み合わせる】
# 指定できる条件は、１つではなく組み合わせることもできる。
# 条件を組み合わせる時は、「and」「or」、そして「not」を使う
# こうした組み合わせを『倫理演算子』と言う
# 《倫理演算子表》
# and   ２つの条件の両方が成り立つ時       (a == 1) and (b == 2)   aが1で、かつ、bが2の時
# or    ２つの条件のいずれかが成り立つ時　　(a == 1) or (b == 2)　 　aが1、もしくは、bが2の時
# not   条件の否定                      not (a == 2)            aが2と等しくない時(a! = 2と書くのと同じ)
# 《COLUMN》【重要】
# Pythonでは「and」を省略できる
# 「1以上、5以下であるか」を調べるには、普通は
# if (a >= 1) and (a <= 5):
# と記述するが、Pythonでは
# if 1 <= a <= 5:
# と省略して書く事ができる。
# ただし、省略できるのはPythonだけで他の言語では許されない


# 実際に、条件を組み合わせたプログラムを作ってみる
# 今回は１から１０までを繰り返し実行し、
# ・２の倍数の時は「○」
# ・２の倍数の時は「×」
# ・２の倍数かつ３の倍数の時は「△」
#   と表記する
# # coding:utf-8
# for a in range(1, 11):      他には、「for a in range(1, 10 + 1):」とも書ける
#     print(a)
#     if a % 2 == 0:
#         print("○")
#     if a % 3 == 0:
#         print("×")
#     if (a % 2 == 0) and (a % 3 == 0):
#         print("△")
# 「倍数の時は」という条件は以下のように記述する
# if a % 2 == 0:    (２の倍数の時は)
# 【重要】
# 「%」は余りを計算する演算子
# 「余りが０」なら、「その倍数である」とみなしている
# Pythonには「倍数かどうか」を調べる命令は存在しない
# しかし、それと同じ意味になるように「割ったときに、余りが０かどうか」と考え、
# Pythonでできる書き方に変更することでプログラミングができる
# プログラミングするときは、
# 『プログラミングとして表現できる、同じ意味での考え方の置き換え』は常にあるので、
# 「頭をちょっとひねる」事が必要になる
# 「２の倍数」かつ「３の倍数」の場合は、andを使って、以下のように表現しました
# if (a % 2 == 0) and (a % 3 == 0):


# 【elifを使って「ではない時の条件」を並べる】
# 場合によっては、「ではない」時に、別の条件を指定したい事がある
# ①12の倍数のときは「○」と表示する
# ②①でなく４の倍数の時は「△」と表示する
# ③①でも②でもなく２の倍数の時は「×」と表示する
# ④上記のどれでもないときは「☆」と表示する
# 　この処理は、次のように記述できる
# if (a % 12 == 0):
#   # ①12の倍数のとき
#   print("○")
# else:
#   # ②12の倍数ではないとき
#   if (a % 4 == 0):
#     # ②４の倍数のとき
#     print("△")
#   else:
#     if (a % 2 == 0):
#       # ③２の倍数のとき
#       print("×")
#     else:
#       # ④どれでもないとき
#       print("☆")
# このプログラミングは、「if」「else」がとても多く、一目でどのような処理をしてるかわからない
# 実はPythonには「else」と「if」を合体した『elif』がある
# if (a % 12 == 0):
#   # ①12の倍数のとき
#   print("○")
# elif (a % 4 == 0):
#   # ②４の倍数のとき
#   print("△")
# elif (a % 2 == 0):
#   # ③２の倍数のとき
#   print("×")
# else:
#   # ④どれでもないとき
#   print("☆")
# 『elifは、「そうではないときは」を列挙したい時によく使われる表記方法』
# これを使う事で行数を減らせ、スッキリと書ける


# このプログラミングは、「if」「else」がとても多く、一目でどのような処理をしてるかわからない
# 実はPythonには「else」と「if」を合体した『elif』がある
# if (a % 12 == 0):
#   # ①12の倍数のとき
#   print("○")
# elif (a % 4 == 0):
#   # ②４の倍数のとき
#   print("△")
# elif if (a % 2 == 0):
#   # ③２の倍数のとき
#   print("×")
# else:
#   # ④どれでもないとき
#   print("☆")
# 『elifは、「そうではないときは」を列挙したい時によく使われる表記方法』
# これを使う事で行数を減らせ、スッキリと書ける
# 【条件が成り立ったときに繰り返しをやめる・『break』を使う】
# if文を使った条件判断は、for や while などの繰り返し構文と組み合わせることもよくある
# つまり、「何度か繰り返すのだけれども、特定の条件が成り立ったときには、繰り返しをやめたい」と言うパターンです
# for構文や while構文では、構文の内部で『break』と言う特別な命令を実行すると、その時点で繰り返しをやめ、次の表記に移動する
# 例）「1+2+3+4+••••」と足して行って、50を超えたらその時の答えを表示する
# total = 0
# a = 1
# while total <= 50:      # 「total <= 50」 50以下の時に繰り返す
#     total = total + a
#     a = a + 1
# print(total)
# 《実行結果》
# 55
# 他には『break』を使って、下記のように記述できる
# total = 0
# a = 1
# while True:             #「while True」 永遠に切り返す
#     total = total + a
#     a = a + 1
#     if total > 50:      # 50を超えたら
#       break             # 繰返しをやめる 
# print(total)
# 《実行結果》
# 55


# 「while True」と記述して、永遠を繰り返すようにした。
# その中で、変数aの値を1,2,••••と増やしながら、変数totalに加えていく。そして、
# if tptal > 50:
#     break
# の条件によって、total変数の内容が50を超えた時は、breakを実行する
# この結果、whileのループから抜け出し、「print(total)」が実行され、プログラムが終了する
# breakを使って処理を終了する例は、
# 「ユーザーに何か文字入力してもらうときに、特定の文字の並び(例えば「数字だけ」といった制約)でない時は、
# ずっと「正しい文字の並びで入力されるまで繰り返し入力させる」と言うような場合」


# 《COLUMN》
# 『何もしないことを示すpass』
# if文では、時々「条件が成り立った時に、何も実行すべきものがない」事がある。
# その時に、「条件が成り立ったときに実行したい文」を省略して、
# if 条件式:
# else:
#        条件が成り立たなかったとき
# と記述するとエラーになる。こんな時に、Pythonでは「何もしない文」が用意してある
# それが『pass』である。以下のようにすればエラーにはならない
# if 条件式:
#         pass       #何もしない文
# else:
#        条件が成り立たなかったとき 


# 【関数を使う】
# 関数は、いくつかの処理をひとまとめにして、ワンタッチで実行できるようにするためのもの
# 一連の処理を何度も実行する時には、処理を関数にまとめておく事で、作業が楽になる
# 【関数は自分でも作れる】
# 実は、前のLesson3-5で数値を「str関数」を使ってきた
# 関数は、Pythonで用意されているもの以外に、自分で作れる
# 関数とは『何か値を受け取って、その値を加工して、内部で処理をして、結果を出すもの』
# 《イメージ》
#         1と5を渡す
# 1,5 ーーーーーーーー➡️
#          引数      ⬇️
#                   関数 (1+2+3+4+5を計算)
#       　　   　　　 ⬇️      　 ｜
# 15 ⬅️ーーーーーーーーー         ｜
#         戻り値  ーーーーーーー 結果    


# 【関数を定義するには】
# 関数を自分で作り、記述することを『関数を「定義する」と表現する』
# Pythonでは『def』と言う構文を使って定義する(define = 定義の略語)
# 関数を定義する時は、何でもいい『関数名』が必要
# 今回は「tashizan」とする
# def tashizan (a, b):
#     この関数の中で実行したい処理
# 書式にまとめると
# def 関数名(渡したい値をカンマで区切ったもの):
#     実行したい文が続く
# 「実行したい文」はインデントして書く
# 「渡したい値をカンマで区切ったもの」は、関数で処理したい値のことで、『引数(ひきすう)』という
# 《MEMO》
# 引数は、必要なだけカンマで区切って列挙する。
# 引数が必要ないなら「def 関数名():」のように、カッコの中に何も書かずに定義する


# 「実行したい文」には何を書けばいいのか？
# ここでは「受け取ったaからbまでの合計を求める関数」を作る
# そのためには、for構文を使う
# def tashizan(a, b):
#     total = 0
#     for i in range(a, b + 1):     # aからb
#         total = total + i         # まで繰り返す
#     return total               #結果を出す
# ここでは、変数totalに計算結果を求めてる。
# 関数の結果となる値を設定するには、
# return total
# のように『return構文』を使う
# return を使って結果となる値を設定することを『値を返す(返す = returnの和訳)』や
# 『値を戻す(戻す = returnの和訳)』と表現し、この値のことを『戻り値』と言う
# 《COLUMN》
# 引数の実態は「変数」であり、
# 実行される時に実行した側からあらかじめ何らかの値が設定されてくる点だけ違う


# 【関数を利用する】
# 定義した関数は次のように使う
# c = tashizan(1, 5)
# このように記述して、『関数を実行することを「関数を呼び出す(コールする)」』と言う
# 関数を呼び出す事で、変数cには「1+2+3+4+5の足し算の結果」が格納される
# 結局、「tashizan(1, 5)」と書いてるので、tashizan関数が実行される
# この時の、関数定義では 「def tashizan(a, b):」と書いてるので、
# 「aには1」「bには5」が設定されている
# その状態で以下の部分が実行される
# total = 0
# for i in range(a, b + 1):
#     total = total + i
# この時のaは１、bは５なので
#                a  b
# for i in range(1, 5 + 1):　となる
# つまり、１から５まで繰り返し実行されるのでtotal関数は、「1+2+3+4+5」の結果である「15」になる
# 最後に、
# return total
# として、これを戻り値と設定してるので、その結果が、変数cに設定される
# この流れを図示すると下記の通りになる
# #coding:utf-8
# def tashizan(a, b):
#     total = 0
#     for i in range(a, b + 1):
#         total = total + i
#     return total
# c = tashizan(1, 5)
# print(c)
# 《実行結果》
# 15
# 上記の解説
# ① aに１、bに５が設定された状態で実行される
# ② 関数が実行されたtotalが1+2+3+4+5=15になる
# ③ returnしているので戻り値は15
# ④ その15が変数cに設定される


