# 【配列・連想配列】
# Pythonに限らずプログラミングを行う上で配列は非常に重要です。ここでは主要な配列の概要を示すとともに、同じような機能の配列であっても言語ごとに呼び方が異なる場合があるため、ここでまとめておきます。
# 
# 1 配列の種類
# 2 他の言語では
# 
# 【配列の種類】
# 主な配列には以下の４つがあります。
# 
# 
# ①
# 《タプル（tuple）》
# 任意の数の要素を持つことができる配列です。作成したあとは要素の追加や削除を行うことができません。
# 
# タプルはプログラミングにおける機能としては一般的ですが、他の言語ではあまり聞かないネーミングです。簡単に言うと、複数の要素から構成されそれを一つのモノとして扱える機能です。後の項で解説するリストとの違いは、作成した後に要素の追加や削除が出来るか出来ないかです。タプルの場合は作成した後の変更は不可、リストの場合は可と覚えておきましょう。
# 
# ・タプルとは？
# 先に述べたとおり、タプルの特徴は作成した後の変更が不可能という点です。複数の値を返す関数の戻り値などをタプルにすると良いでしょう。使い方は下記の通りです。
# 
# import datetime
# 
# 
# def get_today():
# 
#     today = datetime.datetime.today()
#     value = (today.year, today.month, today.day)
# 
#     return value
# 
# 
# test_tuple = get_today()
# 
# print(test_tuple)
# print(test_tuple[0])
# print(test_tuple[1])
# print(test_tuple[2])
# 
# 
# 《実行結果》
# (2010, 5, 8)
# 2010
# 5
# 8
# 
# ※プログラムの実行時間によって結果は異なります。
# 
# 7行目で要素を3つ「 () 」（カッコ）を使用して囲んでいます。これでその3要素を保持しているタプルとして作成することができます。
# 
# import datetime
# 
# 
# def get_today():
# 
#     today = datetime.datetime.today()
#     value = (today.year, today.month, today.day)
# 
#     return value
# 
# 
# test_tuple = get_today()
# 
# print(test_tuple)
# print(test_tuple[0])
# print(test_tuple[1])
# print(test_tuple[2])
# 
# またタプルやリストなどは（文字列もそうです）、シーケンス型と呼ばれ「 [] 」を用いたインデックス値で各要素にアクセスできるようになっています（インデックス値は0から始まります）。
# 
# 
# ②
# 《リスト（list）》
# 任意の数の要素を持つことができる配列です。作成したあとでも要素の追加や削除を行うことができます。
# 
# タプルに続いてリストの解説です。前項でも少し触れましたが、タプルとの違いは作成した後に要素の追加や削除が出来るか出来ないかです。
# 
# 1 リストの基本
# 2 要素の追加
# 3 インデックスを指定して追加
# 4 要素の削除１
# 5 要素の削除２
# 6 要素のインデックスを取得
# 7 リスト内での要素数を取得
# 
# １ リストの基本
# 要素の変更がいつでも可能なので非常に汎用性が高いです。以下使い方の例となりますが、この段階ではタプルとさほど変わりません。
# ※for文は後の項で説明しますが、繰り返し処理を行う機能です。
# 
# test_list_1 = ['python', '-', 'izm', '.', 'com']
# print(test_list_1)
# 
# print('--------------------------------')
# 
# for i in test_list_1:
#     print(i)
# 
# 
# 《実行結果》
# ['python', '-', 'izm', '.', 'com']
# --------------------------------
# python
# -
# izm
# .
# com
# 
# タプルは「 () 」（カッコ）を使用して作成しましたが、リストでは「 [] 」（大カッコ）で作成します。上記の例は作成と同時に要素を埋め込み、リストをそのまま出力した場合と、ループ（繰り返し処理）を利用して出力した場合の例です。
# 
# ２ 要素の追加
# ここからがタプルとの違いです。要素の追加を行ってみましょう。appendはリストの末尾に要素の追加を行います。
# 
# test_list_1 = []
# print(test_list_1)
# 
# print('--------------------------------')
# 
# test_list_1.append('python')
# test_list_1.append('-')
# test_list_1.append('izm')
# test_list_1.append('.')
# test_list_1.append('com')
# 
# print(test_list_1)
# 
# 
# 《実行結果》
# []
# --------------------------------
# ['python', '-', 'izm', '.', 'com']
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
# 
