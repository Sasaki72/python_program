# 【リスト】

# リストを作成する
# リストの要素を取得する
# スライスを使ってリストの指定した範囲の要素が含まれる新しいリストを取得する
# リストの長さ(要素数)を取得する
# リストの要素を入れ替える
# リストへの要素の追加と別のリストとの結合
# リストの指定した位置へ要素を挿入する
# リストから要素を削除する
# リストに指定した値と同じ要素が含まれているか確認する
# リストの要素を昇順または降順に並び替える
# 文字列、タプル、rangeなどからリストを作成する
# 多次元リストの作成と要素の取得
# リスト内包表記を使ったリストの作成
# 多重ループを使ったリストの作成をリスト内包表記で行う



# 【リストを作成する】
# リストを作成する

# リストを新しく作成する方法について解説します。リストには複数の要素が含まれますが、要素に対して値を指定して作成する方法の他に、変数を指定したり同じ要素を指定した個数繰り返すリストを作成することができます。

# 目次

# 値を指定してリストを作成する
# 変数に代入された値を要素として指定する
# 要素を指定した個数繰り返すリストを作成する

# 値を指定してリストを作成する
# リスト型は [ から ] までの間に複数の要素をカンマ(,)で区切って定義します。書式は次のとおりです。

# [要素1, 要素2, ...]

# 要素には数値や文字列など Python で扱えるオブジェクトであれば何でも指定することができます。

# [10, 20, 30, 40, 50]
# ["Blue", "Red", "Green"]

# 同じリストで要素毎に異なるデータ型のオブジェクトを指定することができます。

# [25, "Yamada", True]

# 要素には別のリストを指定することができます。

# ["Tanaka", [87, 54, 62], 78]

# 要素が空のリストを作成することができます。

# []

# 作成したリストは数値や文字列のように変数に代入して利用することができます。

# colorlist = ["Blue", "Red", "Green"]

# 変数に代入された値を要素として指定する
# 値を指定してリストを作成するときに、値を直接入力するかわりに値が代入された変数を指定してリストを作成することができます。

# >>> x = 10
# >>> y = 15
# >>> numlist = [x, y]
# >>> print(numlist)
# [10, 15]
# >>>
# 要素に変数名を指定した場合、要素には変数の参照が設定されるのではなくリストの作成時に変数に代入されていた値が直接記述されたのと同じ扱いとなります。その為、先ほどのリストは次のように作成したものとまったく同じです。

# >>> numlist = [10, 15]
# >>> print(numlist)
# [10, 15]
# >>>
# リストを作成したあとに変数に別の値を代入しても、リストの要素は変更されません。

# >>> x = 10
# >>> y = 15
# >>> numlist = [x, y]
# >>> print(numlist)
# [10, 15]
# >>> x = 50
# >>> print(numlist)
# [10, 15]
# >>>
# 要素を指定した個数繰り返すリストを作成する
# 例えば特定の値を持つ要素を指定した個数持つようなリストを作成する場合、次のように行うことができます。

# リスト = [要素] * 個数

# 例えば数値の 0 を持つ要素が 10 個あるリストを作成するには次のように行います。

# >>> numlist = [0] * 10
# >>> print(numlist)
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# >>>
# 文字列の "undefined" を参照する要素が 5 個あるリストを作成するには次のように行います。

# >>> namellist = ["undefined"] * 5
# >>> print(namellist)
# ['undefined', 'undefined', 'undefined', 'undefined', 'undefined']
# >>>
# 指定した初期値が含まれる要素を指定した個数持つリストを作成したい場合などに便利です。

# なお繰り返す要素に他のリストを指定した場合、リストを持つ要素を指定した個数持つ新しいリストを作成するのではなく、リストに含まれる要素を指定した個数分繰り返した新しいリストを作成します。

# >>> numlist = [10, 20, 30] * 3
# >>> print(numlist)
# [10, 20, 30, 10, 20, 30, 10, 20, 30]
# >>>
# -- --

# リストを作成する方法について解説しました。



# 【リストの要素を取得する】
# リストの要素を取得する

# 作成したリストに対してインデックスを指定することで要素を取得することができます。ここではリストの要素を取得する方法について解説します。

# 目次

# インデックスを指定して要素を取得する
# リストの最後の要素のインデックスを調べる
# インデックスを指定して要素を取得する
# リストの各要素にはインデックス割り当てられています。リストの最初の要素のインデックスが 0 で後ろに向かって 1, 2, ... と順番に割り当てられています。リストに対してインデックスを指定することで要素を取得することができます。

# リスト[インデックス]

# 次の例ではリストの各要素を順に取得し画面に出力しています。

# >>> colorlist = ["Red", "Blue", "Green"]
# >>> print(colorlist[0])
# Red
# >>> print(colorlist[1])
# Blue
# >>> print(colorlist[2])
# Green
# >>>
# またインデックスは負の値でも指定することができます。リストの最後の要素のインデックスが -1 で前に向かって -2, -3, ... と割り当てられています。

# 次の例では負の値のインデックスを指定してリストの各要素を順に取得し画面に出力しています。

# >>> colorlist = ["Red", "Blue", "Green"]
# >>> print(colorlist[-])
# Green
# >>> print(colorlist[-2])
# Blue
# >>> print(colorlist[-3])
# Red
# >>>
# なお要素が存在しないインデックスを指定して要素を取得しようとすると IndexError エラーとなります。

# >>> colorlist = ["Red", "Blue", "Green"]
# >>> print(colorlist[3])
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# IndexError: list index out of range
# >>>
# リストの最後の要素のインデックスを調べる
# 組み込み関数の len 関数の引数にリストを指定すると、リストの要素数を取得することができます。(詳細は「リストの長さ(要素数)を取得する」を参照されてください)。

# len(["Red", "Blue", "Green"])
# --> 3
# リストの最初の要素のインデックスは 0 から始まりますので最後の要素のインデックスは 要素の数 -1 となります。よって最後の要素のインデックスは len(リスト) -1 で取得することができます。

# >>> colorlist = ["Red", "Blue", "Green"]
# >>> print(colorlist[len(colorlist) - 1])
# Green
# >>>
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample2-1.py という名前で保存します。

# colorlist = ["Blue", "Red", "Green", "White", "Black"]

# print(colorlist)
# print("最初の要素は " + colorlist[0] + " です。")
# print("最後の要素は " + colorlist[len(colorlist) - 1] + " です。")

# インデックスを指定して要素を取得する(1)

# その後で、次のように実行してください。

# python sample2-1.py

# インデックスを指定して要素を取得する(2)

# インデックスを指定してリストの要素を取得することができました。

# -- --

# リストの要素を取得する方法について解説しました。



# 【スライスを使ってリストの指定した範囲の要素が含まれる新しいリストを取得する】
# スライスを使ってリストの指定した範囲の要素が含まれる新しいリストを取得する

# リストではスライスという機能を使うことで、開始位置のインデックスから終了位置のインデックスまでの要素を含む新しいリストを取得することができます。ここではスライス機能を使ってリストから指定した範囲の要素が含まれる新しいリストを取得する方法について解説します。

# 目次

# リストでスライス機能を使用する
# 開始インデックスまたは終了インデックスを省略する

# リストでスライス機能を使用する
# 作成済みのリストに対してスライス機能を使用すると、開始位置から終了位置までの指定した範囲にある要素を含む新しいリストを取得することができます。書式は次の通りです。

# リスト[開始インデックス:終了インデックス]

# 範囲を指定する方法ですが、範囲の最初の要素のインデックスを開始インデックスに指定し、範囲の最後の要素のインデックスに +1 した値を終了インデックスとして指定します。次の例を見て下さい。

# mylist = ["A", "B", "C", "D", "E"]

# #インデックス 1 から 3 までの要素を取得する
# mylist[1:4]
# --> ["B", "C", "D"]

# #インデックス 0 から 2 までの要素を取得する
# mylist[0:3]
# --> ["A", B", "C"]

# #インデックス 3 の要素を取得する
# mylist[3:4]
# --> ["D"]
# スライスを使うと指定した範囲の要素が含まれる新しいリストを取得することができます。要素が 1 つであってもリストとして取得しますので注意してください。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample3-1.py という名前で保存します。

# colorlist = ["Blue", "Red", "Green", "White", "Black"]

# print(colorlist[1:3])
# print(colorlist[2:3])

# リストでスライス機能を使用する(1)

# その後で、次のように実行してください。

# python sample3-1.py

# リストでスライス機能を使用する(2)

# スライスを使って作成済のリストから一部の要素が含まれる新しいリストを取得することができました。

# 開始インデックスまたは終了インデックスを省略する
# スライス機能を使用するときに、開始インデックスまたは終了インデックスを省略することができます。

# 開始インデックスを省略した場合は 0 が指定されたものとみなされます。 0 はリストの最初の要素のインデックスなので、開始インデックスを省略した場合はリストの最初の要素から指定した終了インデックスまでが範囲となります。

# mylist = ["A", "B", "C", "D", "E"]

# #インデックスの最初から 3 までの要素を取得する
# mylist[:4]
# --> ["A", B", "C", "D"]
# 終了インデックスを省略した場合は len(リスト) の値が指定されたものとみなされます。 len 関数の引数にリストを指定した場合はリストの要素数を返しますので、終了インデックスを省略した場合は指定した開始インデックスからリストの最後の要素までが範囲となります。

# mylist = ["A", "B", "C", "D", "E"]

# #インデックス 2 から最後までの要素を取得する
# mylist[2:]
# --> [C", "D", "E"]
# 開始インデックスと終了インデックスを共に省略した場合は、リストの最初の要素から最後の要素までが範囲となるので、元のリストのすべての要素が含まれる新しいリストを取得することになります。

# mylist = ["A", "B", "C", "D", "E"]

# #インデックスの最初から最後までの要素を取得する
# mylist[:]
# --> ["A", "B", "C", "D", "E"]
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample3-2.py という名前で保存します。

# colorlist = ["Blue", "Red", "Green", "White", "Black"]

# print(colorlist[:3])
# print(colorlist[2:])
# print(colorlist[:])
# 開始インデックスまたは終了インデックスを省略する(1)

# その後で、次のように実行してください。

# python sample3-2.py

# 開始インデックスまたは終了インデックスを省略する(2)

# スライスを使用する時に開始インデックスまたは終了インデックスを省略して範囲を指定しました。

# -- --

# スライス機能を使ってリストから指定した範囲の要素が含まれる新しいリストを取得する方法について解説しました。



# 【リストの長さ(要素数)を取得する】
# リストの長さ(要素数)を取得する

# 組み込み関数の len 関数を使ってリストの長さ(要素数)を取得する方法について解説します。

# 目次

# リストの長さを取得する

# リストの長さを取得する
# 組み込み関数の len 関数は引数に指定したオブジェクトの長さや要素の数を取得することができます。引数にリストを指定した場合には、リストに含まれる要素数を取得することができます。書式は次の通りです。

# len(リスト)

# 引数に指定したリストの要素数を取得します。

# len(["Red", "Green", "Blue"])
# --> 3

# len([1, 2, 3, 4, 5])
# --> 5

# len([10, 20, ["Sun", "Mon", "Fri"], 40])
# --> 4
# len 関数について詳しくは「len関数の使い方(オブジェクトの長さや要素数を取得する)」を参照されてください。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample5-1.py という名前で保存します。

# colorlist = ["Blue", "Red", "Green", "White", "Black"]

# print(colorlist)
# print("要素数は " + str(len(colorlist)) + " です。")

# リストの長さを取得する(1)

# その後で、次のように実行してください。

# python sample5-1.py

# リストの長さを取得する(2)

# len 関数を使ってリストの要素数を取得することができました。

# -- --

# 組み込み関数の len 関数を使ってリストの要素数を取得する方法について解説しました。



# 【リストの要素を入れ替える】
# リストの要素を入れ替える

# リストは作成したあとで要素を別の要素に入れ替えることができます。ここでは作成済みのリストの要素を別の値を持つ要素を入れ借る方法について解説します。

# 目次

# 特定の要素を入れ替える
# スライス機能を使って複数の要素をまとめて入れ替える
# 特定の要素を入れ替える
# リストの中の指定した要素を別の値を持つ要素と入れ替えるには、入れ替える要素のインデックスを指定して次のように要素に新しい値を代入してください。

# リスト[インデックス] = 値

# 次の例では 2 番目の要素(インデックスは 0 から始まるので 1 )の値を別の値に変更しています。

# mylist = ["Apple", "Peach", "Orange"]
# print(mylist)
# --> ['Apple', 'Peach', 'Orange']

# # 2 番目の要素を別の値と入れ替える
# mylist[1] = "Grape"
# print(mylist)
# --> ['Apple', 'Grape', 'Orange']
# リストは変更可能なオブジェクト(ミュータブル(mutable)なオブジェクト)なので、同じオブジェクトのまま要素を別の要素に入れ替えたりすることができます。その為、要素を別の値を持つ要素に変更してもオブジェクトは同じままです。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample4-1.py という名前で保存します。

# colorlist = ["Blue", "Red", "Green"]

# print(colorlist)
# print("オブジェクトの id = " + str(id(colorlist)))
# print("¥n")

# colorlist[1] = "White"
# print(colorlist)
# print("オブジェクトの id = " + str(id(colorlist)))

# 特定の要素を入れ替える(1)

# その後で、次のように実行してください。

# python sample4-1.py

# 特定の要素を入れ替える(2)

# 指定した要素を別の値を持つ要素と入れ替えることができました。また入れ替えたあともリストのオブジェクトは同じであることが確認できました。

# スライス機能を使って複数の要素をまとめて入れ替える
# スライス機能を使うことで複数の要素をまとめて入れ替えることがができます。開始インデックスと終了インデックスを指定して範囲内にある要素をまとめて入れ替えます。

# リスト[開始インデックス:終了インデックス] = リストなど

# 範囲を指定する方法ですが、範囲の最初の要素のインデックスを開始インデックスに指定し、範囲の最後の要素のインデックスに +1 した値を終了インデックスとして指定します。

# 既存の要素に置き換わる新しい要素はリストなどのイテラブルなオブジェクトを指定します。イテラブルなオブジェクトとは文字列やリスト、タプル、辞書などです。なお文字列を指定する場合、 例えば "ABC" と指定した場合は ["A", "B", "C"] のように 1 文字毎の要素として扱われます。

# 次の例では 2 番目の要素から 4 番目の要素(開始インデックスは 1 、 終了インデックスは 4 となります)を別のリストで入れ替えます。

# mylist = ["A", "B", "C", "D", "E", "F"]
# print(mylist)
# --> ["A", "B", "C", "D", "E", "F"]

# # 2 番目から 4 番目の要素を入れ替える
# mylist[1:4] = ["1", "2", "3"]
# print(mylist)
# --> ["A", "1", "2", "3", "E", "F"]
# 入れ借る要素の数と、新しい要素の数は同じでなくても構いません。多くても少なくても大丈夫です。例えば少なくした場合は、リストの要素の数が少なくなることになります。

# mylist = ["A", "B", "C", "D", "E", "F"]
# print(mylist)
# --> ["A", "B", "C", "D", "E", "F"]

# # 2 番目から 4 番目の要素を入れ替える
# mylist[1:4] = ["1", "2"]
# print(mylist)
# --> ["A", "1", "2", E", "F"]
# スライスでは開始インデックスや終了インデックスを省略した記述方法や、ステップ数を指定することもできます。(詳しくは「スライスを使って文字列の指定範囲の部分文字列を取得する」を参照されてください)。注意点としてステップ数を利用する場合は、入れ替える要素の数と新しい要素の数は同じでなくてはなりません。

# mylist = ["A", "B", "C", "D", "E", "F"]
# print(mylist)
# --> ["A", "B", "C", "D", "E", "F"]

# # 2 番目から 6 番目の要素を 2 つ毎に入れ替える
# mylist[1:7:2] = ["1", "2", "3"]
# print(mylist)
# --> ["A", "1", "C", "2", "E", "3"]
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample4-2.py という名前で保存します。

# colorlist = ["Blue", "Red", "Green", "White"]
# print(colorlist)
# colorlist[1:3] = ["Yellow", "Pink", "Black"]
# print(colorlist)
# colorlist[1:5:2] = ["Purple", "Gray", "Brown"]
# print(colorlist)

# スライス機能を使って複数の要素をまとめて入れ替える(1)

# その後で、次のように実行してください。

# python sample4-2.py

# スライス機能を使って複数の要素をまとめて入れ替える(2)

# スライス機能を使って複数の要素をまとめて別の要素と入れ替えることができました。

# -- --

# リストの要素を別の値の要素と入れ替える方法について解説しました。



# 【リストへの要素の追加と別のリストとの結合】
# リストへの要素の追加と別のリストとの結合

# 作成済みのリストへ新しい要素を追加したり、別のリストを結合(連結)する方法について解説します。要素の追加には append メソッドや extend メソッドを使用します。

# 目次

# リストに要素を追加する
# スライス機能を使って要素を追加する
# リストに別のリストなどの要素を追加する
# リストとに別のリストを結合して新しいリストを作成する
# リストの要素を指定回数繰り返した新しいリストを作成する

# リストに要素を追加する
# リストに新しい要素を追加する方法です。リスト型で利用可能な append メソッドを使用します。

# リスト.apped(値)

# 引数に指定した値を持つ要素をリストの最後に追加します。

# 具体的には次のように記述します。

# mylist = ["A", "B", "C"]
# mylist.append("D")

# print(mylist)
# --> ["A", "B", "C", "D"]

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample6-1.py という名前で保存します。

# mylist = ["Blue", "Red", "Green"]
# print(mylist)

# # "White" を追加
# mylist.append("White")
# print(mylist)

# # "Black" を追加
# mylist.append("Black")
# print(mylist)

# その後で、次のように実行してください。

# python sample6-1.py

# リストに要素を追加する(1)

# append メソッドを使ってリストの最後に要素を追加することができました。

# スライス機能を使って要素を追加する
# リストではスライス機能の開始インデックスと終了インデックスを指定してリストの指定した範囲の要素を別の要素と入れ替えることができますが、開始インデックスと終了インデックスを共にリストの最後の要素の次の位置を指定することで要素をリストの最後に追加することができます。リストの最後の要素のインデックスは、組み込み関数の len 関数を使って len(リスト) -1 として取得できるため、最後の要素の次の位置は len(リスト) で指定できます。

# リスト[len(リスト):len(リスト)] = リストなど

# イコール演算子の右に指定したリストなどをリストの最後に追加します。

# 具体的には次のように記述します。

# mylist = ["A", "B", "C"]
# mylist[len(mylist):len(mylist)] = ["D", "E"]

# print(mylist)
# --> ["A", "B", "C", "D", "E"]

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample6-2.py という名前で保存します。

# kantoulist = ["Tokyo", "Kanagawa", "Chiba", "Gunma"]
# print(kantoulist)
# addlist = ["Saitama", "Ibaraki", "Tochigi"]
# print(addlist)

# # kantoulist に addlist の要素を追加する
# kantoulist[len(kantoulist):len(kantoulist)] = addlist
# print(kantoulist)

# その後で、次のように実行してください。

# python sample6-2.py

# スライス機能を使って要素を追加する(1)

# スライス機能を使ってリストの最後に別のリストの要素を追加することができました。

# リストに別のリストなどの要素を追加する
# リストに別のリストの要素を追加する方法です。リスト型で利用可能な extend メソッドを使用します。

# リスト.extend(リストなど)

# 引数に指定したリストの要素をリストの最後に追加します。追加できるのはリストなどのイテラブルなオブジェクトを指定します。イテラブルなオブジェクトとは文字列やリスト、タプル、辞書などです。

# 具体的には次のように記述します。

# mylist = ["A", "B", "C"]
# mylist.extend(["D", "E"])

# print(mylist)
# --> ["A", "B", "C", "D", "E"]

# なお、 extend メソッドではなく append メソッドの引数に別のリストを指定した場合、別のリストの要素が追加されるのではなくリストそのものが 1 つの要素として追加されます。

# mylist = ["A", "B", "C"]
# mylist.append(["D", "E"])

# print(mylist)
# --> ["A", "B", "C", ["D", "E"]]

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample6-3.py という名前で保存します。

# eastlist = ["Tokyo", "Kanagawa", "Chiba"]
# print(eastlist)
# westlist = ["Osaka", "Nagoya", "Fukuoka"]
# print(westlist)

# # eastlist に westlist の要素を追加する
# eastlist.extend(westlist)
# print(eastlist)

# その後で、次のように実行してください。

# python sample6-3.py

# リストに別のリストなどの要素を追加する(1)

# extend メソッドを使ってリストの最後に別のリストの要素を追加することができました。

# リストとに別のリストを結合して新しいリストを作成する
# リストに対して + 演算子を使用すると、別のリストと結合して新しいリストを作成することができます。

# リストA + リストB

# 2 つのリストの要素を持つ新しいリストを作成します。

# 具体的には次のように記述します。

# list1 = ["A", "B"]
# list2 = ["C", "D"]
# list3 = list1 + list2
# print(list3)
# --> ["A", "B", "C", "D"]

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample6-4.py という名前で保存します。

# redlist = ["Orange", "Strawberry"]
# print(redlist)
# yellowlist = ["Lemon", "Banana", "Grapefruit"]
# print(yellowlist)

# # redlist と yellowlist を結合する
# fruitlist = redlist + yellowlist
# print(fruitlist)

# その後で、次のように実行してください。

# python sample6-4.py

# リストとに別のリストを結合して新しいリストを作成する(1)

# 二つのリストを結合して新しいリストを作成することができました。

# リストの要素を指定回数繰り返した新しいリストを作成する
# リストに対して * 演算子を使用すると、リストの要素を指定回数繰り返した新しいリストを作成することができます。

# リスト * 回数

# リストの要素を指定した回数繰り返した新しいリストを作成します。

# 具体的には次のように記述します。

# list = ["A", "B"]
# newlist = list * 3 print(newlist)
# --> ["A", "B", "A", "B", "A", "B"]

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample6-5.py という名前で保存します。

# baselist = ["Yes", "No"]
# print(baselist)

# datalist = baselist * 4
# print(datalist)

# その後で、次のように実行してください。

# python sample6-5.py

# リストの要素を指定回数繰り返した新しいリストを作成する(1)

# リストの要素を指定回数繰り返した新しいリストを作成することができました。

# -- --

# 作成済みのリストへ新しい要素を追加したり、別のリストを結合する方法について解説しました。



# 【リストの指定した位置へ要素を挿入する】
# リストの指定した位置へ要素を挿入する

# 作成済みのリストの指定した位置へ新しい要素を挿入する方法について解説します。要素の挿入には insert メソッドを使用します。

# 目次

# リストに要素を挿入する
# スライス機能を使って要素を挿入する

# リストに要素を挿入する
# リストの指定した位置に新しい要素を挿入する方法です。リスト型で利用可能な insert メソッドを使用します。

# リスト.insert(インデックス, 値)

# 引数に指定した値を持つ要素をリストの指定したインデックスの要素の前に挿入します。インデックスは最初の要素が 0 、次の要素が 1 と順に増えていきます。

# 具体的には次のように記述します。

# mylist = ["A", "B", "C"]
# mylist.insert(1, "Z")

# print(mylist)
# --> ["A", "Z", "B", "C"]

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample7-1.py という名前で保存します。

# mylist = ["Blue", "Red", "Green"]
# print(mylist)

# # "White" をインデックス 2 の前に挿入
# mylist.insert(2, "White")
# print(mylist)

# # "Black" を先頭に挿入
# mylist.insert(0, "Black")
# print(mylist)

# その後で、次のように実行してください。

# python sample7-1.py

# リストに要素を挿入する(1)

# insert メソッドを使ってリストの指定した位置に要素を挿入することができました。

# スライス機能を使って要素を挿入する
# リストではスライス機能の開始インデックスと終了インデックスを指定してリストの指定した範囲の要素を別の要素と入れ替えることができますが、開始インデックスと終了インデックスに共に新しい要素を挿入したい要素のインデックスを指定することで要素を指定した位置に挿入することができます。

# リスト[インデックス：インデックス] = リストなど

# イコール演算子の右に指定したリストなどをリストの指定したインデックスの要素の前に挿入します。

# 具体的には次のように記述します。

# mylist = ["A", "B", "C"]
# mylist[1:1] = ["D", "E"]

# print(mylist)
# --> ["A", "D", "E", "B", "C"]

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample7-2.py という名前で保存します。

# mylist = ["Isu", "Uma", "Ashika"]
# print(mylist)

# addlist = ["Ushi", "Inu"]
# print(addlist)

# # 別のリストををインデックス 1 の前に挿入
# mylist[1:1] = addlist
# print(mylist)
# その後で、次のように実行してください。

# python sample7-2.py

# スライス機能を使って要素を挿入する(1)

# スライス機能を使ってリストの指定した位置に別のリストの要素を挿入することができました。

# -- --

# 作成済みのリストの指定した位置へ新しい要素を挿入する方法について解説しました。



# 【リストから要素を削除する】
# リストから要素を削除する

# 作成済みのリストから指定した位置にある要素を削除したり、指定した値と同じ値を持つ要素を削除する方法について解説します。要素の削除には del 文や pop メソッドや remove メソッドを使用します。またすべての要素を削除するには clear メソッドを使用します。

# 目次

# del文を使って要素を削除する
# スライス機能を使って要素を削除する
# インデックスで指定した要素を削除する
# 指定した値と同じ値を持つ要素を削除する
# リストからすべての要素を削除する

# del文を使って要素を削除する
# del 文はインデックスを指定して取り出したリストの要素を削除します。次のように実行します。

# del リスト[インデックス]
# del リスト[開始インデックス:終了インデックス]

# インデックスを使って指定したリストの要素を、 del 文を使って削除しています。スライスを使って指定した範囲の要素をまとめて削除することもできます。

# 具体的には次のように記述します。

# mylist = ["A", "B", "C", "D", "E"]
# del mylist[1]
# print(mylist)
# --> ["A", "C", "D", "E"]
# del mylist[1:3]
# print(mylist)
# --> ["A", "E"]

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample8-1.py という名前で保存します。

# fruitslist = ["Orange", "Lemon", "Peach", "Grapes", "Apple"]
# print(fruitslist)

# # "Peach" を削除
# del fruitslist[2]
# print(fruitslist)

# # "Lemon" から "Grapes" まで削除
# del fruitslist[1:3]
# print(fruitslist)

# その後で、次のように実行してください。

# python sample8-1.py

# リストに要素を追加する(1)

# del 文を使ってリストの要素を削除することができました。

# スライス機能を使って要素を削除する
# リストではスライス機能の開始インデックスと終了インデックスを指定してリストの指定した範囲の要素を別の要素と入れ替えることができますが、入れ替える要素として空の要素を指定すると指定した範囲の要素を削除することができます。

# リスト[開始インデックス:終了インデックス] = []

# スライスを使って指定した範囲の要素を削除します。

# 具体的には次のように記述します。

# mylist = ["A", "B", "C", "D", "E"]
# mylist[2:4] = []

# print(mylist)
# --> ["A", "B", "E"]

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample8-2.py という名前で保存します。

# numlist = ["One", "Two", "Three", "Four", "Five"]
# print(numlist)

# # "Three" を削除
# numlist[2:3] = []
# print(numlist)

# # "Two" から "Four" まで削除
# numlist[1:3] = []
# print(numlist)

# その後で、次のように実行してください。

# python sample8-2.py

# スライス機能を使って要素を削除する(1)

# スライス機能を使ってリストの最後に別のリストの要素を追加することができました。

# インデックスで指定した要素を削除する
# リストからインデックスで指定した要素を削除する方法です。リスト型で利用可能な pop メソッドを使用します。

# リスト.pop()
# リスト.pop(インデックス)

# pop メソッドは引数に指定したインデックスの要素を取得した上でリストから削除します。インデックスが省略された場合にはリストの最後の要素が削除されます。

# 具体的には次のように記述します。

# mylist = ["A", "B", "C", "D", "E"]
# mylist.pop()

# print(mylist)
# --> ["A", "B", "C", "D"]

# mylist.pop(1)

# print(mylist)
# --> ["A", "C", "D"]
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample8-3.py という名前で保存します。

# fruitslist = ["Orange", "Lemon", "Peach", "Grapes", "Apple"]
# print(fruitslist)

# # 最後の要素を取得して削除
# print("最後の要素 ", fruitslist.pop(), "を削除")
# print(fruitslist)

# # "Grapes" を取得して削除
# print("最後の要素 ", fruitslist.pop(), "を削除")
# print(fruitslist)

# # "Lemon" を取得して削除
# print("1 番の要素 ", fruitslist.pop(1), "を削除")
# print(fruitslist)

# その後で、次のように実行してください。

# python sample8-3.py

# インデックスで指定した要素を削除する(1)

# インデックスを使って指定した要素を取得した上で削除することができました。

# 指定した値と同じ値を持つ要素を削除する
# 指定した値と同じ値を持つ要素をリストから削除する方法です。リスト型で利用可能な remove メソッドを使用します。

# リスト.remove(値)

# 引数に指定した値と同じ値を持つ要素(オブジェクトは異なって構いません)を削除します。リストの複数の要素で一致する場合には最初に一致した要素を削除します。

# 具体的には次のように記述します。

# mylist = ["A", "B", "C", "D", "E"]
# mylist.remove("C")

# print(mylist)
# --> ["A", "B", "D", "E"]

# mylist.remove("B")

# print(mylist)
# --> ["A", "D", "E"]
# なお remove メソッドの引数に指定した値と一致する要素が見つからなかった場合には ValueError エラーが発生します。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample8-4.py という名前で保存します。

# animallist = ["Dog", "Cat", "Monkey", "Bear", "Rabbit"]
# print(animallist)

# # "Monkey"の要素を削除
# animallist.remove("Monkey")
# print(animallist)

# # "Rabbit"の要素を削除
# animallist.remove("Rabbit")
# print(animallist)
# その後で、次のように実行してください。

# python sample8-4.py

# 指定した値と同じ値を持つ要素を削除する(1)

# 指定した値と同じ値を持つ要素をリストから削除することができました。

# リストからすべての要素を削除する
# リストからすべての要素を削除する方法です。リスト型で利用可能な clear メソッドを使用します。

# リスト.clear()

# リストからすべての要素を削除します。

# 具体的には次のように記述します。

# mylist = ["A", "B", "C", "D", "E"]
# mylist.clear()

# print(mylist)
# --> []
# なおこのページの「スライス機能を使って要素を削除する」でご説明した方法で、リストの最初の要素から最後の要素までを範囲として指定した場合もリストからすべての要素を削除することができます。スライスを使ってリストの全ての要素を指定するには、開始インデックと終了インデックスをどちらも省略して次のように行います。

# リスト[:] = []

# リストからすべての要素を削除します。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample8-5.py という名前で保存します。

# colorlist = ["Blue", "Red", "Green"]
# print(colorlist)

# colorlist.clear()
# print(colorlist)

# その後で、次のように実行してください。

# python sample8-5.py

# リストからすべての要素を削除する(1)

# リストからすべての要素を削除することができました。

# -- --

# 作成済みのリストから指定した位置にある要素を削除したり、指定した値と同じ値を持つ要素を削除する方法について解説しました。



# 【リストに指定した値と同じ要素が含まれているか確認する】
# リストに指定した値と同じ要素が含まれているか確認する

# 作成済みのリストに指定した値と同じ要素が含まれているかどうか、含まれている場合の要素の数や要素のインデックスを取得する方法について解説します。要素が含まれているかどうかの確認には in 演算子、要素の数を確認するには count メソッド、インデックスを確認するには index メソッドを使用します。

# 目次

# 指定の値と同じ値を持つ要素が含まれているか確認する
# 指定の値と同じ要素がリストに何個含まれているか取得する
# 指定の値と同じ値を持つ要素のインデックスを取得する

# 指定の値と同じ値を持つ要素が含まれているか確認する
# 指定の値を持つ要素がリストの中に含まれているかどうかを確認するには in 演算子を使用します。

# 値 in リスト

# リストの要素の中で指定した値と同じ値を持つ要素があった場合には式は True となります。なかった場合には False となります。

# 具体的には次のように記述します。

# >>> mylist = ["A", "B", "C", "D", "E"]
# >>> print("B" in mylist)
# True
# >>> print("G" in mylist)
# False
# >>>
# なお in 演算子のかわりに not in 演算子を使うと、指定した値と同じ値があった場合に False 、なかった場合に True となります。

# 指定の値と同じ要素がリストに何個含まれているか取得する
# 指定の値と同じ値を持つ要素がリストに何個含まれているか取得する方法です。リスト型で利用可能な count メソッドを使用します。

# リスト.count(値)

# 引数に指定した値と同じ値を持つ要素の数を返します。見つからなかった場合は 0 を返します。

# 具体的には次のように記述します。

# >>> mylist = ["A", "B", "A", "A", "C"]
# >>> print(mylist.count("A"))
# 3
# >>> print(mylist.count("B"))
# 1
# >>> print(mylist.count("D"))
# 0
# >>>
# 指定の値と同じ値を持つ要素のインデックスを取得する
# 指定の値と同じ値を持つ要素がリストに含まれている場合に、その要素のインデックスを取得する方法です。リスト型で利用可能な index メソッドを使用します。

# リスト.index(値)

# 引数に指定した値と同じ値を持つ要素が見つかった場合に、その要素のインデックスを返します。複数見つかった場合には最初の要素のインデックスを返します。

# 具体的には次のように記述します。

# >>> mylist = ["A", "B", "A", "A", "C"]
# >>> print(mylist.index("A"))
# 0
# >>> print(mylist.index("B"))
# 1
# >>> print(mylist.index("C"))
# 4
# >>>
# なお見つからなかった場合は ValueError エラーとなりますので注意してください。

# >>> mylist = ["A", "B", "A", "A", "C"]
# >>> print(mylist.index("D"))
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# ValueError: 'D' is not in list
# >>>
# -- --

# 作成済みのリストに指定した値と同じ要素が含まれているかどうか、含まれている場合の要素の数や要素のインデックスを取得する方法について解説しました。



# 【リストの要素を昇順または降順に並び替える】
# リストの要素を昇順または降順に並び替える

# 作成済みのリストに含まれる要素を、要素の値を使って昇順または降順に並び替える方法について解説します。並び替えには sorted 関数、または sort メソッドを使用します。また並び替えを行う前に別の指定した関数を呼び出し、比較する値を変換してから並び替えを行う方法も解説します。

# 目次

# 要素を並び替える
# 要素の値のデータ型が異なっていた場合
# 並べ替えるときの昇順と降順を切り替える
# 要素の値を他の関数に渡して帰ってきた値を使って並び替える

# 要素を並び替える
# 要素を並び替えるには組み込み関数の sorted 関数を使用します。書式は次のとおりです。

# newlist = sorted(iterable, *, key=None, reverse=False)

# 1 番目の引数以外は省略可能となっており、基本となる使い方は次のようになります。

# newlist = sorted(iterable)

# 1 番目の引数に指定したイテラブルなオブジェクト(文字列やリスト、タプル、辞書などです)の要素を並び替え、新しいオブジェクトとして返します。並べ替える前のオブジェクトはそのままで、並べ替えた結果を新しいリスト型のオブジェクトとして返してくれます。

# 並び替えは要素の値を < 演算子を使って比較して並び替えが行われます。あとで試しますが、リストの要素に数値や文字列が混在している場合、比較を行えず TypeError エラーが発生します。

# 具体的には次のように記述します。

# mylist = ["C", "A", "B"]
# newlist = sorted(mylist)

# print(mylist)
# --> ["C", "A", "B"]
# print(newlist)
# --> ["A", "B", "C"]
# また対象がリストの場合には、 sort メソッドが用意されています。

# リスト.sort(*, key=None, reverse=False)

# こちらも引数はオプションです。基本となる使い方は次のようになります。

# リスト.sort()

# 並び替えるという点では同じですが、sort メソッドの場合は同じオブジェクトのまま要素を並び替えます。

# 具体的には次のように記述します。

# mylist = ["C", "A", "B"]
# mylist.sort()

# print(mylist)
# --> ["A", "B", "C"]
# 並び替える前のリストオブジェクトが必要であれば sorted 関数を使い、必要なければどちらでも構わないかと思います。このページでは sorted 関数の方で試していきます。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample11-1.py という名前で保存します。

# numlist = [84, 75, 92, 90, 78]

# newnumlist = sorted(numlist)
# print("Before:", numlist)
# print("After:", newnumlist)

# colorlist = ["Blue", "Red", "Green", "White", "Black"]

# newcolorlist = sorted(colorlist)
# print("Before:", colorlist)
# print("After:", newcolorlist)

# その後で、次のように実行してください。

# python sample11-1.py

# 要素を並び替える(1)

# sorted 関数を使ってリストの要素を並び替えることができました。

# 要素の値のデータ型が異なっていた場合
# リストの要素にはそれぞれ異なるデータ型の値を持つことができますが、並び替えを行う場合は要素の値を > 演算子で比較するため、比較できるかどうかは > 演算子で比較が許されているかどうかによります。

# 例えば要素の値のデータ型が異なっていても整数と浮動小数点数などであれば並び替えは行えます。

# >>> numlist = [5, 3.14, 4.78, 4]
# >>> sorted(numlist)
# [3.14, 4, 4.78, 5]
# >>>
# ただ要素の値が数値と文字列が混在している場合などは並び替えを行うと TypeError エラーが発生します。

# >>> mylist = ["80", 75, 45, "68"]
# >>> sorted(mylist)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# TypeError: '<' not supported between instances of 'int' and 'str'
# >>>
# 並べ替えるときの昇順と降順を切り替える
# sorted 関数を使う場合も sort メソッドを使う場合もデフォルトでは昇順で並び替えが行われます。降順で並び替えをする場合は、次のように実行してください。

# newlist = sorted(iterable, reverse=True)

# 引数に reverse=True を指定して sorted 関数を実行します。

# 具体的には次のように記述します。

# mylist = ["C", "A", "B"]
# newlist = sorted(mylist, reverse=True)

# print(mylist)
# --> ["C", "A", "B"]
# print(newlist)
# --> ["C", "B", "A"]
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample11-2.py という名前で保存します。

# colorlist = ["Blue", "Red", "Green", "White", "Black"]

# upcolorlist = sorted(colorlist)
# downcolorlist = sorted(colorlist, reverse=True)
# print("Original:", colorlist)
# print("ASC:", upcolorlist)
# print("DESC:", downcolorlist)

# その後で、次のように実行してください。

# python sample11-2.py

# 並べ替えるときの昇順と降順を切り替える(1)

# sorted 関数を使ってリストの要素を昇順と降順でそれぞれ並び替えることができました。

# 要素の値を他の関数に渡して帰ってきた値を使って並び替える
# 並び替えを行うときに、要素の値をそのまま使って比較するのではなく、一度指定した関数に要素の値を渡して帰ってきた値を使って比較するようにするには、次のように実行してください。

# newlist = sorted(iterable, key=関数名)

# 指定できる関数は、 1 つの引数を取る関数を指定してください。

# 例えば絶対値を取ってから並び替えを行いたいのであれば、組み込み関数の abs 関数を指定します。

# mylist = [5, -4, -7, 6]

# sorted(mylist)
# --> [-7, -4, 5, 6]

# sorted(mylist, key=abs)
# --> [-4, 5, 6, -7]
# 要素の値に対してそれぞれ絶対値を取った値を基準に並び替えを行います。

# 例えば文字列の長さを使って並び替えを行いたいのであれば、組み込み関数の len 関数を指定します。

# mylist = ["apple", "pen", "desk", "banana"]

# sorted(mylist)
# --> ['apple', 'banana', 'desk', 'pen']

# sorted(mylist, key=len)
# --> ['pen', 'desk', 'apple', 'banana']
# 要素の値に対してそれぞれ文字の長さを取得し、長さを基準に並び替えを行います。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample11-3.py という名前で保存します。

# animallist = ["Cat", "monkey", "bear", "Sheep", "cow"]

# sortlist = sorted(animallist)
# lowersortlist = sorted(animallist, key=str.lower)
# print(animallist)
# print(sortlist)
# print(lowersortlist)

# その後で、次のように実行してください。

# python sample11-3.py

# 要素の値を他の関数に渡して帰ってきた値を使って並び替える(1)

# 今回は引数に指定する関数として文字列型の str.lower() メソッドを指定しました。文字列をすべて小文字に変換してから比較し並び替えを行っています。

# -- --

# 作成済みのリストに含まれる要素を、要素の値を使って昇順または降順に並び替える方法について解説しました。



# 【文字列、タプル、rangeなどからリストを作成する】
# 文字列、タプル、rangeなどからリストを作成する

# 文字列やタプル、rangeなど他のオブジェクトからリストを作成する方法を解説します。

# 目次

# イテラブルなオブジェクトからリストを作成する
# イテラブルなオブジェクトからリストを作成する
# リスト型のコンストラクタには引数にイテラブルなオブジェクトを指定してリストのオブジェクトを作成するものがあります。

# class list([iterable])

# イテラブルなオブジェクトとはリストやタプル、文字列、辞書などです。

# 別のリストからリストを作成する
# 最初に別のリストを引数に指定してリストオブジェクトを作成してみます。

# >>> mylist = ["A", "B", "C"]
# >>> newlist = list(mylist);
# >>> print(newlist)
# ['A', 'B', 'C']
# >>>
# 引数に指定したリストと同じ要素を持つリストが作成されました。なおリストのコピーが作成されるため、 2 つのリストは別々のオブジェクトとなります。

# 文字列からリストを作成する
# 次に文字列を引数に指定してリストオブジェクトを作成してみます。

# >>> mylist = list("Hello Python")
# >>> print(mylist)
# ['H', 'e', 'l', 'l', 'o', ' ', 'P', 'y', 't', 'h', 'o', 'n']
# >>>
# 引数に指定した文字列の 1 文字毎に 1 つの要素とした新しいリストが作成されました。

# タプルからリストを作成する
# 次にタプルを引数に指定してリストオブジェクトを作成してみます。

# >>> mylist = list(("A", "B", "C"))
# >>> print(mylist)
# ['A', 'B', 'C']
# >>>
# 引数に指定したタプルの要素をコピーした新しいリストが作成されました。

# rangeからリストを作成する
# range 型はコンストラクタで引数に指定した開始数から終了数までの連続した数値を持つオブジェクトです。

# class range(stop)
# class range(start, stop[, step])

# start から stop までの連続した数値を要素として持ちます。 start を省略した場合は 0 が開始数です。

# ※ range 型について詳しくは「range関数の使い方(開始から終了までの連続した数値を要素として持つrange型オブジェクトを作成する)」を参照されてください。

# range 型のオブジェクトを引数に指定してリストオブジェクトを作成してみます。

# >>> mylist = list(range(10))
# >>> print(mylist)
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# >>>
# 0 から 9 までの連続した数値を要素として持つリストを作成することができました。

# -- --

# 文字列やタプル、 range など他のオブジェクトからリストを作成する方法を解説しました。



# 【多次元リストの作成と要素の取得】
# 多次元リストの作成と要素の取得

# リストでは要素として別のリストを代入することができます。このようなリストの中にリストが入ったものを多次元リスト(または多重リスト)と呼びます。ここでは多次元リストの作成方法と要素を取得する方法について解説します。

# 目次

# 多次元リストを作成する
# 多次元リストから要素を取り出す

# 多次元リストを作成する
# 多次元リストを作成する手順は通常のリストと変わりがありません。要素に対して値としてリストを指定するだけです。

# [要素1, 要素2, ...]

# 例えば 1 番目の要素として ["Yamada", 25]、 2 番目の要素として ["Suzuki", 38]、 3 番目の要素として ["Tanaka", 28] を持つリストは次のように記述します。

# [["Yamada", 25], ["Suzuki", 38], ["Tanaka", 28]]
# このようにリストの中にリストが含まているものを多次元リストまたは多重リストなどと呼びます。

# 多次元リストから要素を取り出す
# リストの要素には別のリストが代入されているので、インデックスを指定して要素を取得するとそれぞれの要素に代入されているリストを取得することになります。

# stafflist = [["Yamada", 25], ["Suzuki", 38], ["Tanaka", 28]]

# print(stafflist[0])
# --> ["Yamada", 25]

# print(stafflist[1])
# --> ["Suzuki", 38]

# print(stafflist[2])
# --> ["Tanaka", 28]]
# インデックスを指定して取り出したリストに含まれるそれぞれの要素はさらにインデックスを指定することで取得することができます。

# リスト名[リストのインデックス][要素として代入されていたリストのインデックス]

# 具体的には次のように記述します。

# stafflist = [["Yamada", 25], ["Suzuki", 38], ["Tanaka", 28]]

# print(stafflist[0][0])
# --> "Yamada"
# print(stafflist[0][1])
# --> 25

# print(stafflist[1][0])
# --> "Suzuki"
# print(stafflist[1][1])
# --> 38

# print(stafflist[2][0])
# --> "Tanaka"
# print(stafflist[2][1])
# --> 28
# リストは配列のように使うことができますが。多次元リストは多次元配列のように使用することができます。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample15-1.py という名前で保存します。

# stafflist = [["Yamada", 25], ["Suzuki", 38], ["Tanaka", 28]]

# for p in [0, 1, 2]
#     for m in [0, 1]
#         print(stafflist[p][m])
# 多次元リストから要素を取り出す(1)

# その後で、次のように実行してください。

# python sample15-1.py

# 多次元リストから要素を取り出す(2)

# 多次元リストから for 文を使って要素を順番に取り出して出力することができました。

# -- --

# 多次元リストの作成方法と要素を取得する方法について解説しました。



# 【リスト内包表記を使ったリストの作成】
# リスト内包表記を使ったリストの作成

# リストを作成する時の方法の一つであるリスト内包表記の使い方について解説します。内包表記はうまく使用することでプログラムを簡潔に記述することができます。

# 目次

# リスト内包表記の使い方
# 条件式を加えたリスト内包表記

# リスト内包表記の使い方
# リスト内包表記は次のような書式を使用します。

# [式 for 変数 in イテラブルオブジェクト]

# リストの中に for 文が組み込まれているような書式となっています。

# 例えば具体的な使い方として数値の 1 から 5 までの連続した値を要素に持つリストを作成する場合で考えてみます。要素を直接指定する方法や、空のリストを作成したあとで for 文を使って要素を追加する方法、リストのコンストラクタに range オブジェクトを指定してリストを作成する方法などがあります。

# mylist = [1, 2, 3, 4, 5]
# max = 5
# mylist = []
# for i in range(1, max + 1):
#     mylist.append(i)
# max = 5	
# mylist = list(range(1, max + 1))
# これに対してリスト内包表記を使用した場合には次のように記述することができます。

# max = 5
# mylist = [i for i in range(1, max + 1)]
# リストに含まれる要素を直接プログラムに記述できる場合は直接書いてもいいですが、プログラム内で 1 から max までの連続した要素を持つリストを作成しなければならないような場合は他の方法を使う必要があります。リスト内包表記を使った方法はプログラムを簡潔に記述できるだけでなく、他の方法と比べて高速に動作すると言われています。

# リスト内包表記では range オブジェクトなどのイテラブルオブジェクトから順に要素を取り出し、変数に代入します。そしてその変数を使った式の値をリストの要素として追加します。式には変数の値に対して演算などを行ったものを記述することができます。

# >>> mylist = [i for i in range(1, 6)]
# >>> print(mylist)
# [1, 2, 3, 4, 5]
# >>>
# >>> mylist = [i * 10 for i in range(1, 6)]
# >>> print(mylist)
# [10, 20, 30, 40, 50]
# >>>
# 最初のリストではイテラブルオブジェクトの要素をそのままリストの要素にしています。二番目のリストではイテラブルオブジェクトから取り出した要素に 10 を乗算した値をリストの要素にしています。これは次のように書いた場合と同じです。

# >>> mylist = []
# >>> for i in range(1, 6):
# ...     mylist.append(i * 10)
# ...
# >>> print(mylist)
# [10, 20, 30, 40, 50]
# >>>
# リスト内包表記は独特な記述方法のため慣れていないと使いにくいですが、簡潔に記述でき速度の点でもメリットがあると言われているので他の方のプログラムでも見る機会がい多いので、是非使い方は覚えておいてください。

# 条件式を加えたリスト内包表記
# リスト内包表記では条件式を加えて条件式が真となった場合だけリストに要素として追加することができます。書式は次の通りです。

# [式 for 変数 in イテラブルオブジェクト if 条件式]

# イテラブルオブジェクトから要素を取り出し変数に代入したあと、条件式が真となった場合に式の値をリストの要素として追加します。

# 次の例ではイテラブルオブジェクトから取り出した要素の値が 3 の倍数だった場合だけリストに要素として追加しています。

# >>> mylist = [i for i in range(1, 20) if i % 3 == 0]
# >>> print(mylist)
# [3, 6, 9, 12, 15, 18]
# >>>
# これは次のように書いた場合と同じです。

# >>> mylist = []
# >>> for i in range(1, 20):
# ...     if i % 3 == 0:
# ...         mylist.append(i)
# ...
# >>> print(mylist)
# [3, 6, 9, 12, 15, 18]
# >>>
# このように条件式が必要となる場合でもリスト内包表記を使ってリストオブジェクトを作成することができます。

# -- --

# リストを作成する時の方法の一つであるリスト内包表記の使い方について解説しました。



# 【多重ループを使ったリストの作成をリスト内包表記で行う】
# 多重ループを使ったリストの作成をリスト内包表記で行う

# 二重や三重の多重ループを使ったリストの作成をリスト内包表記を使って行う方法や二次元配列のようなリストをリスト内包表記を使って行う方法について解説します。リスト内包表記の基本的な使い方については「リスト内包表記を使ったリストの作成」を参照されてください。

# 目次

# リスト内包表記による多重ループの記述方法
# リスト内包表記による二次元配列の記述方法
# リスト内包表記による多重ループの記述方法
# リスト内包表記は次のような書式を使用しました。

# >>> mylist = [i for i in range(1, 6)]
# >>> print(mylist)
# [1, 2, 3, 4, 5]
# >>>
# これは for 文を使って次のように記述した場合と同じです。

# >>> mylist = []
# >>> for i in range(1, 6):
# ...     mylist.append(i)
# ...
# >>> print(mylist)
# [1, 2, 3, 4, 5]
# >>>
# 上記は一重のループでリストを作成しました。それでは二重ループを使って次のようにリストを作成したい場合を考えてみます。

# >>> mylist = []
# >>> for i in range(1, 4):
# ...     for j in range(1, 3):
# ...         mylist.append(i * 10 + j)
# ...
# >>> print(mylist)
# [11, 12, 21, 22, 31, 32]
# >>>
# このような二重ループを使ったリストの作成をリスト内包表記を使って行う場合は次のように記述します。

# >>> mylist = [i * 10 + j for i in range(1, 4) for j in range(1, 3)]
# >>> print(mylist)
# [11, 12, 21, 22, 31, 32]
# >>>
# 最初の for 文でイテラブルオブジェクトから 1 つ要素を取り出したあと、次の for 文でイテラブルオブジェクトから要素を順に取り出し、式として指定した i * 10 + j に代入して要素をとして追加します。 2 つ目の for 文でイテラブルオブジェクトから要素をすべて取り出したら最初の for 文に戻り次の要素を取り出します。そして次の for 文でイテラブルオブジェクトから要素を順に取り出します。

# 同じように三重以上のループでもリスト内包表記を使って同じように記述することができます。

# >>> mylist = [i * 100 + j * 10 + k for i in range(1, 4) ¥
# ... for j in range(1, 3) for k in range(1, 3)]
# >>> print(mylist)
# [111, 112, 121, 122, 211, 212, 221, 222, 311, 312, 321, 322]
# >>>
# ※ リスト内包表記の部分が長いので改行しています。

# リスト内包表記による二次元配列の記述方法
# リスト内包表記を使って二次元配列のようなリストを作成することもできます。例として次のような二次元配列のリストを作成したい場合を考えてみます。

# >>> mylist = []
# >>> for i in range(1, 4):
# ...     sublist = []
# ...     for j in range(1,3):
# ...         sublist.append(i * 10 + j)
# ...     mylist.append(sublist)
# ...
# >>> print(mylist)
# [[11, 12], [21, 22], [31, 32]]
# >>>
# このような二次元配列のようなリストの作成をリスト内包表記を使って行う場合は次のように記述します。

# >>> mylist = [[i * 10 + j for j in range(1, 3)] for i in range(1, 4)]
# >>> print(mylist)
# [[11, 12], [21, 22], [31, 32]]
# >>>
# 今回の場合は内部のリスト内包表記を使って作成したリストオブジェクトを外側のリスト内包表記で要素として追加する形になります。

# -- --

# 多重ループを使ったリストの作成をリスト内包表記を使って行う方法や二次元配列のようなリストをリスト内包表記を使って行う方法について解説しました。
