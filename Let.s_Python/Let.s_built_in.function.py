# https://www.javadrive.jp/python/
# 【組み込み関数の使い方】

# print関数の使い方(文字列を出力する)
# str関数の使い方(文字列に変換する)
# int関数/float関数の使い方(文字列を数値に変換する)
# len関数の使い方(オブジェクトの長さや要素数を取得する)
# bool関数の使い方(オブジェクトが真か偽か判定する)
# range関数の使い方(開始から終了までの連続した数値を要素として持つrange型オブジェクトを作成する)
# isinstance関数およびtype関数の使い方(オブジェクトのデータ型を判定する、オブジェクトの型を取得する)



# 【print関数の使い方(文字列を出力する)】
# print関数の使い方(文字列を出力する)

# Python で用意されている組み込み関数の中の print 関数の使い方です。引数に指定した文字列を標準出力などへ出力するのに使用します。

# 目次

# print関数の書式と基本的な使い方
# 区切り文字を変更する
# print関数を実行した時に改行しないようにする
# ファイルへ出力する

# print関数の書式と基本的な使い方
# print 関数の書式は次の通りです。

# print(*objects, sep=' ', end='¥n', file=sys.stdout, flush=False)

# 一番基本的な使い方は引数に文字列を指定して実行します。標準出力に対して引数に指定した文字列が出力されます。この時、デフォルトの設定では最後に改行が出力されます。

# print("Hello")

# 引数に文字列ではない数値などを指定した場合、 str 関数によって文字列に変換されて出力されます。

# print(100)

# 引数にはカンマで区切り複数の文字列を指定することができます。

# print("Blue", "Red", "Green")

# デフォルトの設定では空白で区切られて出力されます。上記の場合は Blue Red Green のように出力されます。

# サンプルプログラム
# 簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample1-1.py という名前で保存します。

# print("Hello")
# print(256)
# print("Blue", "Red", "Green")

# print関数の書式と基本的な使い方(1)

# その後、次のように実行してください。

# python sample1-1.py

# print関数の書式と基本的な使い方(2)

# 引数に指定した文字列や数値が画面に出力されました。それぞれの print 関数を実行すると最後に改行がされています。

# 区切り文字を変更する
# 引数にカンマで区切り複数の文字列を指定した場合、デフォルトの設定では空白で区切られて出力されます。空白ではなく別の区切り文字に変更したり区切り文字を無くして続けて出力したい場合には sep="区切り文字" で指定します。

# print(*objects, sep='区切り文字')

# 使い方は次の通りです。

# デフォルトの設定：
# print("Blue", "Red", "Green")
# Blue Red Green

# 区切り文字を "+" に変更
# print("Blue", "Red", "Green", sep="+")
# Blue+Red+Green

# 区切り文字を無くして続けて出力
# print("Blue", "Red", "Green", sep="")
# BlueRedGreen
# サンプルプログラム
# 簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample1-2.py という名前で保存します。

# print("Blue", "Red", "Green")
# print("Blue", "Red", "Green", sep="+")
# print("Blue", "Red", "Green", sep="")

# 区切り文字を変更する(1)

# その後、次のように実行してください。

# python sample1-2.py

# 区切り文字を変更する(2)

# 複数の文字列をカンマで区切って引数に指定した場合に、区切り文字を任意の文字に変更することができました。

# print関数を実行した時に改行しないようにする
# print 関数を実行すると、自動で改行が行われます。これはデフォルトの設定で最後に自動で改行を出力するように設定されているためです。 print 関数を実行した時に最後に改行をしないようにするには end='' と指定します。

# print(*objects, end='')

# end には最後に出力する文字列を指定できます。デフォルトでは end='¥n' となっており改行が行われますので改行を行いたくない場合は空の文字列を指定してください。なお改行以外の別の文字列を指定することもできます。

# 使い方は次の通りです。

# デフォルトの設定：
# print("Hello")
# print("Python")
# Hello
# Python

# 改行しないように設定：
# print("Hello", end="")
# print("Python")
# HelloPython

# 最後に任意の文字列を出力するように設定
# print("Hello", end="[end]¥n")
# print("Python", end="[last]")
# Hello[end]
# Python[last]
# サンプルプログラム
# 簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample1-3.py という名前で保存します。

# print("Hello ", end="")
# print("buzz, ", end="")
# print("How are you?", end="[end]¥n")

# print関数を実行した時に改行しないようにする(1)

# その後、次のように実行してください。

# python sample1-3.py

# print関数を実行した時に改行しないようにする(2)

# print 関数を実行した時に改行しないようにしたり、任意の文字列を最後に出力したりすることができました。

# ファイルへ出力する
# print 関数はデフォルトでは標準出力である画面に対して出力されますが、画面ではなくファイルに対して出力することもできます。

# print(*objects, file=sys.stdout)

# 出力先である file 引数は、 write(string) メソッドを持つオブジェクトでなければなりません。例えばファイルに対して出力する場合は次のように行います。

# myfile = open("output.txt", "w")
# print("Hello", file=myfile)
# myfile.close()
# サンプルプログラム
# 簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample1-4.py という名前で保存します。

# myfile = open("output1_4.txt", "w")
# print("Hello", file=myfile)
# print("Bye", file=myfile)
# myfile.close()

# ファイルへ出力する(1)

# その後、次のように実行してください。

# python sample1-4.py

# ファイルへ出力する(2)

# 今回は標準出力である画面には何も出力されていません。それではプログラムが保存されたディレクトリを見てください。 output1_4.txt というファイルが作成されています。

# ファイルへ出力する(3)

# ファイルをテキストエディタで開いてみると、 print 関数で出力された文字列がファイルに保存されていることが確認できます。

# ファイルへ出力する(4)

# -- --

# Python の組み込み関数の一つである print 関数の使い方について解説しました。



# 【str関数の使い方(文字列に変換する)】
# str関数の使い方(文字列に変換する)

# Python で用意されている組み込み関数の中の str 関数の使い方です。引数に指定したオブジェクトを文字列に変換して取得します。

# 目次

# str関数の書式と基本的な使い方

# str関数の書式と基本的な使い方
# str 関数は引数に指定したオブジェクトを文字列にして取得します。 str 関数の書式は次の通りです。

# class str(object='')

# 引数には数値やリスト、タプルなどのオブジェクトを指定できます。

# str(100)
# str([10, 20, 30])
# str(True)

# 数値を文字列と連結したい場合などに数値から文字列を取得する場合などに使用します。

# サンプルプログラム
# 簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample2-1.py という名前で保存します。

# print("My age is " + str(100))
# print(str([10, 20, 30]))
# print(str(True))

# str関数の書式と基本的な使い方(1)

# その後、次のように実行してください。

# python sample2-1.py

# str関数の書式と基本的な使い方(2)

# 引数に指定した数値などのオブジェクトを文字列に変換して取得することができました。

# -- --

# Python の組み込み関数の一つである str 関数の使い方について解説しました。



# 【int関数/float関数の使い方(文字列を数値に変換する)】
# int関数/float関数の使い方(文字列を数値に変換する)

# Python で用意されている組み込み関数の中の int 関数および float 関数の使い方です。引数に指定したオブジェクトを数値に変換して取得します。

# 目次

# int関数の書式と基本的な使い方
# float関数の書式と基本的な使い方

# int関数の書式と基本的な使い方
# int 関数は引数に指定した数値または文字列を整数に変換して取得します。 int 関数の書式は次の通りです。

# class int([x])
# class int(x, base=10)

# 1 番目の書式では、引数に指定した数値または文字列を整数として取得します。整数が指定された場合はそのままの値が返され、浮動小数点数が指定された場合は 0 に近い値に丸められて整数として取得します。引数を省略した場合は 0 が返ります。

# int(15)
# 15

# int(3.14)
# 3

# int()
# 0
# 引数に文字列を指定した場合は、文字列を整数に変換して取得します。文字列で指定できる値は整数の形式の文字列だけです。基数を省略した場合は 1 番目の引数の値が 10 進数として記載されたものとして整数に変換し、基数が指定された場合は 1番目の引数の値が 2 番目で指定された基数で記載されたものとして整数に変換します。基数として指定できる値は 0 か 2 から 36 です。

# int('28')
# 28

# int("28", 10)
# 28

# int("1011", 2)
# 11

# int("3F", 16)
# 63
# 基数の指定は数値だけを指定してもいいですし、 base=基数 の形式で記載してもいいです。

# int("24", base=8)
# 20
# サンプルプログラム
# 簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample3-1.py という名前で保存します。

# print(int(17.58))
# print(int("1011", 2))
# print(int("A4", base=16))

# int関数の書式と基本的な使い方(1)

# その後、次のように実行してください。

# python sample3-1.py

# int関数の書式と基本的な使い方(2)

# 引数に指定した数値や文字列から整数を取得することができました。

# float関数の書式と基本的な使い方
# float 関数は引数に指定した数値または文字列を浮動小数点数に変換して取得します。 float 関数の書式は次の通りです。

# class float([x])

# 引数に指定した数値または文字列を浮動小数点数として取得します。整数または浮動小数点数が指定された場合は同じ値の浮動小数点数が返されます。文字列を指定する場合は 10 進数の値が含まれる文字列を指定してください。引数を省略した場合は 0.0 が返ります。

# float(15)
# 15.0

# float(3.14)
# 3.14

# float()
# 0.0

# float("5.755")
# 5.755
# 数値または文字列のどちらもでも指数表記での指定も可能です。

# float("8.5e+5")
# 850000.0

# float("2.34e-4")
# 0.000234
# サンプルプログラム
# 簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample3-2.py という名前で保存します。

# print(float(19))
# print(float("78.225"))
# print(float("-7.52e-3"))

# float関数の書式と基本的な使い方(1)

# その後、次のように実行してください。

# python sample3-2.py

# float関数の書式と基本的な使い方(2)

# 引数に指定した数値や文字列から浮動小数点数を取得することができました。

# -- --

# Python の組み込み関数の一つである int 関数および float 関数の使い方について解説しました。



# 【len関数の使い方(オブジェクトの長さや要素数を取得する)】
# len関数の使い方(オブジェクトの長さや要素数を取得する)

# Python で用意されている組み込み関数の中の len 関数の使い方です。引数に指定したオブジェクトの長さや要素数を取得します。

# 目次

# len関数の書式と基本的な使い方

# len関数の書式と基本的な使い方
# len 関数は引数に指定したオブジェクトの長さや要素の数を取得します。 len 関数の書式は次の通りです。

# len(s)

# 引数には文字列やバイト列、リスト、タプル、辞書などのオブジェクトを指定できます。

# len("Hello")
# 5

# len(["red", "blue", "green"])
# 3

# len({"s":150, "m":160, "l":170, "xl":180})
# 4
# サンプルプログラム
# 簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample4-1.py という名前で保存します。

# print(len("Hello"))
# print(len(["red", "blue", "green"]))
# print(len({"s":150, "m":160, "l":170, "xl":180}))

# len関数の書式と基本的な使い方(1)

# その後、次のように実行してください。

# python sample4-1.py

# len関数の書式と基本的な使い方(2)

# 引数に指定したオブジェクトの長さや要素の数を取得することができました。

# -- --

# Python の組み込み関数の一つである len 関数の使い方について解説しました。



# 【bool関数の使い方(オブジェクトが真か偽か判定する)】
# bool関数の使い方(オブジェクトが真か偽か判定する)

# Python で用意されている組み込み関数の中の bool 関数の使い方です。引数に指定したオブジェクトが真( True )か偽( False )かを判定します。

# 目次

# bool関数の書式と基本的な使い方

# bool関数の書式と基本的な使い方
# bool 関数は引数に指定したオブジェクトが真か偽かを返します。 bool 関数の書式は次の通りです。

# bool([x])

# 引数には文字列やバイト列、リスト、タプル、辞書などのオブジェクトを指定できます。結果としてブール値の True または False を返します。

# bool("Hello")
# True

# bool(0)
# False

# bool({"s":150, "m":160, "l":170, "xl":180})
# True
# サンプルプログラム
# 簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample5-1.py という名前で保存します。

# print(bool("Hello"))
# print(bool(""))
# print(bool(0))
# print(bool(0.7))

# bool関数の書式と基本的な使い方(1)

# その後、次のように実行してください。

# python sample5-1.py

# bool関数の書式と基本的な使い方(2)

# 引数に指定したオブジェクトが真( True )か偽( False )かを取得することができました。

# -- --

# Python の組み込み関数の一つである bool 関数の使い方について解説しました。



# 【range関数の使い方(開始から終了までの連続した数値を要素として持つrange型オブジェクトを作成する)】
# range関数の使い方(開始から終了までの連続した数値を要素として持つrange型オブジェクトを作成する)

# Python で用意されている組み込み関数の中の range 関数の使い方です。関数となっていますが、実際には range 型のオブジェクトを作成します。引数に指定した開始数から終了数までの連続した数値を要素として持つオブジェクトとなります。

# 目次

# range関数の書式と基本的な使い方

# range関数の書式と基本的な使い方
# range 関数は引数に指定した開始数から終了数までの連続した数値を要素として持つ range 型のオブジェクトを作成します。 range 関数の書式は次の通りです。

# range(stop)
# range(start, stop[, step])

# start に指定した数値から順に step に指定した数値だけ足していき、 stop に指定した数値を超えない範囲までの連続した数値を要素として持つオブジェクトを作成します。 step を省略した場合は 1 が指定されたものとみなされ start を省略した場合は 0 が指定されたものとみなされます。( stop は含まれない点に注意してください)。

# range(5)
# --> 0 1 2 3 4

# range(0, 5)
# --> 0 1 2 3 4

# range(4,7)
# --> 4 5 6

# range(0, 5, 1)
# --> 0 1 2 3 4

# range(0, 10, 2)
# --> 0 2 4 6 8
# step に負の値を指定することで、開始から終了まで逆順に連続した数値を持つオブジェクトを作成できます。

# range(10, 0, -1)
# --> 10 9 8 7 6 5 4 3 2 1

# range(0, -8, -2)
# --> 0 -2 -4 -6
# range 型のオブジェクトを print 文の引数に指定しても要素の一覧は表示されませんが、 range 型のオブジェクトから list 型のオブジェクトを作成したあとで print 文で出力すると要素の一覧を確認できます。

# >>> r = range(0, 10)
# >>> print(r)
# range(0, 10)
# >>> print(list(r))
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# >>>
# またインデックスを指定して要素を取得することもできます。またスライスを指定すると、スライスに対応した range 型のオブジェクトを取得します。

# >>> r = range(0, 10)
# >>> r[0]
# 0
# >>> r[5]
# 5
# >>> r[3:7]
# range(3, 7)
# >>>
# range 関数は連続した数値を要素として持つリストやタプルを作成するために使用されたり、 for 文を使った繰り返しを行うときに繰り返しを行う回数を指定するためなどに使用されることが多いかと思います。

# サンプルプログラム
# 簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample6-1.py という名前で保存します。

# r = range(10) for i in r: print("num : " + str(i))

# range関数の書式と基本的な使い方(1)

# その後、次のように実行してください。

# python sample6-1.py

# range関数の書式と基本的な使い方(2)

# for 文にて作成した range 型のオブジェクトから順に要素を取得して繰り返し処理を行いました。

# -- --

# Python の組み込み関数の一つである range 関数の使い方について解説しました。



# 【isinstance関数およびtype関数の使い方(オブジェクトのデータ型を判定する、オブジェクトの型を取得する)】
# isinstance関数およびtype関数の使い方(オブジェクトのデータ型を判定する、オブジェクトの型を取得する)

# Python で用意されている組み込み関数の中の isinstance 関数および type 関数の使い方です。 isinstance 関数はオブジェクトのデータ型の判定に使用します。また type 関数はオブジェクトのデータ型を取得します。

# 目次

# type関数の書式と基本的な使い方
# isinstance関数の書式と基本的な使い方

# type関数の書式と基本的な使い方
# type 関数は引数に指定したオブジェクトのデータ型を表す型オブジェクトを返します。 type 関数の書式は次の通りです。

# type(object)

# 引数に指定してオブジェクトのデータ型を取得します。

# >>> type("Hello")
# <class 'str'>
# >>> type(123)
# <class 'int'>
# >>>
# type 関数で取得した型オブジェクトは is 演算子を使用することで指定したデータ型と同じかどうかを調べることができます。

# >>> print(type("Hello") is str)
# True
# >>> print(type("Hello") is int)
# False
# >>> print(type(123) is int)
# True
# >>> print(type(123.4) is int)
# False
# >>>
# 複数のデータ型と比較する場合には in 演算子を使用することで調べることができます。

# >>> print(type("Hello") in (str, int))
# True
# >>> print(type(123) in (str, int))
# True
# >>> print(type(123.4) in (str, int))
# False
# >>>
# このように type 関数を使用することで、引数に指定したオブジェクトのデータ型を取得したり、指定したデータ型と同じかどうかを判定することができます。

# サンプルプログラム
# 簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample7-1.py という名前で保存します。

# print(type("str"))
# print(type(100))
# print(type(14.5))
# print(type(7.0 + 5j))
# print(type([1, 2, 3]))
# print(type((1, 2, 3)))
# print(type({1:"A", 2:"B", 3:"C"}))
# print(type(True))
# print(type(None))
# type関数の書式と基本的な使い方(1)

# その後、次のように実行してください。

# python sample7-1.py

# type関数の書式と基本的な使い方(2)

# Python で使用される主なデータ型について type 関数でどのような値が帰ってくるのかを確認しました。

# -- --

# もう一つサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample7-2.py という名前で保存します。

# mylist = [2, "ab", 3.5, True, 4]
# total = 0

# for val in mylist:
#     if type(val) in (int, float):
#         print("val:" + str(val))
#         total += val

# print("total:" + str(total))
# type関数の書式と基本的な使い方(3)

# その後、次のように実行してください。

# python sample7-2.py

# type関数の書式と基本的な使い方(4)

# リストに格納された値のデータ型を調べ、整数型または浮動小数点数型だった場合は値を出力して合計を計算しました。

# isinstance関数の書式と基本的な使い方
# isinstance 関数は 1 番目の引数に指定したオブジェクトが 2 番目の引数に指定したデータ型と等しいかどうかを返します。 isinstance 関数の書式は次の通りです。

# isinstance(object, classinfo)

# 1 番目の引数に指定したオブジェクトが 2 番目の引数に指定したデータ型のオブジェクトかサブクラスのオブジェクトの場合に True を返します。

# 例えば次のように使います。

# >>> print(isinstance(1, int))
# True
# >>> print(isinstance(1, str))
# False
# >>> print(isinstance("abc", str))
# True
# >>> print(isinstance("abc", int))
# False
# >>>
# 複数のデータ型と比較する場合には、 2 番目に引数として複数のデータ型を要素としてもつタプルを指定してください。

# >>> print(isinstance(1, (int, float)))
# True
# >>> print(isinstance(2.5, (int, float)))
# True
# >>> print(isinstance("ab", (int, float)))
# False
# >>>
# isinstance 関数と type 関数の違いとして、 isinstance 関数は 2 番目の引数に指定したデータ型のサブクラスのオブジェクトであっても真となります。その為、サブクラスも含めて同じデータ型かどうか調べたい場合には isinstance 関数を使うと便利です。

# >>> print(isinstance(3, int))
# True
# >>> print(isinstance(True, int))
# True
# >>> print(isinstance(True, bool))
# True
# >>>
# bool 型は int 型のサブクラスのため、 bool 型のオブジェクトである True は int 型と同じかどうか調べた場合に真となります。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample7-3.py という名前で保存します。

# mylist = [2, "ab", 3.5, True, 4]
# total = 0

# for val in mylist:
#     if isinstance(val, (int, float)):
#         print("val:" + str(val))
#         total += val

# print("total:" + str(total))
# isinstance関数の書式と基本的な使い方(1)

# その後、次のように実行してください。

# python sample7-3.py

# isinstance関数の書式と基本的な使い方(2)

# リストに格納された値のデータ型を調べ、整数型または浮動小数点数型だった場合は値を出力して合計を計算しました。今回の場合は True も整数型として識別されています( True は数値の 1 として扱われます)。

# -- --

# Python の組み込み関数の一つである type 関数および isinstance 関数の使い方について解説しました。

