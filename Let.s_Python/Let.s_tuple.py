# 【タプル】

# タプルを作成する
# タプルの要素を取得する
# スライスを使ってタプルの指定した範囲の要素が含まれる新しいタプルを取得する
# タプルのサイズの取得(len関数)
# タプルを別のタプルと結合して新しいタプルを作成する
# タプルの要素を指定した回数繰り返した新しいタプルを作成する
# 指定した値と同じ要素がタプルに含まれているか確認する
# 文字列、リスト、rangeなどからタプルを作成する
# タプルの要素を昇順または降順に並び替える



# 【タプルを作成する】
# タプルを作成する

# タプルを新しく作成する方法について解説します。タプルには複数の要素が含まれますが、要素に対して値を指定して作成する方法の他に、変数を指定したり同じ要素を指定した個数繰り返すタプルを作成することができます。

# 目次

# 値を指定してタプルを作成する
# 変数に代入された値を要素として指定する
# 要素を指定した個数繰り返すタプルを作成する

# 値を指定してタプルを作成する
# タプル型は ( から ) までの間に複数の要素をカンマ(,)で区切って定義します。書式は次のとおりです。

# (要素1, 要素2, ...)

# 要素が 1 つだけの場合はカンマを付けてください。

# (要素1,)

# 厳密には ( と ) は省略可能です。複数の要素をカンマで区切ることでタプルを定義できます。

# t = 要素1,
# t = 要素1, 要素2, ...

# 見分けがつきにくいためこのサイトでは必ず ( と ) を記載します。

# 要素には数値や文字列など Python で扱えるオブジェクトであれば何でも指定することができます。

# (7, 8, 6, 5, 9)
# ("Orange", "Lemon", "Apple")

# 同じタプルで要素毎に異なるデータ型のオブジェクトを指定することができます。

# (30, "Tokyo", "Suzuki", True)

# 要素には別のタプルを指定することができます。

# ("A", ("B", "C"), "D")

# 要素が空のタプルを作成することができます。

# ()

# 作成したタプルは数値や文字列のように変数に代入して利用することができます。

# colortuple = ("White", "Black", "Red")

# 変数に代入された値を要素として指定する
# 値を指定してタプルを作成するときに、値を直接入力するかわりに値が代入された変数を指定してタプルを作成することができます。

# >>> x = 9
# >>> y = 18
# >>> numtuple = (x, y)
# >>> print(numtuple)
# (9, 18)
# >>>
# 要素に変数名を指定した場合、要素には変数の参照が設定されるのではなくタプルの作成時に変数に代入されていた値が直接記述されたのと同じ扱いとなります。その為、先ほどのタプルは次のように作成したものとまったく同じです。

# >>> numlist = (9, 18)
# >>> print(numlist)
# (9, 18)
# >>>
# タプルを作成したあとに変数に別の値を代入しても、タプルの要素は変更されません。

# >>> x = 9
# >>> y = 18
# >>> numtuple = (x, y)
# >>> print(numtuple)
# (9, 18)
# >>> x = 20
# >>> print(numtuple)
# (9, 18)
# >>>
# 要素を指定した個数繰り返すタプルを作成する
# 例えば特定の値を持つ要素を指定した個数持つようなタプルを作成する場合、次のように行うことができます。(タプルで要素が1つだけの場合はカンマが必要な点に注意してください)。

# タプル = (要素,) * 個数

# 例えば数値の 0 を持つ要素が 10 個あるタプルを作成するには次のように行います。

# >>> numtuple = (0,) * 10
# >>> print(numtuple)
# (0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
# >>>
# タプルはリストと異なり要素の値をあとから変更することができませんのであまり使われることはないかもしれません。

# なお繰り返す要素に他のタプルを指定した場合、タプルを持つ要素を指定した個数持つ新しいタプルを作成するのではなく、タプルに含まれる要素を指定した個数分繰り返した新しいタプルを作成します。

# >>> numtuple = (10, 20, 30) * 3
# >>> print(numtuple)
# (10, 20, 30, 10, 20, 30, 10, 20, 30)
# >>>
# -- --

# タプルを作成する方法について解説しました。



# 【タプルの要素を取得する】
# タプルの要素を取得する

# 作成したタプルに対してインデックスを指定することで要素を取得することができます。ここではタプルの要素を取得する方法について解説します。

# 目次

# インデックスを指定して要素を取得する
# タプルの最後の要素のインデックスを調べる

# インデックスを指定して要素を取得する
# タプルに含まれているそれぞれの各要素には順番にインデックスが割り当てられています。最初の要素のインデックスが 0 、次の要素が 1 と順に割り当てられています。インデックスを指定することでタプルの要素を取得することができます。

# タプル[インデックス]

# 次の例ではタプルの各要素を順に取得しています。

# >>> mytuple = ("Orange", "Lemon", "Apple")
# >>> print(mytuple[0])
# Orange
# >>> print(mytuple[1])
# Lemon
# >>> print(mytuple[2])
# Apple
# >>>
# またインデックスは負の値でも指定することができます。タプルの最後の要素のインデックスが -1 で前に向かって -2, -3, ... と割り当てられています。

# 次の例では負の値のインデックスを指定してタプルの各要素を順に取得し画面に出力しています。

# >>> mytuple = ("Orange", "Lemon", "Apple")
# >>> print(mytuple[-])
# Apple
# >>> print(mytuple[-2])
# Lemon
# >>> print(mytuple[-3])
# Orange
# >>>
# なお要素が存在しないインデックスを指定して要素を取得しようとすると IndexError エラーとなります。

# >>> mytuple = ("Orange", "Lemon", "Apple")
# >>> print(mytuple[3])
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# IndexError: tuple index out of range
# >>>
# タプルの最後の要素のインデックスを調べる
# 組み込み関数の len 関数の引数にタプルを指定すると、タプルの要素数を取得することができます。(詳細は「タプルの長さ(要素数)を取得する」を参照されてください)。

# 次の例をみてください。

# >>> mytuple = ("Orange", "Lemon", "Apple")
# >>> print(len(mytuple)
# 3
# >>>
# len 関数の引数にタプルを指定し、タプルの要素数 3 を取得することができました。

# タプルの最初の要素のインデックスは 0 から始まりますので、タプルの最後の要素のインデックスは 要素の数 -1 となります。よって最後の要素のインデックスは len(リスト) -1 で取得することができます。

# >>> mytuple = ("Orange", "Lemon", "Apple")
# >>> print(mytuple[len(mytuple) - 1])
# Apple
# >>>
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample2-1.py という名前で保存します。

# animaltuple = ("Cat", "Dog", "Cow", "Monkey")

# print(animaltuple)
# print("最初の要素は " + animaltuple[0] + " です。")
# print("最後の要素は " + animaltuple[len(animaltuple) - 1] + " です。")

# その後で、次のように実行してください。

# python sample2-1.py

# タプルの最後の要素のインデックスを調べる(1)

# インデックスを指定してタプルの要素を取得することができました。

# -- --

# タプルの要素を取得する方法について解説しました。



# 【スライスを使ってタプルの指定した範囲の要素が含まれる新しいタプルを取得する】
# スライスを使ってタプルの指定した範囲の要素が含まれる新しいタプルを取得する

# タプルではスライスという機能を使うことで、開始インデックスから終了インデックスまでの範囲に含まれる要素を含む新しいタプルを取得できます。ここではスライス機能を使ってタプルから指定した範囲の要素が含まれる新しいタプルを取得する方法について解説します。

# 目次

# タプルでスライス機能を使用する
# 開始インデックスまたは終了インデックスを省略する

# タプルでスライス機能を使用する
# タプルに対してスライス機能を使用すると、開始位置から終了位置までの指定した範囲にある要素を含む新しいタプルを取得することができます。書式は次の通りです。

# タプル[開始インデックス:終了インデックス]

# 範囲の指定は、開始インデックスに範囲の最初の要素のインデックス、終了インデックスに範囲の最後の要素のインデックスに +1 した値を指定します。次の例を見て下さい。

# mytuple = ("A", "B", "C", "D", "E")

# #インデックス 2 から 3 までの要素を取得する
# mytuple[2:4]
# --> ("C", "D")

# #インデックス 0 から 2 までの要素を取得する
# mytuple[0:3]
# --> ("A", B", "C")

# #インデックス 3 の要素を取得する
# mytuple[3:4]
# --> ("D",)
# スライスを使うと指定した範囲の要素が含まれる新しいタプルを取得することができます。要素が 1 つであってもタプルとして取得しますので注意してください。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample3-1.py という名前で保存します。

# animaltuple = ("Cat", "Lion", "Cow", "Dog", "Giraffe")

# print(animaltuple)
# print(animaltuple[1:4])
# print(animaltuple[0:2])
# print(animaltuple[2:3])

# その後で、次のように実行してください。

# python sample3-1.py

# タプルでスライス機能を使用する(1)

# スライスを使って作成済のタプルから一部の要素が含まれる新しいタプルを取得することができました。

# 開始インデックスまたは終了インデックスを省略する
# スライス機能を使用するときに、開始インデックスまたは終了インデックスを省略することができます。

# 開始インデックスを省略した場合は 0 が指定されたものとみなされます。 0 はタプルの最初の要素のインデックスなので、開始インデックスを省略した場合はタプルの最初の要素から指定した終了インデックスまでが範囲となります。

# mytuple = ("A", "B", "C", "D", "E")

# #インデックスの最初から 3 までの要素を取得する
# mytuple[:4]
# --> ("A", B", "C", "D")
# 終了インデックスを省略した場合は len(タプル) の値が指定されたものとみなされます。 len 関数の引数にタプルを指定した場合はタプルの要素数を返しますので、終了インデックスを省略した場合は指定した開始インデックスからタプルの最後の要素までが範囲となります。

# mytuple = ("A", "B", "C", "D", "E")

# #インデックス 2 から最後までの要素を取得する
# mytuple[2:]
# --> (C", "D", "E")
# 開始インデックスと終了インデックスを共に省略した場合は、タプルの最初の要素から最後の要素までが範囲となるので、元のタプルのすべての要素が含まれる新しいタプルを取得することになります。

# mytuple = ("A", "B", "C", "D", "E")

# #インデックスの最初から最後までの要素を取得する
# mytuple[:]
# --> ("A", "B", "C", "D", "E")
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample3-2.py という名前で保存します。

# animaltuple = ("Cat", "Lion", "Cow", "Dog", "Giraffe")

# print(animaltuple)
# print(animaltuple[:3])
# print(animaltuple[2:])
# print(animaltuple[:])

# その後で、次のように実行してください。

# python sample3-2.py

# 開始インデックスまたは終了インデックスを省略する(1)

# スライスを使用する時に開始インデックスまたは終了インデックスを省略して範囲を指定しました。

# -- --

# スライス機能を使ってタプルから指定した範囲の要素が含まれる新しいタプルを取得する方法について解説しました。



# 【タプルの長さ(要素数)を取得する】
# タプルの長さ(要素数)を取得する

# 組み込み関数の len 関数を使ってタプルの長さ(要素数)を取得する方法について解説します。

# 目次

# タプルの長さを取得する

# タプルの長さを取得する
# 組み込み関数である len 関数を使うと引数に指定したオブジェクトの長さや要素の数を取得することができます。引数にタプルを指定した場合には、タプルに含まれる要素数を取得することができます。書式は次の通りです。

# len(タプル)

# 引数に指定したタプルの要素数を取得します。

# len(("Red", "Blue", "Green"))
# --> 3

# len((10, 20, 30, 40, 50))
# --> 5
# len 関数について詳しくは「len関数の使い方(オブジェクトの長さや要素数を取得する)」を参照されてください。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample4-1.py という名前で保存します。

# animallist = ("Monkey", "Cat", "Dog", "Cow")

# print(animallist)
# print("要素数は " + str(len(animallist)) + " です。")

# その後で、次のように実行してください。

# python sample4-1.py

# タプルの長さを取得する(1)

# len 関数を使ってタプルの長さ(要素数)を取得することができました。

# -- --

# 組み込み関数の len 関数を使ってリストの要素数を取得する方法について解説しました。



# 【タプルを別のタプルと結合して新しいタプルを作成する】
# タプルを別のタプルと結合して新しいタプルを作成する

# タプルはイミュータブルなので作成したタプルを変更することはできませんが、別のタプルと結合して新しく別のタプルを作成することはできます。ここでは別のタプルとの結合して新しいタプルを作成する方法について解説します。

# 目次

# 別のタプルと結合して新しいタプルを作成する

# 別のタプルと結合して新しいタプルを作成する
# タプルに対して + 演算子を使用すると、別のタプルと結合して新しいタプルを作成することができます。

# タプルA + タプルB

# 2 つのタプルの要素を持つ新しいリストを作成します。

# 具体的には次のように記述します。

# tuple1 = ("A", "B", "C")

# tuple2 = ("D", "E")

# tuple3 = tuple1 + tuple2

# print(tuple3)

# --> ("A", "B", "C", "D", "E")
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample5-1.py という名前で保存します。

# redtuple = ("Orange", "Strawberry")
# print(redtuple)
# yellowtuple = ("Lemon", "Banana", "Grapefruit")
# print(yellowtuple)

# # redtuple と yellowtuple を結合する
# fruittuple = redtuple + yellowtuple
# print(fruittuple)

# その後で、次のように実行してください。

# python sample5-1.py

# 別のタプルと結合して新しいタプルを作成する(1)

# 二つのタプルを結合して新しいタプルを作成することができました。

# -- --

# タプルを別のタプルと結合して新しいタプルを作成する方法について解説しました。



# 【タプルの要素を指定した回数繰り返した新しいタプルを作成する】
# タプルの要素を指定した回数繰り返した新しいタプルを作成する

# タプルに * 演算子を使用すると、タプルに含まれる要素を指定した回数繰り返した新しいタプルを作成することができます。ここではタプルの要素を指定した回数繰り返した新しいタプルを作成する方法について解説します。

# 目次

# タプルの要素を指定した回数繰り返した新しいタプルを作成する

# タプルの要素を指定した回数繰り返した新しいタプルを作成する
# タプルに対して * 演算子を使用すると、タプルに含まれる要素を指定した回数繰り返した新しいタプルを作成することができます。

# タプル * 回数

# タプルの要素を指定した回数繰り返した新しいタプルを作成します。

# 具体的には次のように記述します。

# tuple = ("A", "B", "C")
# newtuple = tuple * 3
# print(newtuple)
# --> ("A", "B", "C", "A", "B", "C", "A", "B", "C")
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample7-1.py という名前で保存します。

# basetuple = ("Yes", "No")
# print(basetuple)

# mytuple = basetuple * 4
# print(mytuple)

# その後で、次のように実行してください。

# python sample7-1.py

# タプルの要素を指定した回数繰り返した新しいタプルを作成する(1)

# 二つのタプルを結合して新しいタプルを作成することができました。

# -- --

# タプルの要素を指定した回数繰り返した新しいタプルを作成する方法について解説しました。



# 【指定した値と同じ要素がタプルに含まれているか確認する】
# 指定した値と同じ要素がタプルに含まれているか確認する

# 作成済みのタプルに指定した値と同じ要素が含まれているかどうか、含まれている場合の要素の数や要素のインデックスを取得する方法について解説します。要素が含まれているかどうかの確認には in 演算子、要素の数を確認するには count メソッド、インデックスを確認するには index メソッドを使用します。

# 目次

# 指定の値と同じ値を持つ要素が含まれているか確認する
# 指定の値と同じ要素がタプルに何個含まれているか取得する
# 指定の値と同じ値を持つ要素のインデックスを取得する

# 指定の値と同じ値を持つ要素が含まれているか確認する
# 指定の値を持つ要素がタプルの中に含まれているかどうかを確認するには in 演算子を使用します。

# 値 in タプル

# タプルの要素の中で指定した値と同じ値を持つ要素があった場合には式は True となります。なかった場合には False となります。

# 具体的には次のように記述します。

# >>> mytuple = ("A", "B", "C", "D", "E")
# >>> print("B" in mytuple)
# True
# >>> print("D" in mytuple)
# True
# >>> print("G" in mytuple)
# False
# >>>
# なお in 演算子のかわりに not in 演算子を使うと、指定した値と同じ値があった場合に False 、なかった場合に True となります。

# 指定の値と同じ要素がタプルに何個含まれているか取得する
# 指定の値と同じ値を持つ要素がタプルに何個含まれているか取得する方法です。タプル型で利用可能な count メソッドを使用します。

# タプル.count(値)

# 引数に指定した値と同じ値を持つ要素の数を返します。見つからなかった場合は 0 を返します。

# 具体的には次のように記述します。

# >>> mytuple = ("A", "B", "A", "A", "C")
# >>> print(mytuple.count("A"))
# 3
# >>> print(mytuple.count("B"))
# 1
# >>> print(mytuple.count("D"))
# 0
# >>>
# 指定の値と同じ値を持つ要素のインデックスを取得する
# 指定の値と同じ値を持つ要素がタプルに含まれている場合に、その要素のインデックスを取得する方法です。タプル型で利用可能な index メソッドを使用します。

# タプル.index(値)

# 引数に指定した値と同じ値を持つ要素が見つかった場合に、その要素のインデックスを返します。複数見つかった場合には最初の要素のインデックスを返します。

# 具体的には次のように記述します。

# >>> mytuple = ("A", "B", "A", "A", "C")
# >>> print(mytuple.index("A"))
# 0
# >>> print(mytuple.index("B"))
# 1
# >>> print(mytuple.index("C"))
# 4
# >>>
# なお見つからなかった場合は ValueError エラーとなりますので注意してください。

# >>> mytuple = ("A", "B", "A", "A", "C")
# >>> print(mytuple.index("D"))
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# ValueError: tuple.index(x): x not in tuple
# >>>
# -- --

# 作成済みのタプルに指定した値と同じ要素が含まれているかどうか、含まれている場合の要素の数や要素のインデックスを取得する方法について解説しました。



# 【文字列、リスト、rangeなどからタプルを作成する】
# 文字列、リスト、rangeなどからタプルを作成する

# 文字列やリスト、rangeなど他のオブジェクトからタプルを作成する方法を解説します。

# 目次

# イテラブルなオブジェクトからタプルを作成する

# イテラブルなオブジェクトからタプルを作成する
# タプル型のコンストラクタには引数にイテラブルなオブジェクトを指定してタプルのオブジェクトを作成するものがあります。

# class tuple([iterable])

# イテラブルなオブジェクトとはリストやタプル、文字列、辞書などです。

# 別のタプルからタプルを作成する
# 最初に別のタプルを引数に指定してタプルオブジェクトを作成してみます。

# >>> mytuple = ("A", "B", "C")
# >>> newtuple = tuple(mytuple);
# >>> print(newtuple)
# ('A', 'B', 'C')
# >>>
# 引数に指定したタプルと同じ要素を持つタプルが作成されました。なおタプルはイミュータブルなオブジェクトですので 2 つのタプルは同じオブジェクトとなりました。(詳しくは「mutableオブジェクトとimmutableオブジェクトでの is 演算子の結果の違い」を参照されてください)

# 文字列からタプルを作成する
# 次に文字列を引数に指定してタプルオブジェクトを作成してみます。

# >>> mytuple = tuple("Hello Python")
# >>> print(mytuple)
# ('H', 'e', 'l', 'l', 'o', ' ', 'P', 'y', 't', 'h', 'o', 'n')
# >>>
# 引数に指定した文字列の 1 文字毎に 1 つの要素とした新しいタプルが作成されました。

# リストからタプルを作成する
# 次にリストを引数に指定してタプルオブジェクトを作成してみます。

# >>> mytuple = tuple(["A", "B", "C"])
# >>> print(mytuple)
# ('A', 'B', 'C')
# >>>
# 引数に指定したリストの要素をコピーした新しいタプルが作成されました。

# rangeからタプルを作成する
# range型はコンストラクタで引数に指定した開始数から終了数までの連続した数値を持つオブジェクトです。

# class range(stop)
# class range(start, stop[, step])

# start から stop までの連続した数値を要素として持ちます。 start を省略した場合は 0 が開始数です。

# ※ range 型について詳しくは「range関数の使い方(開始から終了までの連続した数値を要素として持つrange型オブジェクトを作成する)」を参照されてください。

# range型のオブジェクトを引数に指定してタプルオブジェクトを作成してみます。

# >>> mytuple = tuple(range(10))
# >>> print(mytuple)
# (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
# >>>
# 0 から 9 までの連続した数値を要素として持つリストを作成することができました。

# -- --

# 文字列やリスト、rangeなど他のオブジェクトからタプルを作成する方法を解説しました。



# 【タプルの要素を昇順または降順に並び替える】
# タプルの要素を昇順または降順に並び替える

# 作成済みのタプルに含まれる要素を、要素の値を使って昇順または降順に並び替える方法について解説します。並び替えには sorted 関数を使用し、結果として取得したリストオブジェクトからタプルオブジェクトを作成します。

# 目次

# 要素を並び替える
# 要素の値のデータ型が異なっていた場合
# 並べ替えるときの昇順と降順を切り替える
# 要素の値を他の関数に渡して帰ってきた値を使って並び替える

# 要素を並び替える
# 要素を並び替えるには組み込み関数の sorted 関数を使用します。書式は次のとおりです。

# newlist = sorted(iterable, *, key=None, reverse=False)

# 1 番目の引数以外は省略可能となっており、基本となる使い方は次のようになります。

# newlist = sorted(iterable)

# 1 番目の引数に指定したイテラブルなオブジェクト(文字列やリスト、タプル、辞書などです)の要素を並び替え、新しいオブジェクトとして返します。並べ替える前のオブジェクトはそのままで、並べ替えた結果を新しいリスト型のオブジェクトとして返してくれます。

# 引数にタプルを指定した場合も、並べ替えを行った後の結果としてリスト型のオブジェクトが返ってきます。その為、並べ替えた結果をタプルとして取得したい場合にはリスト型のオブジェクトからタプルを作成する必要があります。(リストからタプルを作成する方法について、詳しくは「文字列、リスト、rangeなどからタプルを作成する」を参照されてください)。

# newtuple = tuple(newlist)

# 並び替えは要素の値を < 演算子を使って比較して並び替えが行われます。あとで試しますが、タプルの要素に数値や文字列が混在している場合、比較を行えず TypeError エラーが発生します。

# 具体的には次のように記述します。

# mytuple = ("C", "A", "B")

# # 並べ替えを行う
# newlist = sorted(mytuple)

# # リストからタプルを作成する
# newtuple = tuple(newlist)

# print(mytuple)
# --> ("C", "A", "B")
# print(newtuple)
# --> ("A", "B", "C")
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample9-1.py という名前で保存します。

# numtuple = (55, 78, 92, 82, 65)

# newnumlist = sorted(numtuple)
# newnumtuple = tuple(newnumlist)

# print("Before:", numtuple)
# print("After:", newnumtuple)

# animaltuple = ("Dog", "Cat", "Bear", "Deer")

# newanimallist = sorted(animaltuple)
# newanimaltuple = tuple(newanimallist)

# print("Before:", animaltuple)
# print("After:", newanimaltuple)

# その後で、次のように実行してください。

# python sample9-1.py

# 要素を並び替える(1)

# sorted 関数を使ってリストの要素を並び替えることができました。

# 要素の値のデータ型が異なっていた場合
# タプルの要素にはそれぞれ異なるデータ型の値を持つことができますが、並び替えを行う場合は要素の値を > 演算子で比較するため、比較できるかどうかは > 演算子で比較が許されているかどうかによります。

# 例えば要素の値のデータ型が異なっていても整数と浮動小数点数などであれば並び替えは行えます。

# >>> numtuple = (5, 3.14, 4.78, 4)
# >>> newlist = sorted(numtuple)
# >>> print(tuple(newlist))
# (3.14, 4, 4.78, 5)
# >>>
# ただ要素の値が数値と文字列が混在している場合などは並び替えを行うと TypeError エラーが発生します。

# >>> mytuple = ("80", 75, 45, "68")
# >>> newlist = sorted(mytuple)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# TypeError: '<' not supported between instances of 'int' and 'str'
# >>>
# 並べ替えるときの昇順と降順を切り替える
# sorted 関数を使う場合、デフォルトでは昇順で並び替えが行われます。降順で並び替えをする場合は、次のように実行してください。

# newlist = sorted(iterable, reverse=True)

# 引数に reverse=True を指定して sorted 関数を実行します。

# 具体的には次のように記述します。

# mytuple = ("C", "A", "B")

# # 並べ替えを行う
# newlist = sorted(mytuple, reverse=True)

# # リストからタプルを作成する
# newtuple = tuple(newlist)

# print(mytuple)
# --> ("C", "A", "B")
# print(newtuple)
# --> ("C", "B", "A")
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample9-2.py という名前で保存します。

# colortuple = ("Blue", "Red", "Green", "White", "Black")

# upcolortuple = tuple(sorted(colortuple))
# downcolortuple = tuple(sorted(colortuple, reverse=True))

# print("Original:", colortuple)
# print("ASC:", upcolortuple)
# print("DESC:", downcolortuple)

# その後で、次のように実行してください。

# python sample9-2.py

# 並べ替えるときの昇順と降順を切り替える(1)

# sorted 関数を使ってタプルの要素を昇順と降順でそれぞれ並び替えることができました。

# 要素の値を他の関数に渡して帰ってきた値を使って並び替える
# 並び替えを行うときに、要素の値をそのまま使って比較するのではなく、一度指定した関数に要素の値を渡して帰ってきた値を使って比較するようにするには、次のように実行してください。

# newlist = sorted(iterable, key=関数名)

# 指定できる関数は、 1 つの引数を取る関数を指定してください。

# 例えば絶対値を取ってから並び替えを行いたいのであれば、組み込み関数の abs 関数を指定します。

# mytuple = (5, -4, -7, 6)

# tuple(sorted(mytuple))
# --> (-7, -4, 5, 6)

# tuple(sorted(mytuple, key=abs))
# --> (-4, 5, 6, -7)
# 要素の値に対してそれぞれ絶対値を取った値を基準に並び替えを行います。

# 例えば文字列の長さを使って並び替えを行いたいのであれば、組み込み関数の len 関数を指定します。

# mytuple = ("apple", "pen", "desk", "banana")

# tuple(sorted(mytuple))
# --> ('apple', 'banana', 'desk', 'pen')

# tuple(sorted(mytuple, key=len))
# --> ('pen', 'desk', 'apple', 'banana')
# 要素の値に対してそれぞれ文字の長さを取得し、長さを基準に並び替えを行います。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample9-3.py という名前で保存します。

# mytuple = ("C", "b", "A", "E", "d")

# sorttuple = tuple(sorted(mytuple))
# lowersorttuple = tuple(sorted(mytuple, key=str.lower))

# print(mytuple)
# print(sorttuple)
# print(lowersorttuple)

# その後で、次のように実行してください。

# python sample9-3.py

# 要素の値を他の関数に渡して帰ってきた値を使って並び替える(1)

# 今回は引数に指定する関数として文字列型の str.lower() メソッドを指定しました。文字列をすべて小文字に変換してから比較し並び替えを行っています。

# -- --

# 作成済みのタプルに含まれる要素を、要素の値を使って昇順または降順に並び替える方法について解説しました。

