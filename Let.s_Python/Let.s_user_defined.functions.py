# 【ユーザー定義関数】

# 関数の定義と関数の呼び出し
# 関数を呼び出すときに引数を使って値を渡す
# Pythonの引数における参照渡しと値渡しについて
# 関数からreturn文を使って呼び出し元へ戻り値を返す
# 引数にデフォルト値を設定する
# キーワード引数を使って関数を呼び出す
# 関数で可変個数の引数を受け取る



# 【関数の定義と関数の呼び出し】
# 関数の定義と関数の呼び出し

# ユーザー定義関数を定義する方法および関数を呼び出す方法について解説します。

# 目次

# 関数を定義する
# 関数を呼び出す
# 関数名の付け方

# 関数を定義する
# ユーザーが定義する関数は、次のように定義します。

# def 関数名(引数1, 引数2, ...):
#     関数内で実行する処理

#     return 戻り値
# def のあとに関数名を指定します。関数名の付け方についてはあとで解説します。

# 関数名のあとに続く ( と ) の中に引数(仮引数と呼ばれます)を記述します。引数は 0 個でもいいですし、複数指定する場合はカンマ(,)で区切って記述します。(引数を受け取る関数の定義と利用方法については「引数を指定して関数を呼び出す」で解説します)。下記は引数が 0 個の場合です。

# def 関数名():
#     関数内で実行する処理

#     return 戻り値
# 関数が呼び出されると、ブロック内の処理が順に実行されます。複数の処理を実行する場合はブロック内に記述してください。

# def 関数名(引数1, 引数2, ...):
#     関数内で実行する処理1
#     関数内で実行する処理2
#     関数内で実行する処理3

#     return 戻り値
# ※ Python ではブロックをインデントを使って定義します。詳しくは「Pythonにおけるインデントを使ったブロックの定義」を参照されてください。

# 関数には return 文を使って関数の呼び出し元に値を返すことができます。返す値は return 文のあとに記述します。 return 文は必要なければ記述する必要はありません。 return 文が実行されないまま関数のブロックの最後まで到達すると None が呼び出し元に返ります。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample1-1.py という名前で保存します。

# def myfunc():
#     print("Hello")

# myfunc()
# その後で、次のように実行してください。

# python sample1-1.py

# 関数を定義する(1)

# ユーザー定義関数 myfunc を定義し、その後で関数を呼び出しました。関数内で print 関数が実行されて画面に文字が出力されました。

# 関数を呼び出す
# 定義した関数は呼び出して利用することができます。関数は次のように呼び出すことができます。

# 関数名(引数1, 引数2, ...)

# 呼び出す関数名を記述したあとで ( と ) の中に引数(実引数と呼ばれます)を記述します。(引数を指定して関数を呼び出す方法については「引数を指定して関数を呼び出す」で解説します)。引数は 0 個でもいいですし、複数指定する場合はカンマ(,)で区切って記述します。下記は引数が 0 個の場合です。

# 関数名()

# 関数を呼び出すと関数から値が帰ってきます。帰ってきた値を利用する場合は、例えば次のように変数に代入することができます。

# val = 関数名(引数1, 引数2, ...)

# 呼び出された関する側では return 文を使って任意の値を関数の呼び出しもとに返すこともできますし、 return 文を実行しなかった場合は None が返ってきます。返ってきた値を関数の呼び出し元では利用してもしなくても構いません。

# 関数は呼び出される前に定義がされていなければなりません。例えば次のように関数が定義されてから関数を呼び出した場合は正常に動作します。

# >>> def sample():
# ...     print("Hello")
# ...
# >>> sample()
# Hello
# >>>
# 逆に定義がされていない関数を呼び出した場合はエラーが発生します。

# >>> sample()
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# NameError: name 'sample' is not defined
# >>>
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample1-2.py という名前で保存します。

# def myfunc():
#     print("Hello")

# myfunc()
# myfunc()
# val = myfunc()
# print(val)
# その後で、次のように実行してください。

# python sample1-3.py

# 関数を呼び出す(1)

# 定義した関数は何度でも呼び出すことができます。今回は定義した関数を 3 回呼び出しました。また 3 回目に呼び出した時は、関数から返ってきた値を変数に代入し、その変数の値を出力してみました。

# 関数名の付け方
# 関数名は次のルールに従って付けてください。(変数名と同じです)。

# ・使用できる文字は a ～ z 、 A ～ Z 、 0 ～ 9 、アンダーバー(_)、漢字など
# ・一文字目に数値(0～9)は使用できない
# ・一文字目にアンダーバーは使用できるが特別な用途で使用されているケースが多いので通常は使用しない方がいい
# ・大文字と小文字は区別される
# ・予約語は使用できない

# 一つ一つ確認していきます。

# 関数名には英数字とアンダーバーに加えて Python 3 では漢字なども使用できます(あまりおすすめではありません)。

# >>> def 挨拶():
# ...     print("Hello")
# ...
# >>>挨拶()
# Hello
# >>>
# 数字は関数名に使用できますが、 1 文字目で使用すると SyntaxError エラーとなります。

# >>> def 7hello():
#   File "<stdin>", line 1
#     def 7hello():
#         ^
# SyntaxError: invalid syntax
# >>>
# 関数名では大文字と小文字は区別されます。

# >>> def Sample():
# ...     print("HELLO")
# ...
# >>> def sample():
# ...     print("hello")
# ...
# >>> Sample()
# HELLO
# >>> sample()
# hello
# >>>
# 予約語というのは Python の構文などで使用される単語です(例えば if とか and とか)。予約語の一覧は次の通りです。

# False      await      else       import     pass
# None       break      except     in         raise
# True       class      finally    is         return
# and        continue   for        lambda     try
# as         def        from       nonlocal   while
# assert     del        global     not        with
# async      elif       if         or         yield
# 予約語は関数名には使用できません。変数名として定義しようとすると SyntaxError エラーとなります。

# >>> def from():
#   File "<stdin>", line 1
#     def from():
#            ^
# SyntaxError: invalid syntax
# >>>
# なお組み込み関数と同じ名前でユーザー定義関数を定義すると、関数が上書きされます。例えば絶対値を返す組み込み関数 abs を同じ関数名を使って上書きしてみます。

# >>> abs(-5)
# 5
# >>> def abs(num):
# ...     return 0
# ...
# >>> abs(-5)
# 0
# >>>
# 最初に abs 関数を呼び出したときはまだ組み込み関数の方が呼び出されるため絶対値を取った値が返されてきますが、同じ関数名で常に 0 を返すように関数を定義したあとで abs 関数を呼び出すと 0 が帰ってきます。

# -- --

# ユーザー定義関数を定義する方法、および関数を呼び出す方法について解説しました。



# 【関数を呼び出すときに引数を使って値を渡す】
# 関数を呼び出すときに引数を使って値を渡す

# 関数を呼び出す時に引数を指定することで関数側でその値を利用することができます。ここでは関数を呼び出す時に引数を指定する方法について解説します。

# 目次

# 引数を指定した関数の呼び出し
# 実引数と仮引数の数

# 引数を指定した関数の呼び出し
# 関数を呼び出す時に引数を利用することで数値や文字列といった値を関数に渡すことが出来ます。呼び出された関数では、呼び出した側から渡された値をそれぞれ変数に代入し関数内で利用することができます。例えば次のような関数を例に考えてみます。

# def myfunc(str1, num1):
#     print(str1)
#     print(num1)
# 関数では関数名のあとに続く ( と ) の中に引数を記述します。これを仮引数と呼びます。仮引数には、関数の呼び出し側から渡されてくる値を受け取るための変数名を記述します。上記の関数の場合、引数が 2 つ定義されており、それぞれ str1 と num1 という変数が記述されています。

# 関数を呼び出す時には、関数側で定義されている引数の数だけ値を指定して呼び出します。これを実引数と呼びます。値は呼び出す関数名を記述したあとで ( と ) の中に記述します。この関数は 2 つの引数が定義されているので関数を呼び出す時には値を 2 つ指定して次のように呼び出します。

# myfunc("Yamada", 28)
# 関数が呼び出されると、呼び出し側で指定した値がそれぞれ関数側で引数のところに記述した変数に代入されます。今回の場合は呼び出し側で "Yamada" と 28 の 2 つの値を指定していますので、関数側では変数 str1 に "Yamada" が代入され、変数 num1 には 28 が代入されます。

# 関数内では引数のところに記述した変数に代入された値を参照し、利用することができます。先ほどの関数の場合は引数に渡されてきた値を画面に出力しています。結果として、関数を呼び出し時に指定した 2 つの値が、関数内で画面に出力されることになります。

# 関数に渡すことができる値は、文字列や数値だけではなくリストやタプルのオブジェクトでも可能です。呼び出された関数側では引数を使って渡されたリストやタプルのオブジェクトを利用することができます。なお一度作成されると変更ができないイミュータブルなオブジェクトの数値や文字列と、あとから変更できるミュータブルなオブジェクトのリストでは取り扱い方法が少し異なります。詳しくは「Pythonの引数における参照渡しと値渡しについて」で解説します。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample2-1.py という名前で保存します。

# def myfunc(str1, num1):
#     print("Name: " + str1 + ", Old: " + str(num1))

# myfunc("Yamada", 28)
# myfunc("Suzuki", 32)
# その後で、次のように実行してください。

# python sample2-1.py

# 引数を指定した関数の呼び出し(1)

# 今回のサンプルでは引数に渡す値を変えて関数を 2 回呼び出しています。呼び出された関数では引数を使って渡された値を使用して画面に出力を行っています。

# -- --

# もう一つサンプルを試してみます。テキストエディタで次のように記述したあと、 sample2-2.py という名前で保存します。

# def myfunc(mylist):
#     print("Name: " + mylist[0] + ", Old: " + str(mylist[1]))

# myfunc(["Yamada", 28])
# myfunc(["Suzuki", 34])
# その後で、次のように実行してください。

# python sample2-2.py

# 引数を指定した関数の呼び出し(2)

# 今回のサンプルではリストのオブジェクトを引数に指定して関数を呼び出しています。関数側では引数を使って渡されたリストのオブジェクトの要素から値を取得して画面に出力を行っています。

# 実引数と仮引数の数
# 関数を呼び出す時に指定する値の数(実引数の数)と、呼び出される関数側で定義している引数の数(仮引数の数)は同じである必要があります。関数側で例えば 3 つ引数を受け取るように定義されている場合、この関数を呼び出すには 3 つの値を指定して呼び出す必要があります。

# もし関数側で 3 つ引数を受け取るように定義されているのに、関数を呼び出すときに値を 2 つしか指定しなかったり、 4 つも指定したばあいには TypeError エラーが発生します。

# 例えば次のように引数を 2 つ受け取るように記述した関数を定義します。

# >>> def myfunc(num1, num2):
# ...     return num1 + num2
# ...
# >>>
# この関数を呼び出す時に、値を 2 つ指定して呼び出した場合は正常に呼び出しが行われます。

# >>> def myfunc(num1, num2):
# ...     return num1 + num2
# ...
# >>> myfunc(10, 20)
# 30
# >>>
# この関数を呼び出す時に、値を 1 つだけしか指定せずに呼び出すと TypeError エラーとなります。

# >>> def myfunc(num1, num2):
# ...     return num1 + num2
# ...
# >>> myfunc(10)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# TypeError: myfunc() missing 1 required positional argument: 'num2'
# >>>
# 同じようにこの関数を呼び出す時に、値を 3 つ指定して呼び出すと TypeError エラーとなります。

# >>> def myfunc(num1, num2):
# ...     return num1 + num2
# ...
# >>> myfunc(10, 20, 30)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# TypeError: myfunc() takes 2 positional arguments but 3 were given
# >>>
# このように関数側の仮引数の数と、関数を呼び出す側の実引数の数は同じである必要がありますのご注意ください。なお引数に対してデフォルト値を指定したり、可変数の引数を設定した場合は別です。これらは別のページで解説します。

# -- --

# 関数を呼び出す時に引数を指定する方法について解説しました。



# 【Pythonの引数における参照渡しと値渡しについて】
# Pythonの引数における参照渡しと値渡しについて
# ※画像添付漏れあり、、、
# https://www.javadrive.jp/python/userfunc/index3.html

# 関数を呼び出す時に引数を使って値を関数に渡す場合、 Python では値をコピーして渡す値渡しではなく値が格納されている場所を渡す参照渡しが使われます。ここでは値渡しと参照渡しの違いを簡単にご説明したあと、 Python では実際にどのように引数を利用して関数に渡されるのかについて解説します。

# 目次

# 値渡しと参照渡しとは
# Pythonにおける引数の参照渡しの仕組み

# 値渡しと参照渡しとは
# Python でどのように引数の参照渡しが行われるのかを見る前に、一般的な値渡しと参照渡しの違いについて解説します。(使用されるプログラミング言語によってどちらかの方式が使用されるか決まっているばあいが多いです)。

# 値渡し
# 値渡しとは関数を呼び出す時に仮引数に指定した値をコピーして実引数に渡す方式です。

# 値渡しとは(1)

# 同じ値を保管しますが、保管している場所がそれぞれ独立しているので、関数内で実引数が格納された変数の値が変更されても、呼び出し元の変数の値には影響がでません。

# 値渡しとは(2)

# 参照渡し
# 参照渡しとは関数を呼び出す時に仮引数に指定した値が保管されている場所の情報を実引数に渡す方式です。

# 参照渡しとは(1)

# 同じ場所に保管されている値を関数側の変数と呼び出し元の変数が参照しているので、関数内で変数の値を変更すると呼び出し元の変数が参照している値も変更されます。

# 参照渡しとは(2)

# このように値渡しと参照渡しでは関数内で値が変更された場合の挙動が異なりますので、どちらの方式が使わているのか知っておくことは重要です。

# Pythonにおける引数の参照渡しの仕組み
# Python では関数を呼び出す時に引数を指定すると参照渡しが使用されます。ただ、 Python の場合文字列や数値などのような一度作成すると変更できないイミュータブルなオブジェクトを引数に指定した場合と、リストや辞書など作成したあとで変更できるミュータブルなオブジェクト引数に指定した場合で少し挙動が異なります。

# 引数にイミュータブルなオブジェクトを指定した場合
# 最初に引数に数値や文字列なおイミュータブルなオブジェクトを指定した場合で確認してみます。数値や文字列を指定した場合も参照渡しが使われることは違いがありません。

# Pythonにおける引数の参照渡しの仕組み(1)

# 次のサンプルプログラムをみてください。変数 x に代入されたオブジェクトの ID を出力したあと、関数を呼び出し関数内で変数 n に代入されたオブジェクトの ID を出力しています。どちらも同じオブジェクトを参照していることが確認できます。

# >>> def myfunc(n):
# ...     print(id(n))
# ...
# >>> x = 10
# >>> print(id(x))
# 140734579303344
# >>> myfunc(x)
# 140734579303344
# >>>
# ただ文字列や数値などのイミュータブルなオブジェクトは作成された後で値を変更することができません。その為、関数内で実引数を代入された変数に変更が加えられて新しい値が代入されると、別の保管場所に新しい値を保存した上でその場所を参照するようになります。

# Pythonにおける引数の参照渡しの仕組み(2)

# 次のサンプルプログラムをみてください。関数内で変数 n に対して値を変更していますが、呼び出し元の変数 x が参照している値は元のままです。

# >>> def myfunc(n):
# ...     print(n)
# ...     n += 3
# ...     print(n)
# ...
# >>> x = 10
# >>> print(x)
# 10
# >>> myfunc(x)
# 10
# 13
# >>> print(x)
# 10
# >>>
# このように参照渡しであっても引数にイミュータブルな値を指定した場合には値渡しのような挙動となります。

# 引数にミュータブルなオブジェクトを指定した場合
# 次に引数にリストや辞書などミュータブルなオブジェクトをを指定した場合で確認してみます。リストや辞書を指定した場合も参照渡しが使われることは同じです。

# Pythonにおける引数の参照渡しの仕組み(3)

# 次のサンプルプログラムをみてください。変数 x に代入されたオブジェクトの ID を出力したあと、関数を呼び出し関数内で変数 n に代入されたオブジェクトの ID を出力しています。どちらも同じオブジェクトを参照していることが確認できます。

# >>> def myfunc(n):
# ...     print(id(n))
# ...
# >>> x = [10, 20]
# >>> print(id(x))
# 2603146306248
# >>> myfunc(x)
# 2603146306248
# >>>
# リストなどのミュータブルなオブジェクトは、あとから要素の値などを変更することができます。関数内で実引数を代入された変数に変更が加えられると、現在の保管場所に保管されている値が変更されるため、関数の呼び出し元の変数が参照している値も変更されます。

# Pythonにおける引数の参照渡しの仕組み(4)

# 次のサンプルプログラムをみてください。関数内で変数 n に対して要素の値を変更を行うと、呼び出し元の変数 x が参照しているリストの要素も変更されます。

# >>> def myfunc(n):
# ...     print(n)
# ...     n[1] = 15
# ...     print(n)
# ...
# >>> x = [10, 20]
# >>> print(x)
# [10, 20]
# >>> myfunc(x)
# [10, 20]
# [10, 15]
# >>> print(x)
# [10, 15]
# >>>
# このようにミュータブルなオブジェクトを引数に指定した場合は、参照渡しそのものの挙動となります。

# Python において引数を使用した場合は参照渡しによって関数に引き渡されることに違いはありませんが、引数に指定したオブジェクトがイミュータブルなオブジェクトなのかミュータブルなオブジェクトなのかによって挙動が異なりますのでご注意ください。

# -- --

# 参照渡しと値渡しの違いについて解説し、 Python において引数の参照渡しがどのように行われるのかを解説しました。



# 【関数からreturn文を使って呼び出し元へ戻り値を返す】
# 関数からreturn文を使って呼び出し元へ戻り値を返す

# 関数が呼び出されたあと return 文を使用することで関数の呼び出し元へ値を返すことができます。ここでは関数から呼び出し元へ戻り値を返す方法について解説します。

# 目次

# return文を使って戻り値を返す
# 複数の値を戻り値として返す

# return文を使って戻り値を返す
# 関数を呼び出すと、関数のブロック内の処理が上から順に行われ、ブロックの最後まで達すると関数内での処理は終了し、呼び出しもとに処理が戻ります。この時、関数からは呼び出し元へ None という値が返されます。

# 次の例を見てください。

# >>> def myfunc():
# ...     print("Hello")
# ...
# >>>x = myfunc()
# Hello
# >>> print(x)
# None
# >>>
# 関数を呼び出したあと、関数から戻ってきた値を変数 x に代入し画面に出力しています。明示的に関数から戻す値を指定しない場合はこのように None という値が返されます。

# 関数から関数の呼び出し元へ任意の値を返す場合には return 文を使用します。

# return 戻り値
# 関数内で return 文が実行されるとそこで関数内での処理はは終了し、関数の呼び出しもとに処理が戻ります。この時 return 文のあとに戻り値が記載されていた場合は、この値が呼び出し元に戻ります。

# 次の例を見てください。

# >>> def myfunc():
# ...     print("Hello")
# ...     return "Good bye"
# ...
# >>> x = myfunc()
# Hello
# >>> print(x)
# Good bye
# >>>
# 関数を呼び出したあと、関数から戻ってきた値を変数 x に代入し画面に出力しています。関数の中で return 文を使って "Good bye" という文字列を戻り値として返しています。

# return 文は関数の最後だけではなく、関数のブロック内の任意の場所に記述できます。どこに記述されていても return 文が実行されると関数内での処理はそこで終了となります。また return 文は複数記述することができます。関数内で条件分岐を記述し、条件に応じて異なる戻り値を呼び出し元に返すこともできます。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample4-1.py という名前で保存します。

# def myfunc(num):
#     if num % 2 == 0:
#     	return "偶数です"
#     return "奇数です"

# for i in range(1, 10):
#     print(str(i) + "は" + myfunc(i))
# その後で、次のように実行してください。

# python sample4-1.py

# return文を使って戻り値を返す(1)

# 今回のサンプルでは for 文を使って関数に渡す引数の値を変化させ、関数内では渡されてきた値に応じて複数の return 文を使って呼び出しもとに返す値を変えています。

# 複数の値を戻り値として返す
# return 文の後に記述できる戻り値は 1 つだけですが、複数の値を要素として持つタプルなどのオブジェクトを作成し戻り値として設定することで複数の値を実質的に関数の呼び出しもとに返すことができます。

# 次の例を見てください。

# >>> def myfunc():
# ...     name = "Yamada"
# ...     old = 24
# ...     return (name, old)
# ...
# >>> x = myfunc()
# >>> print("name : " + x[0])
# name : Yamada
# >>> print("old : " + str(x[1]))
# old : 24
# >>>
# 関数内で 2 つの引数の値を使ってタプルのオブジェクトを作成し、 return 文の戻り値として設定しています。関数を呼び出したあとで、戻り値として帰ってきたタプルから要素をそれぞれ取り出して画面に出力しています。このようにタプルなどのオブジェクトを戻り値として使用することで、複数の値を呼び出し元に戻すことができました。

# なおタプルのオブジェクトを作成する時に ( と ) は省略可能なので、先ほどの例の関数は次のように記述することができます。

# >>> def myfunc():
# ...     name = "Yamada"
# ...     old = 24
# ...     return name, old
# ...
# ただタプルのオブジェクトを作成して戻り値として設定しているということが分かりにくいので、 ( と ) は省略せずに記載しています。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample4-2.py という名前で保存します。

# def myfunc(num1, num2):
#     goukei = num1 + num2
#     heikin = (num1 + num2) / 2
#     return (goukei, heikin)

# num1 = 10
# num2 = 8
# x = myfunc(num1, num2)

# print("num1 = " + str(num1))
# print("num2 = " + str(num2))
# print("合計 = " + str(x[0]))
# print("平均 = " + str(x[1]))
# その後で、次のように実行してください。

# python sample4-2.py

# 複数の値を戻り値として返す(1)

# 今回のサンプルでは関数内で複数の計算を行い、それぞれの結果を要素として持つタプルのオブジェクトを作成し関数の呼び出し元に戻り値として返しています。

# -- --

# 関数から呼び出し元へ戻り値を返す方法について解説しました。



# 【引数にデフォルト値を設定する】
# 引数にデフォルト値を設定する

# 引数を受け取るように設定した関数で、仮引数に対してデフォルト値を設定しておくと関数を呼び出す時に引数を省略することができます。ここでは引数にデフォルト値を設定する方法について解説します。

# 目次

# 引数にデフォルト値を設定する
# 複数の引数にデフォルト値を設定する場合の注意点
# デフォルト値にリストなどのミュータブルオブジェクトを設定する場合の注意点

# 引数にデフォルト値を設定する
# 関数を定義するときに引数にデフォルト値を設定することができます。デフォルト値が設定されていると関数の呼び出しが行われた時に引数が省略されると代わりにデフォルト値が使用されます。

# 引数にデフォルト値を設定する場合は次のように記述します。

# def 関数名(引数 = デフォルト値):
#     関数内で実行する処理

#     return 戻り値
# 関数を呼び出す時に、引数をを指定していればその値が使用され、引数が省略された場合はデフォルト値が代わりに使用されます。

# 次の例を見て下さい。

# >>> def myfunc(msg = "Hello"):
# ...     print(msg)
# ...
# >>> myfunc("こんにちは")
# こんにちは
# >>> myfunc()
# Hello
# >>>
# 引数のデフォルト値として "Hello" を設定しています。関数を呼び出す時に引数を指定した場合はその値が使用されますが、引数を省略した場合はデフォルト値が実引数の代わりに仮引数に代入されて使用されます。

# 複数の引数にデフォルト値を設定する場合の注意点
# 複数の引数がある場合、それぞれにデフォルト値を設定することができます。また一部の引数にだけデフォルト値を設定することができます。ただし複数の引数がある場合に一部の引数にだけデフォルト値を設定する場合、デフォルト値のない引数がデフォルト値のある引数よりも後に記述することはできません。

# 次のようにすべての引数にデフォルト値を設定するか、デフォルト値が設定されている引数がデフォルト値が設定されていない引数よりも後に定義されている場合は問題ありません。

# 〇 全ての引数にデフォルト値を設定する
# def 関数名(引数1 = デフォルト値1, 引数2 = デフォルト値2):
#     return

# 関数名(n1, n2)
# 関数名(n1)
# 関数名()

# 〇 二番目の引数にだけデフォルト値を設定する
# def 関数名(引数1, 引数2 = デフォルト値2):
#     return

# 関数名(n1, n2)
# 関数名(n1)
# デフォルト値が設定されていない引数がある場合には、必ずその分は実引数を指定して関数を呼び出す必要があります。

# 次のようにデフォルト値が設定されている引数がデフォルト値が設定されてない引数よりも前に定義されている場合はエラーとなります。

# × 一番目の引数にだけデフォルト値を設定する
# def 関数名(引数1 = デフォルト値1, 引数2):
#     return

# × 三つある引数の二番目の引数にだけデフォルト値を設定する
# def 関数名(引数1, 引数2 = デフォルト値2, 引数3):
#     return
# 次の例を見てください。一番目の引数にだけデフォルト値を設定して関数を定義しようとすると SyntaxError エラーとなります。

# >>> def myfunc(n1 = 10, n2):
# ...     return
# ...
#   File "<stdin>", line 1
# SyntaxError: non-default argument follows default argument
# >>>
# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample5-1.py という名前で保存します。

# def myfunc(num1, str1 = "未入力", str2 = "不明"):
# 	print("年齢は" + str(num1) + "です。", end='')
# 	print("名前は" + str1 + "です。", end='')
# 	print("住所は" + str2 + "です。")

# myfunc(28, "Suzuki", "Tokyo")
# myfunc(25, "Yamada")
# myfunc(30)
# その後で、次のように実行してください。

# python sample5-1.py

# 複数の引数にデフォルト値を設定する場合の注意点(1)

# 引数が 3 つあり、二番目と三番目の引数にはデフォルト値が設定されています。関数を呼び出す時に引数を省略すると、デフォルト値が代わりに使用されます。

# デフォルト値にリストなどのミュータブルオブジェクトを設定する場合の注意点
# デフォルト値を使用する場合でもう一つ注意すべき点が、デフォルト値の評価は関数の定義が行われる時に一度だけしか行われないという点です。

# 例えば次のような関数を定義したとします。

# def myfunc(num1, num2 = 10):
#     num2 *= 2
#     print(num1 + num2)

# myfunc(5)
# myfunc(7)
# 引数の num2 にはデフォルト値として 10 が設定されています。関数を呼び出すときに 2 番目の引数を省略すると、関数側で仮引数の変数 num2 にデフォルト値の 10 が代入されるのですが、関数が呼ばれるたびにこの代入が行われるのではなく、関数が定義された時に一度だけ行われます。

# より具体的には関数が定義された時にデフォルト値として設定した 10 という値が保管されている場所を変数 num2 が参照するように設定されます。そして関数が呼び出されるたびにこの設定が毎回適用されます。つまり毎回 num2 は関数の定義時にデフォルト値が保管された同じ場所を参照します。

# デフォルト値が数値や文字列のような一度作成すると変更できないイミュータブルなオブジェクトの場合、関数の中で変数 num2 に違う値を代入すると、もともと 10 というデフォルト値が保管された場所の値を書き換えるのではなく、新しい場所に新しい値を保管した上で変数 num2 が参照するようになるのでもともと 10 というデフォルト値が保管された場所の値は変わりません。その為、再び関数が呼び出されると変数 num2 は常に最初と同じ場所を参照し 10 という値を持ちます。

# このようにデフォルト値がイミュータブルなオブジェクトの場合はあまり気にされる必要はないのですが、デフォルト値がリストなどのミュータブルなオブジェクトの場合は注意が必要です。例えば次のような関数を定義したとします。

# def myfunc(str1, list1 = ["a"]):
#     list1.append(str1)
#     return list1

# myfunc("b")
# myfunc("c")
# myfunc("d")
# 引数の list1 にはデフォルト値としてリストのオブジェクトである ["a"] が設定されています。この場合も同じように関数を定義した時に一度だけ評価が行われます。具体的にはデフォルト値として ["a"] という値が保管されている場所を変数 list1 が参照するにように設定されます。そして関数が呼び出される時にこの設定が毎回適用されます。つまり毎回 list1 は関数の定義時にデフォルト値が保管された同じ場所を参照します。

# デフォルト値がリストのようなミュータブルなオブジェクトの場合、関数の中で変数 list1 に対して要素を追加するなど変更を加えると、もともと ["a"] というデフォルト値が保管された場所の値が書き換えられます。再び関数が呼び出されると変数 list1 は常に最初と同じ場所を参照するため書き換えられた値を持ってしまいます。

# 先ほどの例を実際に試してみると次のような結果となります。

# >>> def myfunc(str1, list1 = ["a"]):
# ...     list1.append(str1)
# ...     return list1
# ...
# >>> myfunc("b")
# ['a', 'b']
# >>> myfunc("c")
# ['a', 'b', 'c']
# >>> myfunc("d")
# ['a', 'b', 'c', 'd']
# >>>
# 関数を呼び出すたびに、引数の list1 に ["a"] というデフォルト値が代入されるわけではなく、同じ場所に保管されている値を関数を呼び出すたびに変更を加えています。もちろん仕様を理解した上でこのように動作させることを目的としている場合はいいのですが、そうではなく毎回初期化が行われるものと想定していると想定外の結果となるため注意が必要です。

# なおリストのようなミュータブルなオブジェクトを毎回初期化して利用したい場合は、次のようにプログラムを変更するように公式サイトでは解説しています。

# >>> def myfunc(str1, list1 = None):
# ...     if list1 is None:
# ...         list1 = ["a"]
# ...     list1.append(str1)
# ...     return list1
# ...
# >>> myfunc("b")
# ['a', 'b']
# >>> myfunc("c")
# ['a', 'c']
# >>> myfunc("d")
# ['a', 'd']
# >>>
# デフォルト値にミュータブルなオブジェクトを指定せずに代わりに None などを指定しておき、関数の処理の中で改めて引数が代入された変数に対して初期値を設定するという方法です。デフォルト値がミュータブルなオブジェクトではないので、関数の中で変更を加えてもデフォルト値が参照する場所の値は変化しません。その為、関数が呼び出されるたびに list1 には None が保管されている場所を参照するように設定されて、結果として毎回初期化が行われます。

# -- --

# 引数にデフォルト値を設定する方法について解説しました。



# 【キーワード引数を使って関数を呼び出す】
# キーワード引数を使って関数を呼び出す

# 引数を指定して関数を呼び出す時に、値だけを指定するのではなく関数側で定義されている仮引数の名前を使って 仮引数の名前=値 の形式で指定することができます。このような形式をキーワード引数と呼びます。ここではキーワード引数を使って関数を呼び出す方法について解説します。

# 目次

# 位置引数とキーワード引数

# 位置引数とキーワード引数
# 引数を指定して関数を呼び出す場合、呼び出し側で指定した引数の値が順番に関数側で引数のところに定義した変数に順番に代入されます。このような形式を位置引数と呼びます。

# def 関数名(仮引数1, 仮引数2):
#     ....
#     return

# 関数名(実引数1, 実引数2)
# 位置引数の場合、引数を記載した順番に従って引数の値が渡されますので、実引数1は仮引数1へ渡され、実引数2は仮引数2へ渡されます。

# それに対してキーワード引数の形式では、関数を呼び出す側でどの仮引数にどの値を渡すのかを 仮引数の名前=値 の形式で指定します。

# def 関数名(仮引数1, 仮引数2):
#     ....
#     return

# 関数名(仮引数1=実引数1, 仮引数2=実引数2)
# キーワード引数の場合、関数側のどの仮引数に対して値を渡すのかが指定されていますので引数を記述する順番は任意となります。よって次のように順番を逆にしても構いません。

# def 関数名(仮引数1, 仮引数2):
#     ....
#     return

# 関数名(仮引数2=実引数2, 仮引数1=実引数1)
# 次の例を見てください。

# >>> def myfunc(num1, str1):
# ...     print("num1=" + str(num1))
# ...     print("str1=" + str1)
# ...
# >>> myfunc(num1=10, str1="Orange")
# num1=10
# str1=Orange
# >>> myfunc(str1="Lemon", num1=15)
# num1=15
# str1=Lemon
# >>>
# キーワード引数の形式で関数を呼び出しています。キーワード引数の形式の場合は、引数を記述する順番は自由です。

# 位置引数とキーワード引数を混在させる
# 位置引数とキーワード引数を混在させて関数を呼び出すこともできます。その場合は最初に位置引数を指定し、その後でキーワード引数を記述してください。

# def 関数名(仮引数1, 仮引数2, 仮引数3):
#     ....
#     return

# 関数名(実引数1, 仮引数2=実引数2, 仮引数3=実引数3)
# キーワード引数のあとに仮引数名が指定されていない引数を指定した場合は SyntaxError: positional argument follows keyword argument というエラーとなります。

# キーワード引数はどういったケースで利用されるのが有用なのかは分かりませんが、引数の数が非常に多く、どの引数に対する値なのかを明確にしたい場合などには有効かもしれません。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample6-1.py という名前で保存します。

# def myfunc(old, name, address):
# 	print("年齢は" + str(old) + "です。", end='')
# 	print("名前は" + name + "です。", end='')
# 	print("住所は" + address + "です。")

# myfunc(28, "Suzuki", "Tokyo")
# myfunc(address="Osaka", old=25, name="Yamada")
# myfunc(32, address="Kyoto", name="Honda")
# その後で、次のように実行してください。

# python sample6-1.py

# 位置引数とキーワード引数(1)

# 最初に通常の形式で関数を呼び出し、次にキーワード引数の形式で関数を呼び出しています。最後に通常の形式とキーワード形式を混在させて関数を呼び出しています。

# -- --

# キーワード引数を使って関数を呼び出す方法について解説しました。



# 【関数で可変個数の引数を受け取る】
# 関数で可変個数の引数を受け取る

# 関数側の定義で引数の数が決まっていなくても可変個の引数を受け取るように定義することができます。ここでは関数で可変個数の引数を受け取るように定義する方法について解説します。

# 目次

# 可変個数の引数を定義する

# 可変個数の引数を定義する
# 関数を呼び出す側で指定する引数(実引数)の数と関数側の引数(仮引数)の数は同じです。(デフォルト値を設定している場合は省略することもできます)。

# def 関数名(仮引数1, 仮引数2):
#     ....
#     return

# 関数名(実引数1, 実引数2)
# 関数側の仮引数の名前の前にアスタリスク(*)を付けると、その仮引数は 0 個から任意の数の値を受け取ることが出来るようにになります。

# def 関数名(仮引数1, *仮引数2):
#     ....
#     return

# 関数名(実引数1)
# 関数名(実引数1, 実引数2)
# 関数名(実引数1, 実引数2, 実引数3)
# 関数名(実引数1, 実引数2, 実引数3, 実引数4)
# 関数名(実引数1, 実引数2, 実引数3, 実引数4, 実引数5)
# 上記の場合、実引数 1 は仮引数 1 に代入されますが、実引数 2 から 実引数 5 まではすべて仮引数 2 に代入されることになります。この時に、複数の値を代入できるように仮引数 2 はタプルのオブジェクトになり、引数として渡されてきた値はタプルの要素として追加されます。

# 次の例を見てください。

# >>> def myfunc(num1, *tupple1):
# ...     print(tupple1)
# ...
# >>> myfunc(10)
# ()
# >>> myfunc(10, "Hello")
# ('Hello',)
# >>> myfunc(10, "Hello", 25)
# ('Hello', 25)
# >>> myfunc(10, "Hello", 25, "Orange")
# ('Hello', 25, 'Orange')
# >>> myfunc(10, "Hello", 25, "Orange", True)
# ('Hello', 25, 'Orange', True)
# >>>
# 関数を呼び出す時、 1 番目の引数は関数側の num1 に常に代入されますが、 2 番目以降に指定した引数はすべて関数側の tupple1 の要素として追加されています。なお 2 番目の引数を省略した場合は tupple1 は空のタプルとなります。

# 関数側ではタプルの要素を順に取り出すことで、渡されてきた引数の値を取り出すことができます。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample7-1.py という名前で保存します。

# def myfunc(category, *ranktuple):
#     count = 1
#     print(category)
#     for val in ranktuple:
#         print("No." + str(count) + ":" + val)
#         count += 1
#     print("¥n", end='')

# myfunc("Fruits", "Orange", "Melon", "Banana", "Apple")
# myfunc("Mobile", "Android", "iPhone")
# その後で、次のように実行してください。

# python sample7-1.py

# 可変個数の引数を定義する(1)

# 関数を呼び出す時に指定した引数の数に応じて関数内で表示するテキストの数を変更してみました。

# -- --

# 関数で可変個数の引数を受け取るように定義する方法について解説しました。

