# 【変数の使い方】

# Pythonにおける変数とは
# 変数の定義と値の代入
# 累算代入演算子(複合代入演算子)の使い方
# 変数を削除する



# 【Pythonにおける変数とは】
# Pythonにおける変数とは
# 変数に関する基本的な説明と、 Python では変数をどのように利用するのかについて解説します。

# 変数とは
# Python に限らずほとんどのプログラミング言語では値を格納するために変数と呼ばれるものを使用します。変数というのは繰り返し使用したり後から参照したい数値や文字列を格納する場合に使用されます。

# 例えば次の例では商品の販売価格を価格×消費税という計算をして画面に出力しています。

# print("オレンジの値段は" + str(120 * 1.08))
# print("リンゴの値段は" + str(90 * 1.08))
# print("バナナの値段は" + str(100 * 1.08))

# 消費税の税率を毎回記載しているとケアレスミスで間違えることもありますし、税率が変更された場合にすべて変更しなければなりません。このような時に変数を使うと便利です。

# tax = 1.08
# print("オレンジの値段は" + str(120 * tax))
# print("リンゴの値段は" + str(90 * tax))
# print("バナナの値段は" + str(100 * tax))

# tax という変数を定義し、税率である 1.08 を代入しています。数値や文字列を直接記載する代わりに値が代入された変数を記載することで、その変数に代入されている値が書かれているのとを同じ結果となります。

# 変数を使うことで直接数値を書き込むよりもケアレスミスが起きにくくなり、また税率が変更された場合も変数への値の代入だけを変更するだけで済みます。

# tax = 1.1 # 税率が変更された場合に変更するのはこの1か所
# print("オレンジの値段は" + str(120 * tax))
# print("リンゴの値段は" + str(90 * tax))
# print("バナナの値段は" + str(100 * tax))

# -- --

# また演算した結果を保存しておく場合にも変数は便利です。例えば英語、数学、国語の成績の合計と平均を求める例で考えてみます。

# print("テストの成績の合計は" + str(80 + 72 + 84))
# print("テストの成績の平均は" + str((80 + 72 + 84)/3))

# 合計と平均を計算するのに毎回 80 + 72 + 84 という演算を行っています。このような場合に変数を使うと便利です。

# sum = 80 + 72 + 84
# print("テストの成績の合計は" + str(sum))
# print("テストの成績の平均は" + str(sum/3))

# sum という変数を定義し、テストの合計を計算して代入しています。合計を出力する場合は変数の値をそのまま出力し、平均を出力する場合は変数に代入された合計点を除算した結果を出力します。テストの合計点を何度も計算せずに済みだけでなく、プログラムも見やすくなりまた成績を修正する場合も簡単になります。

# このように変数は大変便利なもので、プログラムを記述する上でなくてはならないものです。

# Pythonにおける変数
# 変数の基本的な考え方はどのプログラミング言語でも基本的に同じですが、変数と変数に代入される値の関係について大きく 2 つに分かれます。

# 最初に変数を値を保存する箱と考える方式です。値は変数という箱の中に保管され、変数を使用する時は変数に格納されている値を取り出して使います。

# Pythonにおける変数(1)

# 変数 A に保管されている値を別の変数 B に代入した場合、変数 B の箱には変数 A に格納されていた値のコピーが保管されます。それぞれの箱には値は同じですが別々の値が保管されることになります。

# Pythonにおける変数(2)

# もう一つは値はそれぞれ独自の場所に保管されており、変数はその値の場所を示すラベルであると考える方式です。変数を使用する時は、変数が指し示す場所に格納されている値を取り出して使います。

# Pythonにおける変数(3)

# 変数 A に格納されている値を別の変数 B に代入した場合、変数 A が指し示していた値を変数 B も指し示します。 2 つの変数は同じ値を指し示すことになります。

# Pythonにおける変数(4)

# Python での変数は箱ではなくラベルです。変数に数値や文字列などのイミュータブルと呼ばれる一度作成すると変更できないオブジェクトを格納したり、取り出したりして利用する場合には 2 つの方法の違いはあまり気にされる必要はありません。ただ、リストや辞書などのミュータブル(変更可能)なオブジェクトを変数に格納する場合は箱なのかラベルなのかの違いは重要となってくるので Python の変数がどちらなのかについては覚えておかれてください。

# -- --

# 変数の基本的な使い方と、 Python における変数の考え方について解説しました。



# 【変数の定義と値の代入】
# 変数の定義と値の代入
# Python では変数を利用するためには最初に変数を定義します。ここでは変数を定義する方法や、変数名の付け方などについて解説します。

# 目次

# 変数を定義する
# 変数名の付け方
# 定義済の変数に別の値を代入する
# 変数を別の変数に代入する
# 変数を定義する

# Python では変数を使用する時に事前に使用する変数を宣言したり、変数で扱うデータ型を指定する必要はありません。ただし定義されていない変数の値を参照しようとするとエラーが発生します。

# >>> print(num)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# NameError: name 'num' is not defined
# >>>
# Python では変数に値を代入した時に変数が定義されます。

# 変数名 = 値

# 値は数値や文字列、その他のオブジェクトなどです。

# old = 24
# str = "Hello"
# colorlist = ["red", "blue", "yerllow"]
# 代入に使用されている演算子 = は代入演算子と呼ばれるもので、右辺の値やオブジェクトを左辺の変数に代入します。

# 変数が定義されると、変数をプログラムの中で記述することができます。変数を記述すると、変数が参照している値に置き換えられて使用されます。

# >>> num = 10
# >>> print(num)
# 10
# >>>
# この例では変数 num に整数の 10 を代入して変数を定義します。その後で print 関数の引数として変数 num を指定しています。変数 num が参照している 10 に置き換えられて print 関数が実行されて 10 が画面に表示されます。

# 変数名の付け方
# 変数名は次のルールに従って付けてください。

# ・使用できる文字は a ～ z 、 A ～ Z 、 0 ～ 9 、アンダーバー(_)、漢字など
# ・一文字目に数値(0～9)は使用できない
# ・一文字目にアンダーバーは使用できるが特別な用途で使用されているケースが多いので通常は使用しない方がいい
# ・大文字と小文字は区別される
# ・予約語は使用できない

# 一つ一つ確認していきます。

# 変数名には英数字とアンダーバーに加えて Python 3 では漢字なども使用できます(あまりおすすめではありません)。

# >>> address2019 = "Tokyo"
# >>> print(address2019)
# Tokyo
# >>> 年齢=25
# >>> print(年齢)
# 25
# >>>
# 数字は使用できますが一文字目には使用できません。

# >>> 7point = 250
#   File "<stdin>", line 1
#     7point = 250
#          ^
# SyntaxError: invalid syntax
# >>>
# 変数名では大文字と小文字は区別されます。

# >>> str = "Hello"
# >>> Str = "Python"
# >>> print(str, Str)
# Hello Python
# >>>
# 予約語というのは Python の構文などで使用される単語です(例えば if とか and とか)。予約語の一覧は次の通りです。

# False      await      else       import     pass
# None       break      except     in         raise
# True       class      finally    is         return
# and        continue   for        lambda     try
# as         def        from       nonlocal   while
# assert     del        global     not        with
# async      elif       if         or         yield
# 予約語は変数名には使用できません。変数名として定義しようとするとエラーとなります。

# >>> from = "Tokyo"
#   File "<stdin>", line 1
#     from = "Tokyo"
#          ^
# SyntaxError: invalid syntax
# >>>
# これらのルールを踏まえた上で変数名を付けてください。

# 定義済の変数に別の値を代入する
# 変数を定義する時には変数に対して値を代入しますが、一度値が代入された変数に別の値をあらためて代入することができます。

# name = "Yamada"
# name = "Tarou"

# Python では変数は値を保管する場所ではなく、値が保管されている場所を指し示すものです。新しい値を変数に代入すると、変数は新しい値の場所を指し示すようになります(値が数値や文字列の場合)。

# また 変数に代入された値にはそれぞれデータ型がありますが、変数そのものには型はありません。その為、数値型の値を代入して定義した変数に、あとから別のデータ型の値を格納することもできます。

# personal = "Yamada"
# personal = 24

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample1-1.py という名前で保存します。

# personal = "Yamada"
# print(personal)

# personal = "Tarou"
# print(personal)

# personal = 24
# print(personal)

# 定義済の変数に別の値を代入する(1)

# その後で、次のように実行してください。

# python sample1-1.py

# 定義済の変数に別の値を代入する(2)

# 定義済の変数にあとから値を代入して、変数の参照する値が変わっていくことを確認することができました。

# 変数を別の変数に代入する
# 値が代入されて定義された変数は、式の中で使用すると変数が参照している値と置き換えられて実行されます。

# 次の例では print 関数の引数に変数 num が記述されています。 num には整数の 10 が代入されているので、 print 関数の中に num + 5 が 10 + 5 に置き換えられて実行されます。

# num = 10
# print(num + 5)

# また変数を別の変数に代入することができます。次の例では変数 num1 に 10 を代入して定義したあと、今度は変数 num2 に 変数 num1 を代入して定義しています。

# num1 = 10
# num2 = num1

# この場合、変数 num1 と 変数 num2 は同じ場所に保管されている 10 という値を参照することになります。

# 注意頂きたいのは、この後で変数 num1 に別の値を代入すると、 num1 は新しい値を参照するようになりますが、変数 num2 は引き続き 10 という値を参照したままになるということです。

# num1 = 10
# num2 = num1
# num1 = 20

# 数値や文字列などの値は一度保管されたら別の値に置き換えることはできません。 num1 に別の値を代入すると、 num1 が参照していた場所に新しい値が保管されるのではなく、まったく別の場所に新しい値を保管し、その場所を変数 num1 は参照するようになるわけです。この時変数 num2 は元の場所を参照したままなので、変数 num1 は値 20 の場所、変数 num2 は値 10 の場所をそれぞれ参照します。

# ※ 数値や文字列は新しい値で置き換えることはできませんが、変数に新しい値を代入すると変数が参照していた場所に新しい値が保管されるようなデータ型も存在します。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample1-2.py という名前で保存します。

# name1 = "Yamada"
# print("name1=" + name1 + "¥n")

# name2 = name1
# print("name1=" + name1)
# print("name2=" + name2 + "¥n")

# name1 = "Suzuki"
# print("name1=" + name1)
# print("name2=" + name2)

# 変数を別の変数に代入する(1)

# その後で、次のように実行してください。

# python sample1-2.py

# 変数を別の変数に代入する(2)

# 変数を別の変数に代入することで同じ値を参照するようになったり、その後で別の値を代入すると代入された変数だけが新しい値を参照するようになることを確認しました。

# -- --

# 変数を定義する方法や、変数名の付け方などについて解説しました。



# 【累算代入演算子(複合代入演算子)の使い方】
# 累算代入演算子(複合代入演算子)の使い方

# 変数に値を代入するときに、変数に対して演算を行った結果を元の変数に代入する場合に使用する累算代入演算子(または複合代入演算子)の使い方について解説します。

# 目次

# 累算代入演算子の種類と使い方
# 文字列に対して累算代入演算子を使う
# 累算代入演算子の種類と使い方
# 変数には値を代入したり、別の変数に対して演算を行った結果を代入したりすることができます。

# price = 120
# tax = price * 0.08

# また場合によっては変数に代入されている値を 1 だけ加算して、元の変数に再び代入するような処理もよく行われます。このような場合は次のように記述することができます。

# count = 0
# count = count + 1

# = を左辺と右辺が等しいという意味で見てみるとおかしな文になっていますが、 = は右辺の値を左辺の変数に代入するための演算子です。よって変数 count が参照している値に 1 を加算した新しい値を左辺の変数 count に改めて代入するという処理を行っていることになります。結果として変数 count には 1 という値が代入されます。

# このような何らかの演算を行った後で元の変数にあらためて代入するような文を記述する時に累算代入演算子を使用することができます。累算代入演算子を使用すると先ほどの例は次のように書くことが出来ます。

# count = 0
# count += 1

# count = count + 1 と書く代わりに count += 1 と省略して記載することがｄけいます。この += のことを累算代入演算子といいます。 Python では次の種類の累算代入演算子が用意されています。

# 変数 += 式        # 変数 = 変数 + 式
# 変数 -= 式        # 変数 = 変数 - 式
# 変数 *= 式        # 変数 = 変数 * 式
# 変数 /= 式        # 変数 = 変数 / 式
# 変数 //= 式       # 変数 = 変数 // 式
# 変数 %= 式        # 変数 = 変数 % 式
# 変数 **= 式       # 変数 = 変数 ** 式
# 変数 >>= 式       # 変数 = 変数 >> 式
# 変数 <<= 式       # 変数 = 変数 << 式
# 変数 &= 式        # 変数 = 変数 & 式
# 変数 ^= 式        # 変数 = 変数 ^ 式
# 変数 |= 式        # 変数 = 変数 | 式
# 変数が参照されている値から指定した値を減算してから元の変数に改めて代入する場合は += 演算子を使い、指定した値を乗算してから元の変数に改めて代入する場合は *= 演算子を使います。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample6-1.py という名前で保存します。

# num = 10
# print("num = " + str(num))

# # num に 5 を加算します
# num += 5
# print("num = " + str(num))

# # num に 10 を乗算します
# num *= 10
# print("num = " + str(num))

# 累算代入演算子の種類と使い方(1)

# その後で、次のように実行してください。

# python sample6-1.py

# 累算代入演算子の種類と使い方(2)

# 変数が参照している値に対して演算した結果を再び元の変数に代入する場合に累算代入演算子を使用する方法について試してみました。

# 文字列に対して累算代入演算子を使う
# + 演算子は文字列に対して使われると文字列の連結が行われます。(詳細は「文字列の連結と繰り返し(乗算)」を参照されてください)。

# str = "Helllo,"
# str = str + "Python"

# 連結した文字列を元の変数に改めて代入する場合には累算代入演算子を使って次のように記述することができます。

# str = "Helllo,"
# str += "Python"

# また文字列には - や / などの演算子は使用できませんが * 演算子を使って文字列を指定した回数繰り返した新しい文字列を作成することができます。

# str = "Good!"
# str = str * 4

# 指定した回数繰り返した新しい文字列を元の変数に改めて代入する場合は累算代入演算子を使って次のように記述することができます。

# str = "Good!"
# str *= 4

# このように累算代入演算子は数値だけではなく文字列に対しても使用することができます。

# サンプルプログラム
# それでは簡単なサンプルプログラムを作って試してみます。テキストエディタで次のように記述したあと、 sample6-2.py という名前で保存します。

# str = "Helllo,"
# str += "Python"
# print(str)

# str = "Good!"
# str *= 4
# print(str)

# 文字列に対して累算代入演算子を使う(1)

# その後で、次のように実行してください。

# python sample6-2.py

# 文字列に対して累算代入演算子を使う(2)

# 文字列に対しても累算代入演算子が使用でくることを確認しました。

# -- --

# 累算代入演算子(または複合代入演算子)の使い方について解説しました。



# 【変数を削除する】
# 変数を削除する

# 一度定義された変数を del 文を使って削除して使用できないようにする方法について解説します。

# 目次

# 変数を削除する
# 変数を削除する
# 通常一度定義した変数を使用しなくなっても、そのまま放置しておくだけでいいのですが、何らかの理由で明確に削除して変数を未定義に状態に戻したい場合には del 文を使うことで削除することができます。

# del 変数

# 例えば次のように使用します。

# >>> num = 10
# >>> print(num)
# 10
# >>> del num
# >>>
# del 文を使って変数を削除すると、変数は未定義の状態に戻ります。再び定義される前に変数を使用すると NameError が発生します。

# >>> num = 10
# >>> print(num)
# 10
# >>> del num
# >>> print(num)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# NameError: name 'num' is not defined
# >>>
# 何らかの理由で変数を未定義に状態に戻されたい場合に del 文を使用されてください。

# -- --

# 一度定義された変数を del 文を使って削除して使用できないようにする方法について解説しました。

