#4桁の数字を正しく入力してもらう

#【文字は要素を指定する事で１つずつ取得できる】
#入力された4桁の文字も、それぞれの文字を４つに分けて管理すると処理が楽になる
#pythonは文字列はリストと同じ様に[]の添字を使って、先頭から順に一文字ずつ取り出せる
#例えば、ユーザーから「5329」と入力された時、「b[0]」を参照すると「5」と言う文字が、「b[1]」を参照すると「3」と言う文字が得られる

# coding:utf-8
import random

b = input("数を入れてね>")  #ユーザーに4桁の数字を入力してもらう
print(b[0])               #左から順に1文字目から4文字目まで入力してもらう
print(b[1])
print(b[2])
print(b[3])

#【応用】
# s = input("数を入れてね>")
# print(s[0])
# print(s[1])
# print(s[2])
# print(s[3])

#【入力エラーをはじく】
# 入力の際に桁数が３桁や5桁、また数字でなくaやbなどの文字が入った時にエラーとしてはじく
#①4桁であるかチェックする
#pythonでは「len関数」を使って文字列の長さを求められる
# len(b)が4ではないーーすなわち、「if len(b)!4:」と言う条件を指定すると4桁で入力されたかどうか確認できる

# b = input("数を入れてね>")
# if len(b)! = 4:　　　「もし変数のbの文字が4桁でないなら」と言う意味
#     print("4桁の数字を入力してください")

#しかし実際は4桁の確認だけではなく、4桁でなければ4桁がきちんと入力されるまで、繰り返し入力する様に「while」を使ってループ処理する


#coding:utf-8
import random

isok = False                 #フラグ。最初はFalseにしておく
while isok == False:         #フラグがFalseである間、繰り返す
    b = input("数を入れてね>")
    if len(b) != 4:
      print("4桁の数字を入力してください")
    else:
      isok = True            #正しく入力されたらフラグをTrueにする(これで繰り返しを終わらせる)

print(b[0])
print(b[1])
print(b[2])
print(b[3])

# 【応用】
#coding:utf-8
# import random

# isok = False
# while isok == False:
#     p = input("数を入れてね>")
#     if len(p) != 4:
#       print("4桁の数字を入力してください")
#     else:
#       isok = True

# print(p[0])
# print(p[1])
# print(p[2])
# print(p[3])

# while 条件:
#     繰り返したい文
#と書くと繰り返し実行される仕組み

#今回は「値を正しく入力されたか」を判断するために「isok」の変数を使った。isok変数は最初は「False」を設定する

#isok = False
#while isok == False: 
#となるので成り立つ。そのため、whileの中身が実行される
#次に「数を入れてね>」と表示してユーザーが入力した結果を変数bに格納する
#b = input("数を入れてね>")
#そして次に、ifで文が4桁かどうかを判断してる

# if len(p) != 4:
#       print("4桁の数字を入力してください")
#     else:
#       isok = True
#4桁でないときは、「4桁の数字を入力してください」と表示する
#そうでないと、4桁であったらisokをTrueにする。すると、繰り返し処理の

#while isok == Fakse:
#が条件を満たさなくなるので、ループが終了する

#プログラミングでは「準備が整ったかどうか？」を保存しておいて、準備が整うまで繰り返すといった判定はよく使う

#準備ができたか否かを判断する時に使われるTureかFalseかを格納する変数は「フラグ(Flag)」とも言われる。
#準備が整ったら「旗を掲げる(True)」、整っていないなら「旗を下げる(Flag)」の様に見立てたもの


#【繰り返し入力を促す仕組み】
isok = False
while isok == False:
  b = input("数を入れてね>")

  if len(b) != 4:
    print("4桁の数字を入力してください")
  else:
    isok = True
  
  print(b[0])
  print(b[1])
  print(b[2])
  print(b[3])
  
#②各桁が数字であること(0〜9のいずれか)

#if (b[0] >= "0") and (b[0] <= "9") :
#ここでのbはユーザーが入力した「文字列」で「数字」ではない
#なので「"0"」とか「"9"」の様に「””」でくくり「文字列」で扱うこと

#別解として「if(int(b[0]) >=0) and (int(b[0] <= 9):」の様にint関数を使ってb[0]を整数にする方法もある。
#しかし、b[0]が数字でない場合には、エラーが発生する
#ここではb[0]に正しく数字が入っている保証がないので、文字列として比較するのがいい

#本題は、正しく入力「されていない」時にエラーを表示したい。そこでエラーを表示するには、「if (b[0] >= "0") and (b[0] <= "9") :」　とは逆の条件にする

#if (b[0] < "0") or (b[0] > "9") :
  # print("数字ではありません")

#ここまでは一桁(b[0])の説明だが、2〜4行目も同様に比較する


# coding:utf-8
import random

isok = False
while isok == False:
  b = input("数を入れてね>")
  if len(b) != 4:
    print("4桁の数字を入力してください")
  else:
    if (b[0] < "0") or (b[0] > "9"):
        print("数字ではありません")
    elif (b[1] < "0") or (b[1] > "9"):
        print("数字ではありません")
    elif (b[2] < "0") or (b[1] > "9"):
        print("数字ではありません")
    elif (b[3] < "0") or (b[1] > "9"):
        print("数字ではありません")
    else:
        isok = True

print(b[0])
print(b[1])
print(b[2])
print(b[3])


#【ループ処理で判定をもう少し簡単に】
# 上記の書き方でも良いが、「if」が沢山あると見にくく分かりにくい
# その為には「各桁をループで判定する」方法が有効

# if (b[0] < "0") or (b[0] > "9"):
#       print("数字ではありません")
#   elif (b[1] < "0") or (b[1] > "9"):
#       print("数字ではありません")
#   elif (b[2] < "0") or (b[1] > "9"):
#       print("数字ではありません")
#   elif (b[3] < "0") or (b[1] > "9"):
#       print("数字ではありません")
#   else:
#       isok = True
#ここでは4桁を繰り返しているだけなので、

# for i in range(4):
#   各桁の比較処理

#とforを使えば短くできる
#実際には次の通り

kazuok = True         #数字でないものがあるかを調べる目的で使う
for i in range(4):    #0から3まで4回繰り返す
  if (b[i] < "0") or (b[i] > "9") :
    print("数字ではありません")
    kazuok = False    #数字ではなかった
    break
if kazuok :
    isok = True       #全部数字だったのでOK

#上記は「kazuok(数(kazu)がOKか？と言う意味でこの変数名にしているが、どの様な変数名でも良い」
#「if (b[i] < "0") or (b[i] > "9") :」　の様に数字かどうかを確かめる
#「kazuok = False」で「数字以外のものだった」と分かったら「reak」でforのループを中断して、次に進む
#if kazuok :
#   isok = True  
#kazuokがTrueであれば数字でないものはなかったと言うこと。つまり、全部数字で入力に問題がないと言うこと。そこでisokをTrueに設定する。

#これまでの流れのまとめ

#coding:utf-8
import random

isok = False
while isok == False:
    b = input("数を入れてね>")
    if len(b) != 4:
        print("4桁の数字を入力してください")
    else:
        kazuok = True                           #修正箇所    
        for i in range(4):                      #修正箇所
            if (b[i] < "0") or (b[i] > "9") :   #修正箇所
                print("数字ではありません")        #修正箇所
                kazuok = False                  #修正箇所
                break                           #修正箇所
        if kazuok :                             #修正箇所
            isok = True                         #修正箇所

print(b[0])
print(b[1])
print(b[2])
print(b[3])

#【COLUMN】
#ここでは基本に則って一桁ずつ数字を調べる方法を取った、実際１つ１つ調べるのは大変
#それをもっとスマートに書く方法として「正規表現」を使う。
#正規表現はパターンと呼ばれる書式を使って、文字列の頭から順に、文字がそのパターンと合致しているかどうかを調べる方法です。これを「パターンマッチ」という。
#数字かどうかを調べるには「\d」を使う。
#つまり、その文字列が4桁の数字であるかどうかを調べることができる。
#なお正式には「reモジュール」として提供されているので、次の様にreモジュールのインポートが必要。
#「import re」

#coding:utf-8
import re

isok = False
while isok == False:
    b = input("数を入れてね>")
    if not re.match(r"^\d\d\d\d$",b):
        print("4桁の数字を入力してください")
    else:
        isok = True

print(b[0])
print(b[1])
print(b[2])
print(b[3])

