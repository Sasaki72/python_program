#数当てゲームを作る
# 5-1
#「ヒット＆ブロー」
# ヒット＆ブローは4桁の数字を当てるゲーム
# 二人のプレーヤー「親(出題者)」と「子(回答者)」に分かれてプレイする
# 「ヒット＆ブロー」のルール
# ①親は「0」〜「9」の数字を使って、4桁の数字を考える。同じ数字を二回以上使ってもOK
# ②子は、その数字を予想して親に提示する
# ③親は②で提示された数字を判定し、ヒットとブローの数字を子に提示する
# ・「数字と位置が正しい場合 ＝ ヒット
# ・「位置は正しくないが、その数字が含まれている場合 = ブロー」
# ④②〜③を繰り返し、子はヒットとブローの結果を参考にして、親が考えた4桁の数字を当てる
# Pythonで「ヒット＆ブロー」を作る場合、コンピューター側が親(出題者)、ユーザー側が子(回答者)とする
# Pythonで「ヒット＆ブロー」を作る流れとして
# ①4桁のランダムの数字を作る
# ②ユーザーに4桁の数字を入力してもらう
# ③①と②を比較して、ヒットとブローの数を表示。
# ヒットが４でなければ、もう一度入力してもらう


# ランダムな値を生成するには、「randomモジュール」を使う
# 書式は「import モジュール名」
# ※ランダムな値の事は乱数(らんすう)ともいう
#randomモジュールをインポートすると、「import モジュール関数名」でランダムな値に関する様々な機能が使える様になる。
# 「randint(ランドイント)」という関数を使うと、特定の範囲から整数のランダムな値を取得できる。
# 例えば「random.randint(0,9)」と書けば0から9までのランダムな値を取得できる。
# random.seed(a,vresion)　ランダムな値の基となる値を設定する。
# random.randint(a,b)　　　a以上b以下のランダムな整数を返す
# random.choice(seq)      の中からランダムに１つ取り出す
# random.shuffle(x)       xをランダムな順に並べ替える
# random.random           0.0以上〜1.0未満のランダムな小数値を返す
#ランダムな1桁の数を表示する
#coding : utf-8
import random                 #randomモジュールインポート
a = random.randint(0 , 9)     #0から9までのランダムな値を作る、実行するたびに結果が変わる
print(a)


# 文字入力する
# 文字入力するにはいくつか方法があるが「input」関数を使うのが簡単
# 例えばこの様に使う　「b = input("数を入れてね>")」
# カッコの中はユーザーに表示したいメッセージ
# 画面には「数を入れてね>」と表示され、文字入力待ちの状態になる
# ユーザーが文字を入力すると、その結果がinput関数から返され、上記のbに格納される
#coding:utf-8
b = input("数を入れてね>")      #ユーザーから文字を入力してもらう
print(b)                      #入力された文字を表示
#ターミナル上で入力すると確認できる
#応用
e = input("数を入れてね>") 
print(e) 
# ランダムに1桁の数字を作るプログラムで当たりかどうかを確認する簡単なゲームを作る
# if a == b:
#     print("当たり")
#else:
#     print("はずれ")
# を使用するが、「if」と「else」はインデント(字下げ)を行う
#  coding:utf-8
import random
a = random.randint(0, 9) #コンピューターが考えたランダムな値
print(a)                 #テストのために考えを見せている
b = input("数を入れてね>") #人間が入力した値
if a == b:               #等しいかを判定(実は間違い→後述)
  print("当たり")         #等しければ当たり
else:
  print("はずれ")
#↑が正しく表示されない理由は「数値」と「文字列」を比較しているから
#「random.randint(0, 9)」で作ったランダムな値は、0から9の「数値」。それに対して、「input」で入力したものは、「文字列」として認識される。
# pythonの場合「==」で「数値」と「文字列」を比較して、等しいと判断する事はない
#それには「文字列」で入力したものを一旦「数値」に変化すればいい
#その場合「int」を使う
#b = int(input("数を入れてね>"))
#coding:utf-8
import random
a = random.randint(0 , 9)
print(a)
b = int(input("数を入れてね>")) #修正箇所
if a == b:
  print("当たり")
else:
  print("はずれ")


#4桁のランダムな値を作るには、単純に1桁のランダムな値を4回繰り返すだけ
#coding:utf-8
import random
a1 = random.randint(0 , 9) #4つのランダムな数を作る
a2 = random.randint(0 , 9) #4つのランダムな数を作る
a3 = random.randint(0 , 9) #4つのランダムな数を作る
a4 = random.randint(0 , 9) #4つのランダムな数を作る
print(str(a1) + str(a2) + str(a3) + str(a4)) #数を繋げて表示する
#「a1」「a2」「a3」「a4」は数値なので連結でこのまま足しては４つの合計が求められしまうので、4桁のランダムな値を表示するには「str」で文字列に変換しないといけない
#str(a1) + str(a2) + str(a3) + str(a4) ⇨　3995 
#とした場合
# a1 + a2 + a3 + a4 ⇨ 26 (3+9+9+5) となってしまう
# 【リストを使う】
# 「a1」「a2」「a3」「a4」と別々の変数に保存していく方法もあるが、後で値が等しいかを調べる時に処理が複雑になる
#pythonでは同じ値をひとまとめにする「リスト(list)」がある
#列挙したデータは []と,で区切る
# a = [6,8,0,2] と記述するとaには4つの箱ができそれぞれ「6」「8」「0」「2」の値が格納される
#このことを「要素(element)」と言う
#要素には「0」から始まる番号が付く、この番号のことを「インデックス」または「添字(そえじ)」と言う
#要素の値は、インデックスを指定すると参照できる
# a[0]は「6」、a[1]は「8」、a[2]は「0」、a[3]は「2」となる
#ターミナルをpythonに切り替えて
# a = [6,8,0,2]を入力して、a[0]、a[1]、a[2]、a[3]と入力すると、それぞれで「6」「8」「0」「2」とでる
# #リストを使って4桁のランダムな値を作る
# a =[random.randint(0 , 9),
#     random.randint(0 , 9),
#     random.randint(0 , 9),
#     random.randint(0 , 9)]
#coding:utf-8
import random
a =[random.randint(0 , 9),
    random.randint(0 , 9),
    random.randint(0 , 9),
    random.randint(0 , 9)]
print(str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]))


#4桁の数字を正しく入力してもらう

#【文字は要素を指定する事で１つずつ取得できる】
#入力された4桁の文字も、それぞれの文字を４つに分けて管理すると処理が楽になる
#pythonは文字列はリストと同じ様に[]の添字を使って、先頭から順に一文字ずつ取り出せる
#例えば、ユーザーから「5329」と入力された時、「b[0]」を参照すると「5」と言う文字が、「b[1]」を参照すると「3」と言う文字が得られる

# coding:utf-8
import random

b = input("数を入れてね>")  #ユーザーに4桁の数字を入力してもらう
print(b[0])               #左から順に1文字目から4文字目まで入力してもらう
print(b[1])
print(b[2])
print(b[3])

#【応用】
# s = input("数を入れてね>")
# print(s[0])
# print(s[1])
# print(s[2])
# print(s[3])

#【入力エラーをはじく】
# 入力の際に桁数が３桁や5桁、また数字でなくaやbなどの文字が入った時にエラーとしてはじく
#①4桁であるかチェックする
#pythonでは「len関数」を使って文字列の長さを求められる
# len(b)が4ではないーーすなわち、「if len(b)!4:」と言う条件を指定すると4桁で入力されたかどうか確認できる

# b = input("数を入れてね>")
# if len(b)! = 4:　　　「もし変数のbの文字が4桁でないなら」と言う意味
#     print("4桁の数字を入力してください")

#しかし実際は4桁の確認だけではなく、4桁でなければ4桁がきちんと入力されるまで、繰り返し入力する様に「while」を使ってループ処理する


#coding:utf-8
import random
isok = False                 #フラグ。最初はFalseにしておく
while isok == False:         #フラグがFalseである間、繰り返す
    b = input("数を入れてね>")
    if len(b) != 4:
      print("4桁の数字を入力してください")
    else:
      isok = True            #正しく入力されたらフラグをTrueにする(これで繰り返しを終わらせる)
print(b[0])
print(b[1])
print(b[2])
print(b[3])
# 【応用】
#coding:utf-8
# import random
# isok = False
# while isok == False:
#     p = input("数を入れてね>")
#     if len(p) != 4:
#       print("4桁の数字を入力してください")
#     else:
#       isok = True
# print(p[0])
# print(p[1])
# print(p[2])
# print(p[3])
# while 条件:
#     繰り返したい文
#と書くと繰り返し実行される仕組み
#今回は「値を正しく入力されたか」を判断するために「isok」の変数を使った。isok変数は最初は「False」を設定する
#isok = False
#while isok == False: 
#となるので成り立つ。そのため、whileの中身が実行される
#次に「数を入れてね>」と表示してユーザーが入力した結果を変数bに格納する
#b = input("数を入れてね>")
#そして次に、ifで文が4桁かどうかを判断してる
# if len(p) != 4:
#       print("4桁の数字を入力してください")
#     else:
#       isok = True
#4桁でないときは、「4桁の数字を入力してください」と表示する
#そうでないと、4桁であったらisokをTrueにする。すると、繰り返し処理の
#while isok == Fakse:
#が条件を満たさなくなるので、ループが終了する
#プログラミングでは「準備が整ったかどうか？」を保存しておいて、準備が整うまで繰り返すといった判定はよく使う
#準備ができたか否かを判断する時に使われるTureかFalseかを格納する変数は「フラグ(Flag)」とも言われる。
#準備が整ったら「旗を掲げる(True)」、整っていないなら「旗を下げる(Flag)」の様に見立てたもの
#【繰り返し入力を促す仕組み】
isok = False
while isok == False:
  b = input("数を入れてね>")
  if len(b) != 4:
    print("4桁の数字を入力してください")
  else:
    isok = True
  print(b[0])
  print(b[1])
  print(b[2])
  print(b[3])
#②各桁が数字であること(0〜9のいずれか)
#if (b[0] >= "0") and (b[0] <= "9") :
#ここでのbはユーザーが入力した「文字列」で「数字」ではない
#なので「"0"」とか「"9"」の様に「””」でくくり「文字列」で扱うこと
#別解として「if(int(b[0]) >=0) and (int(b[0] <= 9):」の様にint関数を使ってb[0]を整数にする方法もある。
#しかし、b[0]が数字でない場合には、エラーが発生する
#ここではb[0]に正しく数字が入っている保証がないので、文字列として比較するのがいい
#本題は、正しく入力「されていない」時にエラーを表示したい。そこでエラーを表示するには、「if (b[0] >= "0") and (b[0] <= "9") :」　とは逆の条件にする
#if (b[0] < "0") or (b[0] > "9") :
# print("数字ではありません")
#ここまでは一桁(b[0])の説明だが、2〜4行目も同様に比較する
# coding:utf-8
import random
isok = False
while isok == False:
  b = input("数を入れてね>")
  if len(b) != 4:
    print("4桁の数字を入力してください")
  else:
    if (b[0] < "0") or (b[0] > "9"):
        print("数字ではありません")
    elif (b[1] < "0") or (b[1] > "9"):
        print("数字ではありません")
    elif (b[2] < "0") or (b[1] > "9"):
        print("数字ではありません")
    elif (b[3] < "0") or (b[1] > "9"):
        print("数字ではありません")
    else:
        isok = True
print(b[0])
print(b[1])
print(b[2])
print(b[3])
#【ループ処理で判定をもう少し簡単に】
# 上記の書き方でも良いが、「if」が沢山あると見にくく分かりにくい
# その為には「各桁をループで判定する」方法が有効
# if (b[0] < "0") or (b[0] > "9"):
#       print("数字ではありません")
#   elif (b[1] < "0") or (b[1] > "9"):
#       print("数字ではありません")
#   elif (b[2] < "0") or (b[1] > "9"):
#       print("数字ではありません")
#   elif (b[3] < "0") or (b[1] > "9"):
#       print("数字ではありません")
#   else:
#       isok = True
#ここでは4桁を繰り返しているだけなので、
# for i in range(4):
#   各桁の比較処理
#とforを使えば短くできる
#実際には次の通り
kazuok = True         #数字でないものがあるかを調べる目的で使う
for i in range(4):    #0から3まで4回繰り返す
  if (b[i] < "0") or (b[i] > "9") :
    print("数字ではありません")
    kazuok = False    #数字ではなかった
    break
if kazuok :
    isok = True       #全部数字だったのでOK
#上記は「kazuok(数(kazu)がOKか？と言う意味でこの変数名にしているが、どの様な変数名でも良い」
#「if (b[i] < "0") or (b[i] > "9") :」　の様に数字かどうかを確かめる
#「kazuok = False」で「数字以外のものだった」と分かったら「reak」でforのループを中断して、次に進む
#if kazuok :
#   isok = True  
#kazuokがTrueであれば数字でないものはなかったと言うこと。つまり、全部数字で入力に問題がないと言うこと。そこでisokをTrueに設定する。
#これまでの流れのまとめ
#coding:utf-8
import random
isok = False
while isok == False:
    b = input("数を入れてね>")
    if len(b) != 4:
        print("4桁の数字を入力してください")
    else:
        kazuok = True                           #修正箇所    
        for i in range(4):                      #修正箇所
            if (b[i] < "0") or (b[i] > "9") :   #修正箇所
                print("数字ではありません")        #修正箇所
                kazuok = False                  #修正箇所
                break                           #修正箇所
        if kazuok :                             #修正箇所
            isok = True                         #修正箇所
print(b[0])
print(b[1])
print(b[2])
print(b[3])
#【COLUMN】
#ここでは基本に則って一桁ずつ数字を調べる方法を取った、実際１つ１つ調べるのは大変
#それをもっとスマートに書く方法として「正規表現」を使う。
#正規表現はパターンと呼ばれる書式を使って、文字列の頭から順に、文字がそのパターンと合致しているかどうかを調べる方法です。これを「パターンマッチ」という。
#数字かどうかを調べるには「\d」を使う。
#つまり、その文字列が4桁の数字であるかどうかを調べることができる。
#なお正式には「reモジュール」として提供されているので、次の様にreモジュールのインポートが必要。
#「import re」
#coding:utf-8
import re
isok = False
while isok == False:
    b = input("数を入れてね>")
    if not re.match(r"^\d\d\d\d$",b):
        print("4桁の数字を入力してください")
    else:
        isok = True
print(b[0])
print(b[1])
print(b[2])
print(b[3])


# 【ヒットとブローを判定しよう】
# これまでは、変数aには4桁のランダムな数字が、変数bにはユーザーが入力した4桁の数字が入力されるところまできた。あとは、両者を判定してヒットかブローかを判定する
#【ヒットを判定しよう】
# hit = 0                 ヒットした数
# if a[0] == int(b[0]):   1桁目
#   hit = hit + 1
# if a[1] == int(b[1]):   2桁目
#   hit = hit + 1
# if a[2] == int(b[2]):   3桁目
#   hit = hit + 1
# if a[3] == int(b[3]):   4桁目
#   hit = hit + 1
#実は、これはforループでも書くことができる。
# ↓
# hit = 0
# for i in range(4)
#   if a[i] == int(b[i]):
#     hit = hit + 1
#この様にforループでまとめる事ができる
#【ブローを判定しよう】
# ブローは「位置は正しくないが、その数字が含まれている」という状況
#これを判定するには、変数bの各桁の値と合致するかを確かめる操作となる
#   4    1    1    9
# a[0]  [1]  [2]  [3]
#   ↑① ↗︎② ↗︎③ ↗︎④
#  "1"  "4"  "3"  "9"
# b[0]  [1]  [2]  [3]  
# ブロー
# ①b[0]がa[0]と合致しているかを調べる → していない 
# ②b[0]がa[1]と合致しているかを調べる → している → ブロー
# ③すでに②でブローと分かっているので判定不要
# ④すでに②でブローと分かっているので判定不要
# ということになり、一番左の桁は「ブローしている」となる
# 実際にこの判定プログラムで記述すると、b[0]に対して、a[0],a[1],a[2],a[3]を比較すれば良い
#blow = 0 
#for i in range(4):
#  if int(b[0]) == a[i]:    b[0]がa[0],a[1],a[2],a[3]と合致するかをループで順に調べる
#    blow = blow + 1
#    break                  合致したらそこで終了
#ブローだと分かっ時にbreakして、そこで判定をやめるのはブローを重複して数えないため。
#breakしないと③でもう一度合致してしまうので、ブローの数が２になってしまう
#【重複した判定を除外する】
# ヒットとブローの判定は良いが、「ブローかつヒット」の場合があるので、ifに指定した条件が実は不十分
#例えばユーザーが入力した値が「9439」であるとします。この時、b[0]のa[3]の「9」に合致するのでブローと思いきや、a[3]はb[3]に合致しており「ヒット」です。このままだと、ヒットとブローで重複して数えてしまうので、「除外する必要がある。」
#   4    1    1    9
# a[0]  [1]  [2]  [3] 　　　
#  ↑① ↗︎② ↗︎③ ↗︎④  ↕︎(ヒットしているのでブローにしない)　
#  "9"  "4"  "3"  "9"
# b[0]  [1]  [2]  [3]     (ユーザー側)
# ブロー
#そこで、これを除外するよう、「ブロー判定のifの条件を次のように変更」する
#if (int(b[0]) == a[i]) and (a[i] != int(b[i])) and (a[0] != int(b[0])):
#「nd (a[i] != int(b[i])) and (a[0] != int(b[0])):」 が除外する条件
# これは2桁目以降も同様にチェックしていく
#for i in range(4):
#if (int(b[1]) == a[i]) and (a[i] != int(b[i])) and (a[1] != int(b[1])):
#b[1]　入力した2桁目
#同様に3桁目と4桁目もチェックすると
#blow = 0
#for i in range(4):
#  if (int(b[0]) == a[i]) and (a[i] != int(b[i])) and (a[0] != int(b[0])):
#     blow = blow + 1
#     break
#for i in range(4):
#  if (int(b[1]) == a[i]) and (a[i] != int(b[i])) and (a[1] != int(b[1])):
#     blow = blow + 1
#     break
#for i in range(4):
#  if (int(b[2]) == a[i]) and (a[i] != int(b[i])) and (a[2] != int(b[2])):
#     blow = blow + 1
#     break
#for i in range(4):
#  if (int(b[3]) == a[i]) and (a[i] != int(b[i])) and (a[3] != int(b[3])):
#     blow = blow + 1
#     break
#となるが長すぎるので、ループを使って短く書く
#biow = 0
#for j in range(4):
#  for i in range(4): 0,1,2,3とユーザーの入力欄をずらしてループする
#    if(int(b[j]) == a[i]) and (a[i] != int(b[i])) and (a[j] != int(b[j])):
#      blow = blow + 1
#      break
#b[j]はユーザーが入力したj桁目
#少し複雑だが今回は「j」という変数を使いましたが、もちろん変数名は何でも構わない
#【ヒットが4になるまで繰り返す】
#coding:utf-8
import random
a =[random.randint(0 , 9),
    random.randint(0 , 9),
    random.randint(0 , 9),
    random.randint(0 , 9)]
#テストのため答えを表示
print(str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]))
while True :
    #Lesson 5-4のプログラム
    #4桁の数字かどうかを判断する
    isok = False
    while isok == False:
        b = input("数を入れてね>")
        if len(b) != 4:
            print("4桁の数字を入力してください")
        else:
            kazuok = True
            for i in range(4):
                if (b[i] <"0") or (b[i] >"9"):
                    print("数字ではありません")
                    kazuok = False
                    break
            if kazuok :
                isok = True
    #4桁の数字であったとき
    #ヒットを判定
    hit = 0
    for i in range(4):
      if a[i] == int(b[i]):
        hit = hit + 1
    #ブローを判定
    blow = 0
    for j in range(4):
      for i in range(4):
        if (int(b[j]) == a[i]) and (a[i] != int(b[i])) and (a[j] != int(b[j])):
          blow = blow + 1
          break
    #ヒット数とブロー数を表示
    print("ヒット" + str(hit))
    print("ブロー" + str(blow))
    #ヒットが４なら当たりで終了
    if hit == 4:
        print("当たり！")
        break
#「print(str(a[0]) + str(a[1]) + str(a[2]) + str(a[3]))」
# この部分を「#」でコメントアウトする事によって、答えを表示しないようにできる
# 再度、答えを見たいときは「#」を外せば見れるようになる
